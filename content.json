{"meta":{"title":"CSONG","subtitle":"","description":"","author":"csong","url":"https://csong.vercel.app","root":"/"},"pages":[{"title":"categories","date":"2021-04-03T03:17:49.000Z","updated":"2021-04-04T06:05:30.188Z","comments":false,"path":"categories/index.html","permalink":"https://csong.vercel.app/categories/index.html","excerpt":"","text":""},{"title":"link","date":"2021-04-03T06:24:34.000Z","updated":"2021-08-22T13:45:09.736Z","comments":true,"path":"link/index.html","permalink":"https://csong.vercel.app/link/index.html","excerpt":"","text":"申请要求 申请友链之前请先添加本站链接。 按照下方 “我的信息” 格式在评论区留言。 要求网站内容符合中华人民共和国法律，制作不能太粗糙，无恶意代码。 如发现贵站失效超过一月，将直接取消贵链接，恕不另行通知。 PS. 网站评论会立刻通知，我会在方便的时候及时处理。我的信息站点名称：CSONG站点描述：仰天大笑出门去，我辈岂是蓬蒿人。站点地址：https://csong.vercel.app/站点头像：https://cdn.jsdelivr.net/gh/csong01/picgo@master/img/favicon.jpg"},{"title":"关于","date":"2021-08-22T13:51:05.000Z","updated":"2021-09-14T09:22:00.379Z","comments":true,"path":"about/index.html","permalink":"https://csong.vercel.app/about/index.html","excerpt":"","text":"2021-09-12 这段时间又折腾了一下主题，文章列表参考了掘金的样式，感觉还不错。除了文章列表，最大的改动应该是添加了很多的动效，虽然感觉都用了一种手法，但确实要生动一些了。另外，响应式也变得更合理了，文章页面的样式也发生了很大的改变，文字表格部分也是参考了掘金的，代码框部分则调了很长时间。博客一直没有评论挺让人失落的，可能是github的原因吧。还没有完成的有文章列表页面的点赞数，评论数和阅读量以及归档页面（按年份展示）暂时不知道怎么写（可能还是自己的js比较差吧），另外的搜索功能估计要很长一段时间才能完成了，当然是要自己写。最近我打算加快学习前端的节奏，一直拖下去容易丧失斗志，希望新学期能进步更多。 2021-08-26 嗯，在这个依旧忙碌的暑假中总算把这个主题重新写了一下，感觉顺眼了不少。虽然我的js学得还比较一般，但是CSS感觉熟练了不少，而且总结了很多可以直接用在其他项目上的东西。我还没有为这个主题写文档，因为我觉得现在还比较一般，等功能更完善的时候再写吧，但我不喜欢让博客太过复杂，因此应该不久就可以完成。如果你对这个主题有兴趣，有想法或者发现一些bug都可以和我交流，QQ：442529798。现在我主要是学习一下自适应的方法以及更复杂的js来丰富主题功能。 2021-04-12 首先很高兴你能来到我的网站，也许你曾经来过并且发现网站不一样了。这是我初学前端两个月后自己开发的一款主题，叫做Bright。说实话，费了很大的精力，解决了很多的问题。也许，这个网站在你的界面上乱了套，因为我还没有比较好地掌握兼容性。总之，这个主题还没有结束，现在基本上没有用到js，因为这一段时间一直在研究css。等到我的下一阶段js学得还好的时候，我就会给这个主题添加本地搜索等功能，不过这个学期快要结束，学业压力大，可能要等到暑假了。"},{"title":"tags","date":"2021-04-03T03:19:15.000Z","updated":"2021-04-08T09:36:38.655Z","comments":false,"path":"tags/index.html","permalink":"https://csong.vercel.app/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Markdown测试","slug":"markdown_test","date":"2021-04-17T11:27:20.000Z","updated":"2021-09-13T04:40:43.707Z","comments":true,"path":"2021/04/17/markdown-test/","link":"","permalink":"https://csong.vercel.app/2021/04/17/markdown-test/","excerpt":"","text":"Markdown Basic SyntaxI just love bold text. Italicized text is the cat’s meow. At the command prompt, type nano. My favorite markdown editor is ByteMD. First item Second item Third item Dorothy followed her through many of the beautiful rooms in her castle. import &#123; Editor, Viewer &#125; from &#x27;bytemd&#x27;;import gfm from &#x27;@bytemd/plugin-gfm&#x27;;const plugins = [ gfm(), // Add more plugins here];const editor = new Editor(&#123; target: document.body, // DOM to render props: &#123; value: &#x27;&#x27;, plugins, &#125;,&#125;);editor.on(&#x27;change&#x27;, (e) =&gt; &#123; editor.$set(&#123; import &#123; Editor, Viewer &#125; from &#x27;bytemd&#x27;;import gfm from &#x27;@bytemd/plugin-gfm&#x27;;const plugins = [ gfm(), // Add more plugins here];const editor = new Editor(&#123; target: document.body, // DOM to render props: &#123; value: &#x27;&#x27;, plugins, &#125;,&#125;);editor.on(&#x27;change&#x27;, (e) =&gt; &#123; editor.$set(&#123; value: e.detail.value &#125;);&#125;); GFM Extended SyntaxAutomatic URL Linking: https://github.com/bytedance/bytemd The world is flat. We now know that the world is round. Write the press release Update the website Contact the media Syntax Description Header Title Paragraph Text FootnotesHere’s a simple footnote,[^1] and here’s a longer one.[^bignote] [^1]: This is the first footnote.[^bignote]: Here’s one with multiple paragraphs and code. Indent paragraphs to include them in the footnote. `&#123; my code &#125;` Add as many paragraphs as you like.","categories":[{"name":"前端笔记","slug":"前端笔记","permalink":"https://csong.vercel.app/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://csong.vercel.app/tags/Markdown/"}]},{"title":"CSS3学习笔记","slug":"CSS3学习笔记","date":"2021-04-17T11:27:20.000Z","updated":"2021-09-13T04:38:15.869Z","comments":true,"path":"2021/04/17/css3-xue-xi-bi-ji/","link":"","permalink":"https://csong.vercel.app/2021/04/17/css3-xue-xi-bi-ji/","excerpt":"","text":"CSS3简介浏览器私有前缀在书写CSS3属性的时候，可能需要在属性前面加上浏览器的私有前缀，然后该浏览器才能识别对应的CSS3属性。对于IE浏览器来说，暂时只有IE9及以上版本支持CSS3属性，对于IE6~IE8的兼容，我们可以借助ie-css3.htc这个扩展文本来实现。 私有前缀 对应的浏览器 -webkit- Chrome和Safari -moz- Firefox -ms- IE -o- Opera 举个例子，如果我们想要使用CSS3来实现边框阴影效果，可能会这样写：box-shadow: 5px 5px 10px red;但是并非所有浏览器都能识别box-shadow这个属性，例如Chrome只能识别-webkit-box-shadow（前缀为-webkit-），而Firefox只能识别-moz-box-radius（前缀为-moz-）。因此，如果想要让所有主流浏览器都能实现边框阴影效果，我们需要这样写：box-shadow: 5px 5px 10px red;-webkit-box-shadow: 5px 5px 10px red;-moz-box-shadow: 5px 5px 10px red;-ms-box-shadow: 5px 5px 10px red;-o-box-shadow: 5px 5px 举个例子，如果我们想要使用CSS3来实现边框阴影效果，可能会这样写：box-shadow: 5px 5px 10px red;但是并非所有浏览器都能识别box-shadow这个属性，例如Chrome只能识别-webkit-box-shadow（前缀为-webkit-），而Firefox只能识别-moz-box-radius（前缀为-moz-）。因此，如果想要让所有主流浏览器都能实现边框阴影效果，我们需要这样写：box-shadow: 5px 5px 10px red;-webkit-box-shadow: 5px 5px 10px red;-moz-box-shadow: 5px 5px 10px red;-ms-box-shadow: 5px 5px 10px red;-o-box-shadow: 5px 5px 10px red; 新选择器属性选择器 //举例&lt;style type=&quot;text/css&quot;&gt; /*清除所有元素默认的padding和margin*/ *&#123;padding:0;margin:0;&#125; /*清除列表项符号*/ ul&#123;list-style-type:none;&#125; a &#123; display:inline-block; font-size:12px; height:20px; line-height:20px; &#125; /*匹配doc文件*/ a[href$=&quot;doc&quot;]::before &#123; content:url(&quot;img/1.png&quot;); &#125; /*匹配pdf文件*/ a[href$=&quot;pdf&quot;]::before &#123; content:url(&quot;img/2.png&quot;); &#125; /*匹配ppt文件*/ a[href$=&quot;ppt&quot;]::before &#123; content:url(//举例&lt;style type=&quot;text/css&quot;&gt; /*清除所有元素默认的padding和margin*/ *&#123;padding:0;margin:0;&#125; /*清除列表项符号*/ ul&#123;list-style-type:none;&#125; a &#123; display:inline-block; font-size:12px; height:20px; line-height:20px; &#125; /*匹配doc文件*/ a[href$=&quot;doc&quot;]::before &#123; content:url(&quot;img/1.png&quot;); &#125; /*匹配pdf文件*/ a[href$=&quot;pdf&quot;]::before &#123; content:url(&quot;img/2.png&quot;); &#125; /*匹配ppt文件*/ a[href$=&quot;ppt&quot;]::before &#123; content:url(\"img/3.png\"); &#125; 子元素伪类选择器:first-child、:last-child、:nth-child(n)、:only-child用子元素伪类选择器，可以让结构与样式分离，使得用子元素伪类选择器，可以让结构与样式分离，使得HTML结构更加清晰，更利于后期维护和搜索引擎优化（即SEO）。 选择器 说明 E:first-child 选择父元素下的第一个子元素（该子元素类型为E，以下类同） E:last-child 选择父元素下的最后一个子元素 E:nth-child(n) 选择父元素下的第n个子元素或奇偶元素，n取值有3种：数字、odd和even，其中n从1开始 E:only-child 选择父元素下唯一的子元素，该父元素只有一个子元素 &lt;-- 隔行换色 --&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123;padding:0;margin:0;&#125; ul&#123;list-style-type:none;&#125; ul li&#123; height:20px;&#125; /*设置奇数列的背景颜色*/ ul li:nth-child(odd) &#123; background-color:red; &#125; /*设置偶数列的背景颜色*/ ul li:nth-child(even) &#123; background-color:green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/&lt;-- 隔行换色 --&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123;padding:0;margin:0;&#125; ul&#123;list-style-type:none;&#125; ul li&#123; height:20px;&#125; /*设置奇数列的背景颜色*/ ul li:nth-child(odd) &#123; background-color:red; &#125; /*设置偶数列的背景颜色*/ ul li:nth-child(even) &#123; background-color:green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html> :first-of-type、:last-of-type、:nth-of-type(n)、:only-of-type:first-child在选择父元素下的子元素时，不仅要区分元素类型，还要求是第一个子元素。而:first-child在选择父元素下的子元素时，不仅要区分元素类型，还要求是第一个子元素。而:first-of-type在选择父元素下的子元素时，只需要区分元素类型，不要求是第一个子元素 选择器 说明 E:first-of-type 选择父元素下的第一个E类型的子元素 E:last-of-type 选择父元素下的最后一个E类型的子元素 E:nth-of-type(n) 选择父元素下的第n个E类型的子元素或奇偶元素，n取值有3种：数字、odd和even，n从1开始 E:only-of-type 选择父元素下唯一的E类型的子元素，该父元素可以有多个子元素 UI伪类选择器对于指定的样式，在默认状态下不起作用，只有当元素处于某种状态时才起作用。此外，记住一点，大多数对于指定的样式，在默认状态下不起作用，只有当元素处于某种状态时才起作用。此外，记住一点，大多数UI伪类选择器都是针对表单元素的 :focus使用:focus选择器来定义元素获取焦点时使用的样式。不过并不是所有的HTML元素都有焦点样式，具有“获取焦点”和“失去焦点”特点的元素只有两种。（1）表单元素（按钮、单选框、复选框、文本框、下拉列表）（2）超链接------------------------------------------------------------------------------input:focus &#123; outline:使用:focus选择器来定义元素获取焦点时使用的样式。不过并不是所有的HTML元素都有焦点样式，具有“获取焦点”和“失去焦点”特点的元素只有两种。（1）表单元素（按钮、单选框、复选框、文本框、下拉列表）（2）超链接------------------------------------------------------------------------------input:focus &#123; outline:1px solid red; &#125; ::selection使用::selection选择器来定义页面中被选中文本的样式。注意，::selection选择器使用的是双冒号，而不是单冒号。实际上，单冒号往往都是伪类，而双冒号往往都是伪元素。------------------------------------------------------------------------------div::selection &#123; color:white; background-color:red; &#125;div::-moz-selection &#123; color:white; background-color:red; &#125;------------------------------------------------------------------------------为整个页面的选中文本定义样式，我们只需要使用::selection&#123;&#125;就可以实现。------------------------------------------------------------------------------::selection &#123; color:white; background-color:red; &#125; /*兼容Firefox浏览器*/ ::-moz-selection &#123; color:white; 使用::selection选择器来定义页面中被选中文本的样式。注意，::selection选择器使用的是双冒号，而不是单冒号。实际上，单冒号往往都是伪类，而双冒号往往都是伪元素。------------------------------------------------------------------------------div::selection &#123; color:white; background-color:red; &#125;div::-moz-selection &#123; color:white; background-color:red; &#125;------------------------------------------------------------------------------为整个页面的选中文本定义样式，我们只需要使用::selection&#123;&#125;就可以实现。------------------------------------------------------------------------------::selection &#123; color:white; background-color:red; &#125; /*兼容Firefox浏览器*/ ::-moz-selection &#123; color:white; background-color:red; &#125; :checked使用:checked选择器来定义单选框或复选框被选中时的样式。在兼容性方面，暂时只有Opera浏览器支持:checked。------------------------------------------------------------------------------input:checked &#123; 使用:checked选择器来定义单选框或复选框被选中时的样式。在兼容性方面，暂时只有Opera浏览器支持:checked。------------------------------------------------------------------------------input:checked &#123; background-color: red; &#125; :enabled和:disabled使用:enabled选择器来定义表单元素“可用”时的样式，也可以使用:disabled选择器来定义表单元素“不可用”时的样式。------------------------------------------------------------------------------&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; input:enabled &#123; outline:1px solid red; &#125; input:disabled &#123; background-color:orange; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;form&gt; &lt;p&gt;&lt;label for=&quot;enabled&quot;&gt;可用:&lt;/label&gt;&lt;input id=&quot;enabled&quot; type=&quot;text&quot;/&gt;&lt;/p&gt; &lt;p&gt;&lt;label for=&quot;disabled&quot;&gt;禁用:&lt;/label&gt;&lt;input id=&quot;disabled&quot; type=&quot;text&quot; disabled/&gt;&lt;/p&gt; &lt;/form&gt;&lt;/使用:enabled选择器来定义表单元素“可用”时的样式，也可以使用:disabled选择器来定义表单元素“不可用”时的样式。------------------------------------------------------------------------------&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; input:enabled &#123; outline:1px solid red; &#125; input:disabled &#123; background-color:orange; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;form&gt; &lt;p&gt;&lt;label for=&quot;enabled&quot;&gt;可用:&lt;/label&gt;&lt;input id=&quot;enabled&quot; type=&quot;text&quot;/&gt;&lt;/p&gt; &lt;p&gt;&lt;label for=&quot;disabled&quot;&gt;禁用:&lt;/label&gt;&lt;input id=&quot;disabled&quot; type=&quot;text&quot; disabled/&gt;&lt;/p&gt; &lt;/form&gt;&lt;/body> :read-write和:read-only使用:read-write选择器来定义表单元素“可读写”时的样式，也可以使用:read-only选择器来定义表单元素“只读”时的样式。Firefox浏览器只能识别带有-moz-前缀的:read-write和:read-only。------------------------------------------------------------------------------&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; input:read-write &#123; outline:1px solid red; &#125; input:read-only &#123; background-color:silver; &#125; /*兼容Firefox浏览器*/ input:-moz-read-write &#123; outline:1px solid red; &#125; input:-moz-read-only &#123; background-color:silver; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;form method=&quot;post&quot;&gt; &lt;p&gt;&lt;label for=&quot;txt1&quot;&gt;读写:&lt;/label&gt;&lt;input id=&quot;txt1&quot; type=&quot;text&quot; /&gt;&lt;/p&gt; &lt;p&gt;&lt;label for=&quot;txt2&quot;&gt;只读:&lt;/label&gt;&lt;input id=&quot;txt2&quot; type=&quot;text&quot; readonly /&gt;&lt;/p&gt; &lt;/form&gt;&lt;/使用:read-write选择器来定义表单元素“可读写”时的样式，也可以使用:read-only选择器来定义表单元素“只读”时的样式。Firefox浏览器只能识别带有-moz-前缀的:read-write和:read-only。------------------------------------------------------------------------------&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; input:read-write &#123; outline:1px solid red; &#125; input:read-only &#123; background-color:silver; &#125; /*兼容Firefox浏览器*/ input:-moz-read-write &#123; outline:1px solid red; &#125; input:-moz-read-only &#123; background-color:silver; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;form method=&quot;post&quot;&gt; &lt;p&gt;&lt;label for=&quot;txt1&quot;&gt;读写:&lt;/label&gt;&lt;input id=&quot;txt1&quot; type=&quot;text&quot; /&gt;&lt;/p&gt; &lt;p&gt;&lt;label for=&quot;txt2&quot;&gt;只读:&lt;/label&gt;&lt;input id=&quot;txt2&quot; type=&quot;text&quot; readonly /&gt;&lt;/p&gt; &lt;/form&gt;&lt;/body> 其他伪类选择器:root使用:root选择器来选择HTML页面的根元素如果想要设置整个页面的背景色，我们应该针对html元素来设置，而不是body元素。下面两句代码是等价的：:root&#123;background-color:gray;&#125;html&#123;background-color:gray;&#125;(使用:root选择器来定义整个页面的背景色为灰色，然后将使用:root选择器来选择HTML页面的根元素如果想要设置整个页面的背景色，我们应该针对html元素来设置，而不是body元素。下面两句代码是等价的：:root&#123;background-color:gray;&#125;html&#123;background-color:gray;&#125;(使用:root选择器来定义整个页面的背景色为灰色，然后将body元素的背景色定义为红色。) :empty使用:empty选择器来选择一个“不包含任何子元素和内容”的元素，也就是选择一个空元素。对于表格中内容为空的单元格，我们往往为其设置不同的颜色，这样也会使得用户体验更好。&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; table,tr,td &#123; border:1px solid silver; &#125; td &#123; width:60px; height:60px; line-height:60px; text-align:center; background-color: #FFA722; &#125; td:empty &#123; background-color:red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;4&lt;/td&gt; &lt;td&gt;8&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;16&lt;/td&gt; &lt;td&gt;32&lt;/td&gt; &lt;td&gt;64&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;128&lt;/td&gt; &lt;td&gt;256&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/使用:empty选择器来选择一个“不包含任何子元素和内容”的元素，也就是选择一个空元素。对于表格中内容为空的单元格，我们往往为其设置不同的颜色，这样也会使得用户体验更好。&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; table,tr,td &#123; border:1px solid silver; &#125; td &#123; width:60px; height:60px; line-height:60px; text-align:center; background-color: #FFA722; &#125; td:empty &#123; background-color:red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;4&lt;/td&gt; &lt;td&gt;8&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;16&lt;/td&gt; &lt;td&gt;32&lt;/td&gt; &lt;td&gt;64&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;128&lt;/td&gt; &lt;td&gt;256&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body> :target:target选择器来选取页面中的某一个target元素。所谓的target元素，指的是id被当成页面的锚点链接来使用的元素。:target选择器一般都是结合锚点链接来使用的，这样可以实现用户体验更好的导航效果。&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; :target h3 &#123; color:red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;a href=&quot;#music&quot;&gt;推荐音乐&lt;/a&gt;&lt;br /&gt; &lt;a href=&quot;#movie&quot;&gt;推荐电影&lt;/a&gt;&lt;br /&gt; &lt;a href=&quot;#article&quot;&gt;推荐文章&lt;/a&gt;&lt;br /&gt; &lt;/div&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; &lt;div id=&quot;music&quot;&gt; &lt;h3&gt;推荐音乐&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;林俊杰-被风吹过的夏天&lt;/li&gt; &lt;li&gt;曲婉婷-在我的歌声里&lt;/li&gt; &lt;li&gt;许嵩-灰色头像&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; &lt;div id=&quot;movie&quot;&gt; &lt;h3&gt;推荐电影&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;蜘蛛侠系列&lt;/li&gt; &lt;li&gt;钢铁侠系统&lt;/li&gt; &lt;li&gt;复仇者联盟&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; &lt;div id=&quot;article&quot;&gt; &lt;h3&gt;推荐文章&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;朱自清-荷塘月色&lt;/li&gt; &lt;li&gt;余光中-乡愁&lt;/li&gt; &lt;li&gt;鲁迅-阿Q正传&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/:target选择器来选取页面中的某一个target元素。所谓的target元素，指的是id被当成页面的锚点链接来使用的元素。:target选择器一般都是结合锚点链接来使用的，这样可以实现用户体验更好的导航效果。&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; :target h3 &#123; color:red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;a href=&quot;#music&quot;&gt;推荐音乐&lt;/a&gt;&lt;br /&gt; &lt;a href=&quot;#movie&quot;&gt;推荐电影&lt;/a&gt;&lt;br /&gt; &lt;a href=&quot;#article&quot;&gt;推荐文章&lt;/a&gt;&lt;br /&gt; &lt;/div&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; &lt;div id=&quot;music&quot;&gt; &lt;h3&gt;推荐音乐&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;林俊杰-被风吹过的夏天&lt;/li&gt; &lt;li&gt;曲婉婷-在我的歌声里&lt;/li&gt; &lt;li&gt;许嵩-灰色头像&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; &lt;div id=&quot;movie&quot;&gt; &lt;h3&gt;推荐电影&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;蜘蛛侠系列&lt;/li&gt; &lt;li&gt;钢铁侠系统&lt;/li&gt; &lt;li&gt;复仇者联盟&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; &lt;div id=&quot;article&quot;&gt; &lt;h3&gt;推荐文章&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;朱自清-荷塘月色&lt;/li&gt; &lt;li&gt;余光中-乡愁&lt;/li&gt; &lt;li&gt;鲁迅-阿Q正传&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/body> :not()使用:not()选择器来选取某一个元素之外的所有元素。这个选择器非常重要，在实际开发中用得非常多，大家要重点掌握。&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123;padding:0;margin:0;&#125; ul&#123;list-style-type:none;&#125; ul li:not(.first) &#123; color:red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li class=&quot;first&quot;&gt;绿叶学习网&lt;/li&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;/ul&gt;&lt;/使用:not()选择器来选取某一个元素之外的所有元素。这个选择器非常重要，在实际开发中用得非常多，大家要重点掌握。&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123;padding:0;margin:0;&#125; ul&#123;list-style-type:none;&#125; ul li:not(.first) &#123; color:red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li class=&quot;first&quot;&gt;绿叶学习网&lt;/li&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;/ul&gt;&lt;/body> 文本样式文本阴影：text-shadowW3C坐标系 数学坐标系：y轴正方向向上。 W3C坐标系：y轴正方向向下。 text-shadow属性简介为文本添加阴影效果text-shadow:x-offset y-offset blur color;x-offset是“水平阴影”，表示阴影的水平偏移距离，单位可以是px、em和百分比等。由于CSS3采用的是W3C坐标系，因此如果值为正，则阴影向右偏移；如果值为负，则阴影向左偏移。y-offset是“垂直阴影”，表示阴影的垂直偏移距离，单位可以是px、em和百分比等。由于CSS3采用的是W3C坐标系，因此如果值为正，则阴影向下偏移；如果值为负，则阴影向上偏移。blur是“模糊距离”，表示阴影的模糊程度，单位可以是px、em、百分比等。blur值越大，则阴影越模糊；blur值越小，则阴影越清晰。此外，blur不能为负值。如果不需要阴影模糊效果，可以把blur值设置为0。color是“阴影颜色”，表示阴影的颜色。可以使用text-shadow属性为文本定义多个阴影，并且针对每个阴影使用不同的颜色。当定义多个阴影时，text-shadow属性是一个以英文逗号隔开的值列表，例如：text-shadow:0 0 4px red, 0 -5px 4px green, 2px -10px 6px blue;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; display: inline-block; padding: 16px; font-size: 32px; font-weight: bold; background-color: #CCC; color: #ddd; text-shadow: -1px 0 0 #333, /*向左阴影*/ 0 -1px 0 #333, /*向上阴影*/ 1px 0 0 #333, /*向右阴影*/ 0 1px 0 #333; /*向下阴影*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt;&lt;/body&gt;&lt;/为文本添加阴影效果text-shadow:x-offset y-offset blur color;x-offset是“水平阴影”，表示阴影的水平偏移距离，单位可以是px、em和百分比等。由于CSS3采用的是W3C坐标系，因此如果值为正，则阴影向右偏移；如果值为负，则阴影向左偏移。y-offset是“垂直阴影”，表示阴影的垂直偏移距离，单位可以是px、em和百分比等。由于CSS3采用的是W3C坐标系，因此如果值为正，则阴影向下偏移；如果值为负，则阴影向上偏移。blur是“模糊距离”，表示阴影的模糊程度，单位可以是px、em、百分比等。blur值越大，则阴影越模糊；blur值越小，则阴影越清晰。此外，blur不能为负值。如果不需要阴影模糊效果，可以把blur值设置为0。color是“阴影颜色”，表示阴影的颜色。可以使用text-shadow属性为文本定义多个阴影，并且针对每个阴影使用不同的颜色。当定义多个阴影时，text-shadow属性是一个以英文逗号隔开的值列表，例如：text-shadow:0 0 4px red, 0 -5px 4px green, 2px -10px 6px blue;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; display: inline-block; padding: 16px; font-size: 32px; font-weight: bold; background-color: #CCC; color: #ddd; text-shadow: -1px 0 0 #333, /*向左阴影*/ 0 -1px 0 #333, /*向上阴影*/ 1px 0 0 #333, /*向右阴影*/ 0 1px 0 #333; /*向下阴影*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt;&lt;/body&gt;&lt;/html> 文本描边：text-stroke给文字添加边框。text-stroke:width color;Crhome和Firefox这两个浏览器都只能识别-webkit-前缀的text-stroke属性。text-stroke是一个复合属性，它是由text-stroke-wdith和text-stroke-color两个子属性组成。（1）text-stroke-width：定义边框的宽度。（2）text-stroke-color：定义边框的颜色。&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; font-family:Verdana; font-size:50px; font-weight:bold; color:transparent; /*设置文字颜色为透明*/ text-stroke:2px red; -webkit-text-stroke:2px red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;lvyestudy&lt;/div&gt;&lt;/body&gt;&lt;/给文字添加边框。text-stroke:width color;Crhome和Firefox这两个浏览器都只能识别-webkit-前缀的text-stroke属性。text-stroke是一个复合属性，它是由text-stroke-wdith和text-stroke-color两个子属性组成。（1）text-stroke-width：定义边框的宽度。（2）text-stroke-color：定义边框的颜色。&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; font-family:Verdana; font-size:50px; font-weight:bold; color:transparent; /*设置文字颜色为透明*/ text-stroke:2px red; -webkit-text-stroke:2px red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;lvyestudy&lt;/div&gt;&lt;/body&gt;&lt;/html> 文本溢出：text-overflow定义文本的溢出样式。text-overflow:取值;只能实现“单行文本”的省略号效果。如果想要实现“多行文本”的省略号效果必须借助JavaScript或jQuery才行。单独使用text-overflow属性是无法得到省略号效果的。要想实现文本溢出时就显示省略号效果，我们还需要结合white-space和overflow这两个属性来实现，这三个是固定搭配的，下面是完整的语法：overflow:hidden; white-space:nowrap;text-overflow:ellipsis; (white-space:nowrap;规定段落中的文本不进行换行：)&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:200px; height:100px; border:1px solid silver; overflow:hidden; white-space:nowrap; text-overflow:ellipsis; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网成立于2015年4月1日，是一个最富有活力的Web技术学习网站。在这里，我们只提供互联网最好的Web技术教程和最佳的学习体验。每一个教程、每一篇文章、甚至每一个知识点，都体现绿叶精品的态度。没有最好，但是我们可以做到更好！&lt;/div&gt;&lt;/body&gt;&lt;/定义文本的溢出样式。text-overflow:取值;只能实现“单行文本”的省略号效果。如果想要实现“多行文本”的省略号效果必须借助JavaScript或jQuery才行。单独使用text-overflow属性是无法得到省略号效果的。要想实现文本溢出时就显示省略号效果，我们还需要结合white-space和overflow这两个属性来实现，这三个是固定搭配的，下面是完整的语法：overflow:hidden; white-space:nowrap;text-overflow:ellipsis; (white-space:nowrap;规定段落中的文本不进行换行：)&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:200px; height:100px; border:1px solid silver; overflow:hidden; white-space:nowrap; text-overflow:ellipsis; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网成立于2015年4月1日，是一个最富有活力的Web技术学习网站。在这里，我们只提供互联网最好的Web技术教程和最佳的学习体验。每一个教程、每一篇文章、甚至每一个知识点，都体现绿叶精品的态度。没有最好，但是我们可以做到更好！&lt;/div&gt;&lt;/body&gt;&lt;/html> 属性值 说明 ellipsis 当文本溢出时，显示省略号，并且隐藏多余的文字 clip 当文本溢出时，不显示省略号，而是将溢出的文字裁切掉 强制换行：word-wrap、word-break 一般情况下，我们只会用到word-wrap:break-word;或word-break:break-all这两个来实现强制换行。word-wrap和word-break这两个属性都是针对英文页面来说的，在中文页面中很少用到 word-wrap word-wrap:break-word;会首先尝试挪到下一行，看看下一行的宽度够不够，不够的话再进行单词内的断句。 word-wrap:取值; word-wrap属性只有2个取值，如下表所示。 属性值 说明 Normal 自动换行（默认值） break-word 强制换行 word-break word-break:break-all不会尝试把长单词挪到下一行，而是直接就进行单词内的断句。 word-break:取值; word-break属性有3个取值，如下表所示。 属性值 说明 normal 自动换行（默认值） break-all 允许在单词内换行 keep-all 只能在半角空格或连字符处换行 嵌入字体：@font-face 可以使用@font-face方法来加载服务器端的字体，从而使得所有用户都能正常显示该字体。不建议使用@font-face来实现嵌入中文字体。这是因为中文字体文件大多数都是10MB以上。这么大的字体文件，会严重影响页面的加载速度，导致用户体验非常差。 @font-face方法不仅可以用于嵌入字体，最重要的还可以实现字体图标技术（即iconfont） 如果想要实现嵌入字体，一般需要以下两步。 ①使用@font-face定义字体。②使用font-family引用字体。 @font-face&#123; font-family: 字体名称; src:url(@font-face&#123; font-family: 字体名称; src:url(文件路径);&#125; &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*定义字体*/ @font-face &#123; font-family: myfont; /*定义字体名称为myfont*/ src: url(&quot;css/font/Horst-Blackletter.ttf&quot;); &#125; div &#123; font-family:myfont; /*使用自定义的myfont字体*/ font-size:60px; background-color:#ECE2D6; color:#626C3D; padding:20px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;lvyestudy&lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*定义字体*/ @font-face &#123; font-family: myfont; /*定义字体名称为myfont*/ src: url(&quot;css/font/Horst-Blackletter.ttf&quot;); &#125; div &#123; font-family:myfont; /*使用自定义的myfont字体*/ font-size:60px; background-color:#ECE2D6; color:#626C3D; padding:20px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;lvyestudy&lt;/div&gt;&lt;/body&gt;&lt;/html> 颜色样式opacity透明度 我们可以使用opacity属性来定义元素的透明度。 opacity属性取值是一个数值，取值范围为0.0~1.0。其中0.0表示完全透明，1.0表示完全不透明。 opacity属性不仅作用于元素的背景颜色，还会作用于内部所有子元素以及文本内容。 opacity属性大多数时候都是配合:hover来定义鼠标移动到某个按钮或图片上时，改变透明度来呈现动态的效果。 opacity:数值; &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; a &#123; display:inline-block; padding:5px 10px; font-family:微软雅黑; color:white; background-color:hotpink; cursor:pointer; &#125; a:hover &#123; opacity:0.6; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;a&gt;调试代码&lt;/a&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; a &#123; display:inline-block; padding:5px 10px; font-family:微软雅黑; color:white; background-color:hotpink; cursor:pointer; &#125; a:hover &#123; opacity:0.6; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;a&gt;调试代码&lt;/a&gt;&lt;/body&gt;&lt;/html> RGBA颜色RGBA中的透明度只会针对当前设置的属性起作用。 下面几种有关RGBA颜色的写法都是正确的： rgba(255, 255, 0, 0.5)rgba(50%, 80%, 50%, rgba(255, 255, 0, 0.5)rgba(50%, 80%, 50%, 0.5) rgba(R, G, B, rgba(R, G, B, A) &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123;padding:0;margin:0;&#125; ul &#123; display:inline-block; list-style-type:none; width:200px; &#125; li &#123; height:30px; line-height:30px; font-size:20px; font-weight:bold; text-align:center; &#125; /*第1个li，透明度为1.0*/ li:first-child &#123; background-color:rgba(255,0,255,1.0); &#125; /*第2个li，透明度为0.6*/ li:nth-child(2) &#123; background-color:rgba(255,0,255,0.6); &#125; /*第3个li，透明度为0.3*/ li:last-child &#123; background-color:rgba(255,0,255,0.3); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123;padding:0;margin:0;&#125; ul &#123; display:inline-block; list-style-type:none; width:200px; &#125; li &#123; height:30px; line-height:30px; font-size:20px; font-weight:bold; text-align:center; &#125; /*第1个li，透明度为1.0*/ li:first-child &#123; background-color:rgba(255,0,255,1.0); &#125; /*第2个li，透明度为0.6*/ li:nth-child(2) &#123; background-color:rgba(255,0,255,0.6); &#125; /*第3个li，透明度为0.3*/ li:last-child &#123; background-color:rgba(255,0,255,0.3); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html> CSS3渐变 在真正的开发中，大多数渐变效果都是线性渐变 线性渐变线性渐变，指的是在一条直线上进行的渐变。我们见到的大多数渐变效果都是线性渐变。 线性渐变也可以接受一个“值列表”，用于同时定义多种颜色的线性渐变，颜色值之间用英文逗号隔开即可。 background:background:linear-gradient(to right, red, orange, yellow, green, blue, indigo, violet); background:background:linear-gradient(方向, 开始颜色, 结束颜色) 线性渐变的“方向”取值有两种:一种是使用角度（单位为deg）;另外一种是使用关键字，如下表所示。 属性值 对应角度 说明 to top 0deg 从下到上 to bottom 180deg 从上到下（默认值） to left 270deg 从右到左 to right 90deg 从左到右 to top left 无 从右下角到左上角（斜对角） to top right 无 从左下角到右上角（斜对角） &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:200px; height:150px; background:linear-gradient(to right,blue,yellow); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:200px; height:150px; background:linear-gradient(to right,blue,yellow); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html> 径向渐变 径向渐变，指的是颜色从内到外进行的圆形渐变 position用于定义圆心位置。shape size用于定义形状大小，由两部分组成，shape定义形状，size定义大小。start-color和stop-color分别用于定义开始颜色和结束颜色。 其中，position和shape size都是可选参数。如果省略，则表示采用默认值。start-color和stop-color都是必选参数，可以有多个颜色值。 background:background:radial-gradient(position, shape size, start-color, stop-color) 圆心位置position常用取值有两种：一种是“长度值”（如10px）；另外一种是“关键字”（如top），,如下表所示。Chrome和Firefox只能识别以-webkit-作为前缀的径向渐变属性。 属性值 说明 center 中部（默认值） top 顶部 bottom 底部 left 左部 right 右部 top center 靠上居中 top left 左上 top right 右上 left center 靠左居中 center center 正中 right center 靠右居中 bottom left 左下 bottom center 靠下居中 bottom right 右下 shape sizeshape 属性值 说明 ellipse 椭圆形（默认值） circle 圆形 size 属性值 说明 closet-side 指定径向渐变的半径长度为从圆心到离圆心最近的边 closet-corner 指定径向渐变的半径长度为从圆心到离圆心最近的角 farthest-side 指定径向渐变的半径长度为从圆心到离圆心最远的边 farthest-corner 指定径向渐变的半径长度为从圆心到离圆心最远的角 #div1 &#123; background:-webkit-radial-gradient(ellipse, orange,blue); &#125; #div2 &#123; background:#div1 &#123; background:-webkit-radial-gradient(ellipse, orange,blue); &#125; #div2 &#123; background:-webkit-radial-gradient(circle,orange,blue); &#125; start-color和stop-color默认情况下，径向渐变的颜色节点是均匀分布的，不过我们可以为每一种颜色添加百分比，从而使得各个颜色节点不均匀分布。 边框样式圆角效果：border-radius 在前端开发中，我们都是秉着“尽量少用图片”的原则。能用CSS实现的效果，就尽量不要用图片。因为每一个图片都会引发一次HTTP请求，加上图片体积大，会极大影响页面的加载速度。 我们可以使用border-radius属性为元素添加圆角效果。 border-radius属性取值是一个长度值，单位可以是px、em和百分比等。 border-radius:取值; &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:200px; height:150px; border:1px solid gray; border-radius:20px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:200px; height:150px; border:1px solid gray; border-radius:20px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html> border-radius属性值的4种写法border-radius:10px;表示4个角的圆角半径都是10px border-radius:10px 20px;表示左上角和右下角的圆角半径是10px，右上角和左下角的圆角半径都是20px border-radius:10px 20px 30px;表示左上角的圆角半径是10px，左下角和右上角的圆角半径都是20px，右下角圆角半径是30px border-radius:10px 20px 30px 40px;表示左上角、右上角、右下角和左下角的圆角半径，依次是10px、20px、30px、40px，按照顺时针方向来记忆。 border-radius实现半圆和圆半圆把高度（height）设为宽度（width）的一半，并且左上角和右上角的圆角半径定义与元素的高度一致，而右下角和左下角的圆角半径定义为0。 圆元素的宽度和高度定义为相同值，然后4个角的圆角半径定义为宽度（或高度）的一半（或者50%）。 border-radius实现椭圆border-radius:x/y; 当border-radius属性取值为一个值时，例如，“border-radius:30px;”表示圆角水平半径和垂直半径为30px，也就是说“border-radius:30px;”等价于“border-radius:30px/30px”，前者是后者的缩写。 实现椭圆，原理如下：元素的宽度和高度不相等，其中4个角的圆角水平半径定义为宽度的一半，垂直半径定义为高度的一半。 div &#123; width:160px; height:100px; border:1px solid gray; border-radius:80px/div &#123; width:160px; height:100px; border:1px solid gray; border-radius:80px/50px; &#125; border-radius的派生子属性 border-top-right-radius：右上角 border-bottom-right-radius：右下角 border-bottom-left-radius：左下角 border-top-left-radius：左上角 边框阴影：box-shadow 使用box-shadow属性轻松为元素添加阴影效果。 style取值有两种：outset和inset。当取值为outset时（默认值），表示外阴影；当取值为inset时，表示内阴影。 当x-offset和y-offset都为0时，阴影都是向外发散或者向内发散。 box-shadow:x-offset y-offset blur spread color style; x-offset：定义水平阴影的偏移距离，可以使用负值。由于CSS3采用的是W3C坐标系，因此x-offset取值为正时，向右偏移；取值为负时，向左偏移。 y-offset：定义垂直阴影的偏移距离，可以使用负值。由于CSS3采用的是W3C坐标系，因此y-offset取值为正时，向下偏移；取值为负时，向上偏移。 blur：定义阴影的模糊半径，只能为正值。 spread：定义阴影的大小。 color：定义阴影的颜色。 style：定义是外阴影还是内阴影。 个方向阴影独立样式box-shadow:左阴影, 上阴影, 下阴影, 右阴影; &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; body&#123;padding:100px;&#125; div &#123; width:100px; height:100px; line-height:100px; text-align:center; box-shadow:-5px 0 12px red, 0 -5px 12px yellow, 0 5px 12px blue, 5px 0 12px green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; body&#123;padding:100px;&#125; div &#123; width:100px; height:100px; line-height:100px; text-align:center; box-shadow:-5px 0 12px red, 0 -5px 12px yellow, 0 5px 12px blue, 5px 0 12px green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html> 多色边框：border-colors（1）border-colors属性兼容性很差，并没有得到各大主流浏览器支持，暂时只有Firefox浏览器支持。（2）不能使用-moz-border-bolors属性为4条边同时设定颜色，必须像上面语法那样分别为4条边设定颜色。（3）如果边框宽度（即（1）border-colors属性兼容性很差，并没有得到各大主流浏览器支持，暂时只有Firefox浏览器支持。（2）不能使用-moz-border-bolors属性为4条边同时设定颜色，必须像上面语法那样分别为4条边设定颜色。（3）如果边框宽度（即border-width）为n个像素，则该边框可以使用n种颜色，即每像素显示一种颜色。 border-top-colors:颜色值;border-right-colors:颜色值;border-bottom-colors:颜色值;border-left-colors:颜色值;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:200px; height:100px; border-width:7px; border-style:solid; -moz-border-top-colors:red orange yellow green cyan blue purple; -moz-border-right-colors: red orange yellow green cyan blue purple; -moz-border-bottom-colors: red orange yellow green cyan blue purple; -moz-border-left-colors: red orange yellow green cyan blue purple; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/border-top-colors:颜色值;border-right-colors:颜色值;border-bottom-colors:颜色值;border-left-colors:颜色值;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:200px; height:100px; border-width:7px; border-style:solid; -moz-border-top-colors:red orange yellow green cyan blue purple; -moz-border-right-colors: red orange yellow green cyan blue purple; -moz-border-bottom-colors: red orange yellow green cyan blue purple; -moz-border-left-colors: red orange yellow green cyan blue purple; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html> 边框背景：border-imageborder-image属性简介可以使用border-image属性为边框添加背景图片。现在所有主流浏览器最新版本都支持border-image属性。border-image属性需要定义3个方面的内容。（1）图片路径。（2）切割宽度：四条边的切割宽度，依次为上边、右边、下边、左边（顺时针）。（3）平铺方式：有3种取值，分别为repeat、round和stretch。对于border-image属性，我们总结如下:（1）在制作边框背景图片时，应该制作4条边，中间部分需要挖空。（2）边框背景图片每条边的宽度跟对应的边框宽度（即border-width）应该相同。border-image属性的平铺方式有3种：repeat、round、stretch。（1）取值为repeat时，表示4条边的小方块会不断重复，超出元素部分将会被剪切掉。（2）取值为round时，表示4条边的小方块会铺满。为了铺满，边框图片会压缩或拉伸。（3）取值为stretch时，表示可以使用border-image属性为边框添加背景图片。现在所有主流浏览器最新版本都支持border-image属性。border-image属性需要定义3个方面的内容。（1）图片路径。（2）切割宽度：四条边的切割宽度，依次为上边、右边、下边、左边（顺时针）。（3）平铺方式：有3种取值，分别为repeat、round和stretch。对于border-image属性，我们总结如下:（1）在制作边框背景图片时，应该制作4条边，中间部分需要挖空。（2）边框背景图片每条边的宽度跟对应的边框宽度（即border-width）应该相同。border-image属性的平铺方式有3种：repeat、round、stretch。（1）取值为repeat时，表示4条边的小方块会不断重复，超出元素部分将会被剪切掉。（2）取值为round时，表示4条边的小方块会铺满。为了铺满，边框图片会压缩或拉伸。（3）取值为stretch时，表示4条边的小方块会拉伸，边长有多长就拉多长。 &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:170px; height:110px; line-height:110px; text-align: center; border:30px solid gray; margin-top:20px; &#125; /*第1个div平铺方式为：repeat*/ #div1&#123;border-image:url(img/border.png) 30 repeat;&#125; /*第2个div平铺方式为：round*/ #div2&#123;border-image:url(img/border.png) 30 round;&#125; /*第3个div平铺方式为：stretch*/ #div3&#123;border-image:url(img/border.png) 30 stretch;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;div1&quot;&gt;repeat&lt;/div&gt; &lt;div id=&quot;div2&quot;&gt;round&lt;/div&gt; &lt;div id=&quot;div3&quot;&gt;stretch&lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:170px; height:110px; line-height:110px; text-align: center; border:30px solid gray; margin-top:20px; &#125; /*第1个div平铺方式为：repeat*/ #div1&#123;border-image:url(img/border.png) 30 repeat;&#125; /*第2个div平铺方式为：round*/ #div2&#123;border-image:url(img/border.png) 30 round;&#125; /*第3个div平铺方式为：stretch*/ #div3&#123;border-image:url(img/border.png) 30 stretch;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;div1&quot;&gt;repeat&lt;/div&gt; &lt;div id=&quot;div2&quot;&gt;round&lt;/div&gt; &lt;div id=&quot;div3&quot;&gt;stretch&lt;/div&gt;&lt;/body&gt;&lt;/html> border-image的派生子属性border-image属性可以分开，分别为4条边设置相应的背景图片，这4条边的属性如下表所示。 子属性 说明 border-top-image 定义上边框背景图片 border-bottom-image 定义下边框背景图片 border-left-image 定义左边框背景图片 border-right-image 定义右边框背景图片 背景样式背景大小：background-size 可以使用background-size属性来定义背景图片的大小 背景图片跟普通图片（即img标签）是不同的东西！width和height这两个属性只能用来定义img标签图片的大小，是不能用于控制背景图片的大小。 background-size属性取值有两种：一种是长度值，如px、em、百分比等；另外一种是使用关键字，如下表所示。 属性值 说明 cover 即“覆盖”，表示将背景图片等比缩放来填满整个元素 contain 即“容纳”，表示将背景图片等比缩放至某一边紧贴元素边沿为止 background-size:取值; 背景位置：background-origin 可以使用background-origin属性来定义背景图片是从什么地方开始平铺的，也就是定义背景图片的位置。 background-origin往往都是配合background-position来使用的，其中background-origin定义background-position相对于什么位置来定位。 background-origin:取值; 属性值 说明 border-box 从边框开始平铺 padding-box 从内边距开始平铺（默认值） content-box 从内容区开始平铺 背景剪切：background-clip background-clip属性用于指定背景图片在元素盒子模型中的哪些区域被剪切。 background-clip:取值; 属性值 说明 border-box 从边框开始剪切（默认值） padding-box 从内边距开始剪切 content-box 从内容区开始剪切 多背景图片 在实际开发中，我们并不建议使用多背景图片，而是应该制作一张复合图片来实现。因为多一张图片就会多引发一次HTTP请求，影响页面加载速度。 &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:400px; height:200px; border:1px solid silver; background:url(img/frame1.png) bottom left no-repeat, url(img/frame2.png) top right no-repeat; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:400px; height:200px; border:1px solid silver; background:url(img/frame1.png) bottom left no-repeat, url(img/frame2.png) top right no-repeat; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html> CSS3变形 可以使用transform属性来实现元素的变形效果。 方法 说明 translate() 平移 scale() 缩放 skew() 倾斜 rotate() 旋转 平移：translate() 单位可以为px、em和百分比等 采用的坐标系都是W3C坐标系 transform: translateX(x); /*沿X轴方向平移*/transform: translateY(y); /*沿Y轴方向平移*/transform: translate(x, y); transform: translateX(x); /*沿X轴方向平移*/transform: translateY(y); /*沿Y轴方向平移*/transform: translate(x, y); /*沿X轴和Y轴同时平移*/ &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; body&#123;padding: 100px;&#125; /*设置原始元素样式*/ #origin &#123; width:200px; height:100px; border:1px dashed gray; &#125; /*设置当前元素样式*/ #current &#123; width:200px; height:100px; color:white; background-color: rgb(30, 170, 250); opacity: 0.6; transform:translate(20px, 40px); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;origin&quot;&gt; &lt;div id=&quot;current&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; body&#123;padding: 100px;&#125; /*设置原始元素样式*/ #origin &#123; width:200px; height:100px; border:1px dashed gray; &#125; /*设置当前元素样式*/ #current &#123; width:200px; height:100px; color:white; background-color: rgb(30, 170, 250); opacity: 0.6; transform:translate(20px, 40px); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;origin&quot;&gt; &lt;div id=&quot;current&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 缩放：scale() 当x或y取值为0~1之间时，元素进行缩小；当x或y取值大于1时，元素进行放大。 transform: scaleX(x); /*沿X轴方向缩放*/transform: scaleY(y); /*沿Y轴方向缩放*/transform: scale(x, y); transform: scaleX(x); /*沿X轴方向缩放*/transform: scaleY(y); /*沿Y轴方向缩放*/transform: scale(x, y); /*沿X轴和Y轴同时缩放*/ &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*设置原始元素样式*/ #origin &#123; width:200px; height:100px; border:1px dashed gray; &#125; /*设置当前元素样式*/ #current &#123; width:200px; height:100px; color:white; background-color: rgb(30, 170, 250); opacity: 0.6; transform:scale(1.2, 1.5); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;origin&quot;&gt; &lt;div id=&quot;current&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*设置原始元素样式*/ #origin &#123; width:200px; height:100px; border:1px dashed gray; &#125; /*设置当前元素样式*/ #current &#123; width:200px; height:100px; color:white; background-color: rgb(30, 170, 250); opacity: 0.6; transform:scale(1.2, 1.5); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;origin&quot;&gt; &lt;div id=&quot;current&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 倾斜：skew() 参数x表示元素在x轴方向的倾斜度数，单位为deg（即degree的缩写）。如果度数为正，则表示元素沿下x轴方向逆时针倾斜；如果度数为负，则表示元素沿x轴方向顺时针倾斜。 由于元素限定了高度为100px，而skewX()方法是沿着x轴方向倾斜的。因此只要倾斜角度不超过180°，元素都会保持100px的高度，同时为了保持倾斜，元素只能沿着x轴方向拉长本身。 transform: skewX(x); /*沿X轴方向倾斜*/transform: skewY(y); /*沿Y轴方向倾斜*/transform: skew(x, y); transform: skewX(x); /*沿X轴方向倾斜*/transform: skewY(y); /*沿Y轴方向倾斜*/transform: skew(x, y); /*沿X轴和Y轴同时倾斜*/ &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*设置原始元素样式*/ #origin &#123; width:200px; height:100px; border:1px dashed gray; &#125; /*设置当前元素样式*/ #current &#123; width:200px; height:100px; color:white; background-color: lightskyblue; transform:skew(10deg, 20deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;origin&quot;&gt; &lt;div id=&quot;current&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*设置原始元素样式*/ #origin &#123; width:200px; height:100px; border:1px dashed gray; &#125; /*设置当前元素样式*/ #current &#123; width:200px; height:100px; color:white; background-color: lightskyblue; transform:skew(10deg, 20deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;origin&quot;&gt; &lt;div id=&quot;current&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 旋转：rotate() 参数angle表示元素相对于中心原点旋转的度数，单位为deg。如果度数为正，则表示顺时针旋转；如果度数为负，则表示逆时针旋转。 transform: transform: rotate(angle); &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*设置原始元素样式*/ #origin &#123; width:200px; height:100px; border:1px dashed gray; &#125; /*设置当前元素样式*/ #current &#123; width:200px; height:100px; color:white; background-color: lightskyblue; transform:rotate(30deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;origin&quot;&gt; &lt;div id=&quot;current&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*设置原始元素样式*/ #origin &#123; width:200px; height:100px; border:1px dashed gray; &#125; /*设置当前元素样式*/ #current &#123; width:200px; height:100px; color:white; background-color: lightskyblue; transform:rotate(30deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;origin&quot;&gt; &lt;div id=&quot;current&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 中心原点：transform-origin 默认情况下，元素的中心原点位于x轴和y轴的50%处 ransform-origin属性取值有两种：一种是“长度值”；另外一种是“关键字”。当取值为长度值时，单位可以为px、em和百分比等。 关键字 百分比 说明 top left 0 0 左上 top center 50% 0 靠上居中 top right 100% 0 右上 left center 0 50% 靠左居中 center center 50% 50% 正中 right center 100% 50% 靠右居中 bottom left 0 100% 左下 bottom center 50% 100% 靠下居中 bottom right 100% 100% 右下 transform-origin: 取值; &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*设置原始元素样式*/ #origin &#123; width:200px; height:100px; border:1px dashed gray; margin:100px &#125; /*设置当前元素样式*/ #current &#123; width:200px; height:100px; background-color: lightskyblue; transform-origin:right center; transform:rotate(30deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;origin&quot;&gt; &lt;div id=&quot;current&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*设置原始元素样式*/ #origin &#123; width:200px; height:100px; border:1px dashed gray; margin:100px &#125; /*设置当前元素样式*/ #current &#123; width:200px; height:100px; background-color: lightskyblue; transform-origin:right center; transform:rotate(30deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;origin&quot;&gt; &lt;div id=&quot;current&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> CSS3过渡 使用transition属性来将元素的某一个属性从“一个属性值”在指定的时间内平滑地过渡到“另一个属性值”，从而来实现动画效果 凡是涉及CSS3过渡，我们都是结合:hover伪类，来实现过渡效果 transition: 过渡属性 过渡时间 过渡方式 延迟时间; transition是一个复合属性，主要包括4个子属性 属性 说明 transition-property 对元素的哪一个属性进行操作 transition-duration 过渡的持续时间 transition-timing-function 过渡的速率方式 transition-delay 过渡的延迟时间（可选参数） &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; display:inline-block; padding:5px 10px; border-radius:5px; color:white; background-color:hotpink; cursor:pointer; transition:background-color 1s linear 0s; &#125; div:hover &#123; background-color:purple; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;从0到1系列&lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; display:inline-block; padding:5px 10px; border-radius:5px; color:white; background-color:hotpink; cursor:pointer; transition:background-color 1s linear 0s; &#125; div:hover &#123; background-color:purple; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;从0到1系列&lt;/div&gt;&lt;/body&gt;&lt;/html> 过渡属性：transition-property 可以使用transition-property属性来定义过渡效果操作的是哪一个属性。 transition-property属性取值是“CSS属性”。 transition-property: 取值;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; display:inline-block; width:100px; height:50px; background-color:lightskyblue; transition-property:height; transition-duration:0.5s ; transition-timing-function:linear; transition-delay:0s; &#125; div:hover &#123; height:100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/transition-property: 取值;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; display:inline-block; width:100px; height:50px; background-color:lightskyblue; transition-property:height; transition-duration:0.5s ; transition-timing-function:linear; transition-delay:0s; &#125; div:hover &#123; height:100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html> 过渡时间：transition-duration 使用transition-duration属性来定义过渡的持续时间。 transition-duration属性取值是一个时间，单位为秒（s），可以取小数。 transition-duration: 时间;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; display:inline-block; width:100px; height:100px; background-color:lightskyblue; transition-property:border-radius; transition-duration:0.5s; transition-timing-function:linear; transition-delay:0s; &#125; div:hover &#123; border-radius:50px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/transition-duration: 时间;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; display:inline-block; width:100px; height:100px; background-color:lightskyblue; transition-property:border-radius; transition-duration:0.5s; transition-timing-function:linear; transition-delay:0s; &#125; div:hover &#123; border-radius:50px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html> 过渡方式：transition-timing-function 使用transition-timing-function属性来定义过渡方式。 transition-timing-function: 取值; transition-timing-function属性取值共有5种，如下表所示。 属性值 说明 速率 ease 默认值，由快到慢，逐渐变慢 linear 匀速 ease-in 速度越来越快（即渐显效果） ease-out 速度越来越慢（即渐隐效果） ease-in-out 先加速后减速（即渐显渐隐效果） &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:100px; height:50px; line-height:50px; text-align:center; margin-top:5px; background-color:lightskyblue; transition-property:width; transition-duration:2s ; transition-delay:0s; &#125; #div1&#123;transition-timing-function:linear;&#125; #div2&#123;transition-timing-function:ease;&#125; #div3&#123;transition-timing-function:ease-in;&#125; #div4&#123;transition-timing-function:ease-out;&#125; #div5&#123;transition-timing-function:ease-in-out;&#125; div:hover &#123; width:300px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;div1&quot;&gt;linear&lt;/div&gt; &lt;div id=&quot;div2&quot;&gt;ease&lt;/div&gt; &lt;div id=&quot;div3&quot;&gt;ease-in&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:100px; height:50px; line-height:50px; text-align:center; margin-top:5px; background-color:lightskyblue; transition-property:width; transition-duration:2s ; transition-delay:0s; &#125; #div1&#123;transition-timing-function:linear;&#125; #div2&#123;transition-timing-function:ease;&#125; #div3&#123;transition-timing-function:ease-in;&#125; #div4&#123;transition-timing-function:ease-out;&#125; #div5&#123;transition-timing-function:ease-in-out;&#125; div:hover &#123; width:300px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;div1&quot;&gt;linear&lt;/div&gt; &lt;div id=&quot;div2&quot;&gt;ease&lt;/div&gt; &lt;div id=&quot;div3&quot;&gt;ease-in&lt;/div> 延迟时间：transition-delay 使用transition-delay属性来定义过渡效果的延迟时间。 transition-delay属性取值是一个时间，单位为秒（s），可以是小数，默认值为0s。也就是说，当我们没有定义transition-delay时，过渡效果就没有延迟时间。 transition-delay: 时间;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; display:inline-block; width:100px; height:100px; background-color:lightskyblue; transition-property:border-radius; transition-duration:0.5s; transition-timing-function:linear; transition-delay: 2s; &#125; div:hover &#123; border-radius:50px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/transition-delay: 时间;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; display:inline-block; width:100px; height:100px; background-color:lightskyblue; transition-property:border-radius; transition-duration:0.5s; transition-timing-function:linear; transition-delay: 2s; &#125; div:hover &#123; border-radius:50px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html> 深入了解transition属性transition-property取值为all 以使用transition属性同时对多个CSS属性来实现过渡效果 transition:all 1s linear transition:all 1s linear 0s; transition-delay的省略 transition-delay属性是一个可选属性，因此当transition-delay取值为0s时，这个参数可以省略。 transition:all 1s linear 0s;//上面这句代码可以等价于：transition:all transition:all 1s linear 0s;//上面这句代码可以等价于：transition:all 1s linear; transition属性的位置 如果把transition属性写在悬浮状态内的话，移出时没有过渡效果。 div:hover &#123; border-radius:50px; background-color:hotpink; /*transition属性放到:hover&#123;&#125;中*/ transition:all div:hover &#123; border-radius:50px; background-color:hotpink; /*transition属性放到:hover&#123;&#125;中*/ transition:all 0.5s linear; &#125; CSS3动画简介 对于transition属性来说，它只能将元素的某一个属性从一个属性值过渡到另一个属性值。 对于animation属性来说，它可以将元素的某一个属性从第1个属性值过渡到第2个属性值，然后还可以继续过渡到第3个属性值，以此类推。 transition属性（即CSS3过渡）只能实现一次性的动画效果，而animation属性（即CSS3动画）可以实现连续性的动画效果。 使用animation属性实现CSS3动画需要两步 （1）定义动画。（2）调用动画。 animation: 动画名称 持续时间 动画方式 延迟时间 动画次数 动画方向; animation是一个复合属性，主要包括6个子属性，如下表所示。 属性 说明 animation-name 对哪一个CSS属性进行操作 animation-duration 动画的持续时间 animation-timing-function 动画的速率方式 animation-delay 动画的延迟时间 animation-iteration-count 动画的播放次数 animation-direction 动画的播放方向，正向还是反向 &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:100px; height:100px; border-radius:50px; background-color:red; &#125; /*定义动画*/ @keyframes mycolor &#123; 0%&#123;background-color:red;&#125; 30%&#123;background-color:blue;&#125; 60%&#123;background-color:yellow;&#125; 100%&#123;background-color:green;&#125; &#125; /*调用动画*/ div:hover &#123; animation:mycolor 5s linear; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:100px; height:100px; border-radius:50px; background-color:red; &#125; /*定义动画*/ @keyframes mycolor &#123; 0%&#123;background-color:red;&#125; 30%&#123;background-color:blue;&#125; 60%&#123;background-color:yellow;&#125; 100%&#123;background-color:green;&#125; &#125; /*调用动画*/ div:hover &#123; animation:mycolor 5s linear; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html> @keyframes 在调用动画之前，我们必须先使用@keyframes规则来定义动画 @keyframes 动画名&#123; 0%&#123;&#125; …… 100@keyframes 动画名&#123; 0%&#123;&#125; …… 100%&#123;&#125;&#125; 0%表示动画的开始，100%表示动画的结束，0%和100%是必须的。 如果仅仅只有0%和100%这两个百分比的话，此时0%和100%可以使用关键字from和to来代替，其中0%对应from，100%对应to。 @keyframes mycolor&#123; from&#123;color:red&#125; to&#123;@keyframes mycolor&#123; from&#123;color:red&#125; to&#123;color:green&#125;&#125; 动画名称：animation-name animation-name调用的动画名需要和@keyframes规则定义的动画名完全一致（区分大小写），如果不一致将不会产生任何动画效果。 只需要把调用动画的代码放在div元素，而不是在:hover伪类中，就能在打开页面就能自动执行动画 animation-name: 动画名; 持续时间：animation-duration animation-duration属性取值是一个时间，单位为秒（s），可以是小数。 CSS3动画大多数时候都是配合CSS3变形一起使用，然后来实现各种绚丽复杂的动画效果。 animation-duration: 时间;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; @keyframes mytranslate &#123; 0%&#123;&#125; 100%&#123;transform:translateX(160px);&#125; &#125; #container &#123; display:inline-block; width:200px; border:1px solid silver; &#125; #div1,#div2 &#123; width:40px; height:40px; margin-top:10px; border-radius:20px; background-color:red; animation-name:mytranslate; animation-timing-function:linear; &#125; #div1&#123;animation-duration:2s;&#125; #div2&#123;animation-duration:4s;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;container&quot;&gt; &lt;div id=&quot;div1&quot;&gt;&lt;/div&gt; &lt;div id=&quot;div2&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/animation-duration: 时间;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; @keyframes mytranslate &#123; 0%&#123;&#125; 100%&#123;transform:translateX(160px);&#125; &#125; #container &#123; display:inline-block; width:200px; border:1px solid silver; &#125; #div1,#div2 &#123; width:40px; height:40px; margin-top:10px; border-radius:20px; background-color:red; animation-name:mytranslate; animation-timing-function:linear; &#125; #div1&#123;animation-duration:2s;&#125; #div2&#123;animation-duration:4s;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;container&quot;&gt; &lt;div id=&quot;div1&quot;&gt;&lt;/div&gt; &lt;div id=&quot;div2&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 动画方式：animation-timing-function 使用animation-timing-function属性来定义动画的动画方式。所谓“动画方式”，指的是动画在过渡时间内的速率变化方式。 animation-timing-function属性取值共有5种，这个跟CSS3过渡的 transition-timing-function是一样的 animation-timing-function: 取值;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*定义动画*/ @keyframes mytransform &#123; 0%&#123; &#125; 100%&#123;width:300px;&#125; &#125; div &#123; width:100px; height:50px; line-height:50px; text-align:center; margin-top:10px; border-radius:0; background-color:lightskyblue; /*调用动画*/ animation-name:mytransform; animation-duration:5s; &#125; #div1&#123;animation-timing-function:linear;&#125; #div2&#123;animation-timing-function:ease;&#125; #div3&#123;animation-timing-function:ease-in;&#125; #div4&#123;animation-timing-function:ease-out;&#125; #div5&#123;animation-timing-function:ease-in-out&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;div1&quot;&gt;linear&lt;/div&gt; &lt;div id=&quot;div2&quot;&gt;ease&lt;/div&gt; &lt;div id=&quot;div3&quot;&gt;ease-in&lt;/div&gt; &lt;div id=&quot;div4&quot;&gt;ease-out&lt;/div&gt; &lt;div id=&quot;div5&quot;&gt;ease-in-out&lt;/div&gt;&lt;/body&gt;&lt;/animation-timing-function: 取值;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*定义动画*/ @keyframes mytransform &#123; 0%&#123; &#125; 100%&#123;width:300px;&#125; &#125; div &#123; width:100px; height:50px; line-height:50px; text-align:center; margin-top:10px; border-radius:0; background-color:lightskyblue; /*调用动画*/ animation-name:mytransform; animation-duration:5s; &#125; #div1&#123;animation-timing-function:linear;&#125; #div2&#123;animation-timing-function:ease;&#125; #div3&#123;animation-timing-function:ease-in;&#125; #div4&#123;animation-timing-function:ease-out;&#125; #div5&#123;animation-timing-function:ease-in-out&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;div1&quot;&gt;linear&lt;/div&gt; &lt;div id=&quot;div2&quot;&gt;ease&lt;/div&gt; &lt;div id=&quot;div3&quot;&gt;ease-in&lt;/div&gt; &lt;div id=&quot;div4&quot;&gt;ease-out&lt;/div&gt; &lt;div id=&quot;div5&quot;&gt;ease-in-out&lt;/div&gt;&lt;/body&gt;&lt;/html> 延迟时间：animation-delay 使用animation-delay属性来定义动画的延迟时间 animation-delay属性取值是一个时间，单位为秒（s），可以为小数，其中默认值为0s。也就是说，当我们没有定义animation-delay时，动画就没有延迟时间。 animation-delay: 时间; 播放次数：animation-iteration-count animation-iteration-count属性取值有两种：一种是“正整数”；另外一种是“infinite”。当取值是n（正整数）时，表示动画播放n次；当取值为infinite时，表示动画播放无数次，也就是循环播放。 animation-iteration-count: 取值;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; @keyframes mytranslate &#123; 0%&#123;&#125; 50%&#123;transform:translateX(160px);&#125; 100%&#123;&#125; &#125; #ball &#123; width:40px; height:40px; border-radius:20px; background-color:red; animation-name:mytranslate; animation-timing-function:linear; animation-duration:2s; animation-iteration-count:infinite; /*循环播放*/ &#125; #container &#123; display:inline-block; width:200px; border:1px solid silver; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;container&quot;&gt; &lt;div id=&quot;ball&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/animation-iteration-count: 取值;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; @keyframes mytranslate &#123; 0%&#123;&#125; 50%&#123;transform:translateX(160px);&#125; 100%&#123;&#125; &#125; #ball &#123; width:40px; height:40px; border-radius:20px; background-color:red; animation-name:mytranslate; animation-timing-function:linear; animation-duration:2s; animation-iteration-count:infinite; /*循环播放*/ &#125; #container &#123; display:inline-block; width:200px; border:1px solid silver; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;container&quot;&gt; &lt;div id=&quot;ball&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 播放方向：animation-direction animation-direction属性在实际开发中用得很少 animation-direction: 取值; animation-direction属性取值有3个，如下表所示。 播放状态：animation-play-stateanimation-play-state: 取值; animation-play-state属性只有2个取值，如下表所示。 属性值 说明 running 播放（默认值） paused 暂停 多列布局列数：column-count 定义多列布局的列数。 column-count: 取值; column-count属性取值有2种，如下表所示。 属性值 说明 auto 列数由column-width属性决定（默认值） n（正整数） 自动划分为n列 body &#123; width:400px; padding:10px; border:1px solid silver; column-count:body &#123; width:400px; padding:10px; border:1px solid silver; column-count:3; &#125; 列宽：column-width 定义多列布局中每一列的宽度。 column-width属性取值有2种，如下表所示。 属性值 说明 auto 列数由column-count属性决定（默认值） 长度值 单位可以为px、em和百分比等 间距：column-gap 定义列与列之间的间距。 column-gap: 取值; column-gap属性取值有2个，如下表所示。 属性值 说明 normal 浏览器默认长度值 长度值 单位可以为px、em和百分比等 边框：column-rule 定义列与列之间的边框样式。 column-rule: width style color;column-rule:column-rule: width style color;column-rule:1px dashed red; column-rule属性跟border属性是非常相似的，它也是一个复合属性，由3个子属性组成。 column-rule-width：定义边框的宽度。 column-rule-style：定义边框的样式。 column-rule-color：定义边框的颜色。 跨列：column-span 实现多列布局的跨列效果 跨列在CSS3多列布局中也是很常见的效果。 column-span: 取值; column-span属性取值只有2种，如下表所示。 属性值 说明 none 不跨列 all 跨所有列（跟none相反） 滤镜效果亮度：brightness() 亮度滤镜可以减弱或增强图片的亮度。 brightness()方法的取值是一个百分比，其中0%~100%表示减弱图片的亮度，例如0%就是完全黑色。100%以上表示增强图片的亮度，例如200%就是将亮度提高2倍。 filter: filter: brightness(百分比); 灰度：grayscale() 灰度滤镜可以将彩色图片转换成黑白图片 grayscale()方法的取值是一个百分比，其中0%表示不做任何修改，100%表示完全灰度（即黑白图片）。 filter: filter: grayscale(百分比) 复古：sepia() 实现复古滤镜效果。复古滤镜，也叫褐色滤镜。 sepia()方法的取值是一个百分比，取值范围为0%~100%。其中，0%表示没有转换，100%表示复古效果。 filter: filter: sepia(百分比) 反色：invert() 实现反色滤镜效果的。反色，指的是将红、绿、蓝3个通道的像素取各自的相反值。 invert()方法的取值是一个百分比，取值范围为0%~100%。其中，0%表示没有转换，100%表示反转所有颜色。 filter: filter: invert(百分比) 旋转（色相）：hue-rotate() 实现色相旋转的滤镜效果。 hue-rotate()方法的取值是一个度数，单位为deg（即degree的缩写）。其中，0deg表示不旋转，360deg表示旋转360°，也就是相当于一个循环。 filter: hue-filter: hue-rotate(度数) 阴影：drop-shadow() drop-shadow()方法的参数有4个，每一个参数说明如下。 （1）x-offset：定义水平阴影的偏移距离，可以使用负值。由于CSS3采用的是W3C坐标系，因此x-offset取值为正时，向右偏移；取值为负时，向左偏移。 （2）y-offset：定义垂直阴影的偏移距离，可以使用负值。由于CSS3采用的是W3C坐标系，因此y-offset取值为正时，向下偏移；取值为负时，向上偏移。 （3）blur：定义阴影的模糊半径，只能为正值。 （4）color：定义阴影的颜色。 filter: drop-shadow(x-offset y-offset blur color)#after &#123; filter:drop-shadow(5px 5px filter: drop-shadow(x-offset y-offset blur color)#after &#123; filter:drop-shadow(5px 5px 10px red); &#125; 透明度：opacity() opacity()方法的取值是一个百分比，取值范围为0%~100%。其中，0%表示完全透明，100%表示完全不透明。 filter: filter: opacity(百分比) 模糊度：blur() 使用blur()方法来实现模糊度滤镜效果，也就是“马赛克”。 blur()方法的取值是一个像素值，取值越大，模糊效果越明显。 filter: blur(像素)#after &#123; filter:blur(filter: blur(像素)#after &#123; filter:blur(5px); &#125; 对比度：contrast() contrast()方法的取值是一个百分比。其中，0%~100%表示减弱对比度，例如0%则是灰度图片。100%以上表示增强对比度，例如200%表示增强对比度为原来的2倍。 filter: filter: contrast(百分比) 饱和度：saturate() saturate()方法的取值是一个百分比。其中，0%~100%表示减弱饱和度，100%以上表示增强饱和度。 filter: filter: saturate(百分比) 多种滤镜 为某个元素同时定义多种滤镜效果，我们可以将filter属性的取值设置为一个“值列表”的形式来实现。 在值列表中，两个值之间需要用空格隔开。 filter: 值列表;#after &#123; filter:brightness(120%) contrast(200%) blur(filter: 值列表;#after &#123; filter:brightness(120%) contrast(200%) blur(1px); &#125; 弹性盒子模型 通过弹性盒子模型，我们可以轻松地创建自适应浏览器窗口的“流动布局”以及自适应字体大小的弹性布局，使得响应式布局的实现更加容易。 在使用弹性盒子模型之前，必须为父元素定义“display:flex;”或“display:inline-flex;”，这个父元素才具有弹性盒子模型的特点。 子元素宽度之和小于父元素宽度。因此，所有子元素最终的宽度就是原来定义的宽度。 子元素宽度之和大于父元素宽度。因此，子元素会按比例来划分宽度。 响应式布局的关键是使用@media来实现媒体查询 放大比例：flex-grow 定义弹性盒子内部子元素的放大比例。也就是当所有子元素宽度之和小于父元素的宽度时，子元素如何分配父元素的剩余空间。 在使用flex-grow时，一般是不需要对弹性盒子内部的子元素定义宽度或高度的，否则会影响flex容器的比例分配。 flex-grow属性取值是一个数值，默认值为0。当取值为0时，表示不索取父元素的剩余空间。当取值大于0时，表示索取父元素的剩余空间（即子元素放大）。取值越大，索取得越多。 由于所有子元素都没有指定宽度，因此我们可以看成：所有子元素宽度之和小于父元素的宽度。接着我们只需要使用flex-grow属性给每一个子元素指定一个值，然后浏览器就会自动计算每个子元素所占的比例，自动划分宽度。 举个例子，父元素下有两个子元素：A和 B。其中父元素宽400px，A宽为100px，B宽为200px。那么父元素的剩余空间为400-100-200=100px。 （1）如果A和B都不索取，也就是A和B的flex-grow为0，则父元素的剩余空间为100px。 （2）如果A索取，B不索取。其中A设置flex-grow:1，那么最终A的宽为100+100=200px，B的宽不变还是200px。 （3）如果A和B同时索取剩余空间，其中A设置flex-grow:1，B设置flex-grow:1，那么最终A的宽为100+100×1/(1+1)=150px，B的宽为200+100×1/(1+1)=250px。 （4）如果A和B同时索取剩余空间，其中A设置flex-grow:1，B设置flex-grow:3，那么最终A的宽为100+100×1/(1+3)=125px，B的宽为200+100×3/(1+3)=275px。 &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #wrapper &#123; display:flex; width:200px; height:150px; &#125; #box1 &#123; background:red; flex-grow: 1; &#125; #box2 &#123; background:blue; flex-grow: 2; &#125; #box3 &#123; background:orange; flex-grow: 1; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;wrapper&quot;&gt; &lt;div id=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box2&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box3&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #wrapper &#123; display:flex; width:200px; height:150px; &#125; #box1 &#123; background:red; flex-grow: 1; &#125; #box2 &#123; background:blue; flex-grow: 2; &#125; #box3 &#123; background:orange; flex-grow: 1; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;wrapper&quot;&gt; &lt;div id=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box2&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box3&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 缩小比例：flex-shrink 当所有子元素宽度之和大于父元素的宽度时，子元素如何缩小自己的宽度。 flex-shrink属性取值是一个数值，默认值为1。当取值为0时，表示子元素不缩小。当取值大于1时，表示子元素按一定的比例缩小。取值越大，缩小得越厉害。 只有当所有子元素宽度之和小于弹性盒子的宽度时，flex-grow才会生效，而此时flex-shrink无效；只有当所有子元素宽度之和大于弹性盒子的宽度时，flex-shrink属性才会生效，而此时flex-grow无效。也就是说，flex-grow和flex-shrink是互斥的，不可能同时生效。 （1）对于定义了flex-grow:0或者flex-shrink:0;的子元素，宽度为原来定义的宽度，并且不会参与划分。 （2）flex-grow的默认值为0，而flex-shrink的默认值为1。 在实际开发中，我们更多的是使用flex-grow属性，很少会用flex-shrink属性。 flex-shrink: 数值; 举个例子，父元素下有两个子元素：A和 B。其中父元素宽400px，A宽为200px，B宽为300px。那么A和B宽度之和超出父元素宽度为：200+300-400=100px。 （1）如果A和B都不缩小，也就是A和B都设置flex-shrink:0，那么会有100px的宽度超出父元素。 （2）如果A不缩小，B缩小。其中A设置flex-shrink:0;，B设置flex-shrink:1;（默认值）。那么最终A的宽不变还是200px，B的宽为300-100=200px（自身宽度-超出父元素的宽度）。 （3）如果A和B同时缩小，其中A设置flex-shrink:1，B设置flex-shrink:1，那么最终A的宽为200-100×(200×1)/(200×1+300×1)=160px（A自身宽度-A减小的宽度），B的宽为300-100×(300×1)/(200×1+300×1)=240px（B自身宽度-B减小的宽度）。 （4）如果A和B同时缩小，其中A设置flex-shrink:3，B设置flex-shrink:2，那么最终A的宽为200-100×(200×3)/(200×3+300×2)=150px（A自身宽度-A减小的宽度），B的宽为300-100×(300×2)/(200×3+300×2)=250px（B自身宽度-B减小的宽度）。 元素宽度：flex-basis 定义弹性盒子内部子元素的在分配空间之前，该子元素所占的空间大小。浏览器会根据这个属性，然后计算父元素是否有多余空间。 在弹性盒子中，flex-basis的语义会比width好一点。flex-basis和width都可以用来设置子元素的宽度，但是我们应该使用flex-basis而不是width，这也是为了更好的语义化。 flex-basis属性取值有两个：一个是“auto”，即该子元素的宽度是根据内容多少来定的；另外一个是“长度值”，单位可以为px、em和百分比等。 flex-basis属性用来设置子元素的宽度，当然，width属性也可以用来设置子元素的宽度。如果某一个子元素同时设置flex-basis和width，那么flex-basis的值会覆盖width的值。 flex-basis是针对弹性盒子（父元素）下的子元素而已的，不能用于设置弹性盒子的宽度。 复合属性：flex 可以使用flex属性来同时设置flex-grow、flex-shrink、flex-basis这3个属性。 参数grow是flex-grow的取值，参数shrink是flex-shrink的取值，参数basis是flex-basis的取值。因此，flex属性的默认值为“0 1 auto”。 在实际开发中，优先使用flex属性，而不是单独写flex-grow、flex-shrink、flex-basis这3个属性。 flex:1;”其实等价于“flex:1 1 auto;”，而“flex:2;”等价于“flex:2 1 auto;”。也就是说flex取值只有一个数时，表示只设置了flex-grow这个属性的取值。事实上，在实际开发中我们一般也是只需要设置flex-grow属性，很少用得上另外两个属性。 flex: grow shrink basis; &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #wrapper &#123; display:flex; width:200px; height:150px; &#125; #box1 &#123; background:red; flex: 1; &#125; #box2 &#123; background:blue; flex: 2; &#125; #box3 &#123; background:orange; flex: 1; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;wrapper&quot;&gt; &lt;div id=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box2&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box3&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #wrapper &#123; display:flex; width:200px; height:150px; &#125; #box1 &#123; background:red; flex: 1; &#125; #box2 &#123; background:blue; flex: 2; &#125; #box3 &#123; background:orange; flex: 1; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;wrapper&quot;&gt; &lt;div id=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box2&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box3&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 排列方向：flex-direction 定义弹性盒子内部“子元素”的排列方向。也就是定义子元素是横着排，还是竖着排。 flex-direction属性是在弹性盒子（即父元素）上定义的。 flex-direction: 取值; flex-direction属性取值有4个，如下表所示。 属性值 说明 row 横向排列（默认值） row-reverse 横向反向排列 column 纵向排列 column-reverse 纵向反向排列 &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #wrapper &#123; display:flex; flex-direction:row-reverse; width:200px; height:150px; &#125; #box1,#box2,#box3 &#123; height:150px; line-height: 150px; text-align: center; font-size:30px; color:white; &#125; #box1 &#123; background:red; flex: 1; &#125; #box2 &#123; background:blue; flex: 2; &#125; #box3 &#123; background:orange; flex: 3; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;wrapper&quot;&gt; &lt;div id=&quot;box1&quot;&gt;1&lt;/div&gt; &lt;div id=&quot;box2&quot;&gt;2&lt;/div&gt; &lt;div id=&quot;box3&quot;&gt;3&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #wrapper &#123; display:flex; flex-direction:row-reverse; width:200px; height:150px; &#125; #box1,#box2,#box3 &#123; height:150px; line-height: 150px; text-align: center; font-size:30px; color:white; &#125; #box1 &#123; background:red; flex: 1; &#125; #box2 &#123; background:blue; flex: 2; &#125; #box3 &#123; background:orange; flex: 3; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;wrapper&quot;&gt; &lt;div id=&quot;box1&quot;&gt;1&lt;/div&gt; &lt;div id=&quot;box2&quot;&gt;2&lt;/div&gt; &lt;div id=&quot;box3&quot;&gt;3&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 多行显示：flex-wrap 使用flex-wrap属性来定义弹性盒子内部“子元素”是单行显示还是多行显示。 flex-wrap: 取值; flex-wrap属性常见取值有3个，如下表所示。 属性值 说明 nowrap 单行显示（默认值） wrap 多行显示，也就是换行显示 wrap-reverse 多行显示，但是却是反向 &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /* 公用样式 */ .wrapper1,.wrapper2,.wrapper3 &#123; display: flex; color: white; font-size:24px; width:400px; height: 100px; line-height:50px; border:1px solid gray; text-align: center; &#125; .wrapper1 div,.wrapper2 div,.wrapper3 div &#123; height: 50%; width: 50%; &#125; .red &#123;background: red;&#125; .green &#123;background: green;&#125; .blue &#123;background: blue;&#125; /* 弹性盒子样式 */ .wrapper1 &#123;flex-wrap: nowrap;&#125; .wrapper2 &#123;flex-wrap: wrap;&#125; .wrapper3 &#123;flex-wrap: wrap-reverse;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h3&gt;1、flex-wrap:nowrap（默认值）&lt;/h3&gt; &lt;div class=&quot;wrapper1&quot;&gt; &lt;div class=&quot;red&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;green&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;blue&quot;&gt;3&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;2、flex-wrap:wrap&lt;/h3&gt; &lt;div class=&quot;wrapper2&quot;&gt; &lt;div class=&quot;red&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;green&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;blue&quot;&gt;3&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;3、flex-wrap:wrap-reverse&lt;/h3&gt; &lt;div class=&quot;wrapper3&quot;&gt; &lt;div class=&quot;red&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;green&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;blue&quot;&gt;3&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /* 公用样式 */ .wrapper1,.wrapper2,.wrapper3 &#123; display: flex; color: white; font-size:24px; width:400px; height: 100px; line-height:50px; border:1px solid gray; text-align: center; &#125; .wrapper1 div,.wrapper2 div,.wrapper3 div &#123; height: 50%; width: 50%; &#125; .red &#123;background: red;&#125; .green &#123;background: green;&#125; .blue &#123;background: blue;&#125; /* 弹性盒子样式 */ .wrapper1 &#123;flex-wrap: nowrap;&#125; .wrapper2 &#123;flex-wrap: wrap;&#125; .wrapper3 &#123;flex-wrap: wrap-reverse;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h3&gt;1、flex-wrap:nowrap（默认值）&lt;/h3&gt; &lt;div class=&quot;wrapper1&quot;&gt; &lt;div class=&quot;red&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;green&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;blue&quot;&gt;3&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;2、flex-wrap:wrap&lt;/h3&gt; &lt;div class=&quot;wrapper2&quot;&gt; &lt;div class=&quot;red&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;green&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;blue&quot;&gt;3&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;3、flex-wrap:wrap-reverse&lt;/h3&gt; &lt;div class=&quot;wrapper3&quot;&gt; &lt;div class=&quot;red&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;green&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;blue&quot;&gt;3&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 复合属性：flex-flow 使用flex-flow属性来同时设置flex-direction、flex-wrap这两个属性。 在实际开发中，我们更倾向于使用flex-flow这种简写形式。 参数direction是flex-direction的取值，参数wrap是flex-wrap的取值。因此，flex-flow属性的默认值为“row nowrap”。 flex-flow: direction wrap; 排列顺序：order 使用order属性来定义弹性盒子内部“子元素”的排列顺序。 order属性取值是一个正整数，即1、2、3等。**** order:整数#box1 &#123; background:red; flex: 1; order:order:整数#box1 &#123; background:red; flex: 1; order:2; &#125; 水平对齐：justify-content 使用justify-content属性来定义弹性盒子内部子元素在“横轴”上的对齐方式。 justify-content属性有很多，常见的如下表所示。 属性值 说明 flex-start 所有子元素在左边（默认值） center 所有子元素在中间 flex-end 所有子元素在右边 space-between 所有子元素平均分布 space-around 所有子元素平均分布，但两边留有一定间距 &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*定义整体样式*/ .flex &#123; display: flex; flex-flow: row nowrap; background-color:lightskyblue; margin-bottom:5px; &#125; .item &#123; width: 80px; padding:10px; text-align: center; background-color:hotpink; box-sizing: border-box; &#125; /*定义justify-content*/ .start&#123;justify-content: flex-start;&#125; .center &#123;justify-content: center;&#125; .end &#123;justify-content: flex-end;&#125; .between &#123;justify-content: space-between;&#125; .around &#123;justify-content: space-around;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h3&gt;1、flex-start:&lt;/h3&gt; &lt;div class=&quot;flex start&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;2、center:&lt;/h3&gt; &lt;div class=&quot;flex center&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;3、flex-end:&lt;/h3&gt; &lt;div class=&quot;flex end&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;4、space-between:&lt;/h3&gt; &lt;div class=&quot;flex between&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;5、space-around:&lt;/h3&gt; &lt;div class=&quot;flex around&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*定义整体样式*/ .flex &#123; display: flex; flex-flow: row nowrap; background-color:lightskyblue; margin-bottom:5px; &#125; .item &#123; width: 80px; padding:10px; text-align: center; background-color:hotpink; box-sizing: border-box; &#125; /*定义justify-content*/ .start&#123;justify-content: flex-start;&#125; .center &#123;justify-content: center;&#125; .end &#123;justify-content: flex-end;&#125; .between &#123;justify-content: space-between;&#125; .around &#123;justify-content: space-around;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h3&gt;1、flex-start:&lt;/h3&gt; &lt;div class=&quot;flex start&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;2、center:&lt;/h3&gt; &lt;div class=&quot;flex center&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;3、flex-end:&lt;/h3&gt; &lt;div class=&quot;flex end&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;4、space-between:&lt;/h3&gt; &lt;div class=&quot;flex between&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;5、space-around:&lt;/h3&gt; &lt;div class=&quot;flex around&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 垂直对齐：align-items 使用align-items属性来定义弹性盒子内部子元素在“纵轴”上的对齐方式。 align-items: 取值; align-items属性有很多，常见的如下表所示。 属性值 说明 flex-start 所有子元素在上边（默认值） center 所有子元素在中部 flex-end 所有子元素在下边 baseline 所有子元素在父元素的基线上 strecth 拉伸子元素以适应父元素高度 其他样式outline属性 使用outline属性来定义表单中文本框的轮廓线样式。 第1个值指的是轮廓线宽度（outline-width），第2个值指的是轮廓线样式（outline-sytle），第3个值指的是轮廓线颜色（outline-color）。 outline属性相当有用，特别是在美化搜索框样式的时候经常用到。 outline: width style color;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; input[type=&quot;text&quot;]:focus &#123; outline:1px solid red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;input id=&quot;txt&quot; type=&quot;text&quot;&gt;&lt;/body&gt;&lt;/outline: width style color;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; input[type=&quot;text&quot;]:focus &#123; outline:1px solid red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;input id=&quot;txt&quot; type=&quot;text&quot;&gt;&lt;/body&gt;&lt;/html> initial取值 使用“initial”这个值来直接将某个CSS属性重置为它的默认值，并不需要事先这个CSS属性的默认值是多少，因为浏览器会自动设置的。 property是一个CSS属性名，“property:initial;”表示设置property这个属性的取值为默认值。此外，initial取值可以用于任何HTML元素上的任何CSS属性。 property: initial&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div&#123;color:red;&#125; #select&#123;color:initial;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div id=&quot;select&quot;&gt;绿叶学习网&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div&#123;color:red;&#125; #select&#123;color:initial;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div id=&quot;select&quot;&gt;绿叶学习网&lt;/div&gt;&lt;/body&gt;&lt;/property: initial&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div&#123;color:red;&#125; #select&#123;color:initial;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div id=&quot;select&quot;&gt;绿叶学习网&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div&#123;color:red;&#125; #select&#123;color:initial;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div id=&quot;select&quot;&gt;绿叶学习网&lt;/div&gt;&lt;/body&gt;&lt;/html> calc()函数 使用calc()函数通过“计算”的方式来定义某一个属性的取值。’ 在实际开发中，calc()函数非常好用，特别是在自适应布局中涉及不同单位之间的运算时用得非常多。 属性: 属性: calc(表达式) 我们可以使用calc()函数以计算的方式给元素的width、margin、padding、font-size等来定义属性值。对于calc()函数，有以下5条运算规则。 （1）只能使用加（+）、减（-）、乘（*）和除（/）这4种运算。 （2）可以使用px、em、rem、百分比等单位。 （3）可以混合使用各种单位进行运算。 （4）表达式中有加号（+）和减号（-）时，其前后必须有空格。 （5）表达式中有乘号（*）和除号（/）时，其前后可以没有空格，但建议保留。 &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123;margin: 0; padding: 0;&#125; .col-3 &#123; float: left; width: calc(100% / 3 - 5px); margin-right: calc(5px * 3 /2); margin-bottom: calc(5px * 3 /2); height: 60px; line-height: 60px; text-align: center; font-size: 24px; background: #EEEEEE; color: #333333; &#125; .col-3:nth-child(3)&#123;margin-right: 0;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;col-3&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;col-3&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;col-3&quot;&gt;3&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123;margin: 0; padding: 0;&#125; .col-3 &#123; float: left; width: calc(100% / 3 - 5px); margin-right: calc(5px * 3 /2); margin-bottom: calc(5px * 3 /2); height: 60px; line-height: 60px; text-align: center; font-size: 24px; background: #EEEEEE; color: #333333; &#125; .col-3:nth-child(3)&#123;margin-right: 0;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;col-3&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;col-3&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;col-3&quot;&gt;3&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> overflow-x和overflow-y overflow-x属性用来定义内容超出元素“宽度”时应该如何处理，而overflow-y属性用来定义内容超出元素“高度”时应该如何处理。 overflow-x: 取值;overflow-x: 取值;overflow-y: 取值; overflow-x和overflow-y这两个属性都有4种取值，如下表所示。 属性值 说明 visible 内容超出时，不剪切内容，也不添加滚动条 hidden 内容超出时，剪切内容，但只显示y轴滚动条而不显示x轴滚动条 scroll 内容超出时，显示所有滚动条 auto 跟scroll效果一样 属性值 说明 visible 内容超出时，不剪切内容，也不添加滚动条 hidden 内容超出时，剪切内容，但只显示x轴滚动条而不显示y轴滚动条 scroll 内容超出时，显示所有滚动条 auto 跟scroll效果一样 #view &#123; display:inline-block; width:160px; height:160px; background-color:#F1F1F1; border:1px solid gray; #view &#123; display:inline-block; width:160px; height:160px; background-color:#F1F1F1; border:1px solid gray; overflow-x:visible; &#125; pointer-events属性 使用pointer-events属性来定义元素是否禁用鼠标单击事件。pointer-events属性是一个与JavaScript有关的属性。 pointer-events: 取值; pointer-events属性取值只有2个，如下表所示。 属性值 说明 auto 不禁用鼠标单击事件（默认值） none 禁用鼠标单击事件 .disable &#123; pointer-events: none; color:.disable &#123; pointer-events: none; color:#666666; &#125;","categories":[{"name":"前端笔记","slug":"前端笔记","permalink":"https://csong.vercel.app/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CSS3","slug":"CSS3","permalink":"https://csong.vercel.app/tags/CSS3/"}]},{"title":"HTML5学习笔记","slug":"HTML5学习笔记","date":"2021-04-17T11:27:01.000Z","updated":"2021-09-13T04:38:40.310Z","comments":true,"path":"2021/04/17/html5-xue-xi-bi-ji/","link":"","permalink":"https://csong.vercel.app/2021/04/17/html5-xue-xi-bi-ji/","excerpt":"","text":"IE9+以上浏览器兼容 新增的语义化标签- 这种语义化标准主要是针对搜索引擎的- 这些新标签页面中可以使用多次- 在IE9中，需要把这些元素转换为块级元素 display: block- 这种语义化标准主要是针对搜索引擎的- 这些新标签页面中可以使用多次- 在IE9中，需要把这些元素转换为块级元素 display: block- 移动端更喜欢使用这些标签 &lt;header&gt; :头部标签&lt;nav&gt;:导航标签&lt;article&gt;内容标签&lt;section&gt;:定义文档某个区域&lt;aside&gt; :侧边栏标签&lt;&lt;header&gt; :头部标签&lt;nav&gt;:导航标签&lt;article&gt;内容标签&lt;section&gt;:定义文档某个区域&lt;aside&gt; :侧边栏标签&lt;footer> :尾部标签 新增的多媒体标签1. 音频当前&lt;当前&lt;audio>元素支持三种视频格式MP3、Wav、Ogg，尽量使用mp3格式。 &lt;audio src=&quot;文件地址&quot; controls=&quot; controls&quot;&gt;&lt;/ audio&gt;&lt;!--开发优化--&gt;&lt;audio controls&gt; &lt;source src=&quot;horse.mp3&quot; type=&quot;audio/mpeg&quot;&gt; &lt;source src=&quot;horse.ogg&quot; type=&quot;audio/ogg&quot;&gt; Your browser does not support this audio format.&lt;/&lt;audio src=&quot;文件地址&quot; controls=&quot; controls&quot;&gt;&lt;/ audio&gt;&lt;!--开发优化--&gt;&lt;audio controls&gt; &lt;source src=&quot;horse.mp3&quot; type=&quot;audio/mpeg&quot;&gt; &lt;source src=&quot;horse.ogg&quot; type=&quot;audio/ogg&quot;&gt; Your browser does not support this audio format.&lt;/audio> 2. 视频当前&lt;video&gt;元素支持三种视频格式MP4、WebM、Ogg，尽量使用mp4格式。1. controls 属性供添加播放、暂停和音量控件。2. &lt;video&gt; 与 &lt;/video&gt; 之间插入的内容是供不支持 当前&lt;video&gt;元素支持三种视频格式MP4、WebM、Ogg，尽量使用mp4格式。1. controls 属性供添加播放、暂停和音量控件。2. &lt;video&gt; 与 &lt;/video&gt; 之间插入的内容是供不支持 video 元素的浏览器显示的。 &lt;video src=&quot;文件地址&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt;&lt;!--开发优化--&gt;&lt;video controls=&quot;controls&quot; width=&quot;300&quot;&gt; &lt;source src=&quot;move.ogg&quot; type=&quot;video/ogg&quot; &gt; &lt;souree src=&quot;move.mp4&quot; type=&quot;video/mp4&quot; &gt; 您的浏览器暂不支持&lt;&lt;video src=&quot;文件地址&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt;&lt;!--开发优化--&gt;&lt;video controls=&quot;controls&quot; width=&quot;300&quot;&gt; &lt;source src=&quot;move.ogg&quot; type=&quot;video/ogg&quot; &gt; &lt;souree src=&quot;move.mp4&quot; type=&quot;video/mp4&quot; &gt; 您的浏览器暂不支持&lt;video>标签播放视频 新增的input类型我们验证的时候必须添加我们验证的时候必须添加form表单域 新增的表单属性我们验证的时候必须添加我们验证的时候必须添加form表单域 input::placeholder&#123; input::placeholder&#123; color: pink;&#125;","categories":[{"name":"前端笔记","slug":"前端笔记","permalink":"https://csong.vercel.app/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"HTML5","slug":"HTML5","permalink":"https://csong.vercel.app/tags/HTML5/"}]},{"title":"HTML入门学习笔记","slug":"HTML入门学习笔记","date":"2021-04-03T03:23:43.000Z","updated":"2021-09-13T04:38:48.210Z","comments":true,"path":"2021/04/03/html-ru-men-xue-xi-bi-ji/","link":"","permalink":"https://csong.vercel.app/2021/04/03/html-ru-men-xue-xi-bi-ji/","excerpt":"","text":"对功能模块代码进行注释尤为重要 文字标签 标签 语义 说明 strong strong（强调） 粗体 em emphasized（强调） 斜体 sup superscripted（上标） 上标 sub subscripted（下标） 下标 自闭合标签 标签 说明 定义网页的信息（供搜索引擎查看） 引入“外部CSS文件” 换行标签 水平线标签 图片标签 表单标签 有序列表标签&lt;ol type=&quot;属性值&quot;&gt; &lt;li&gt;列表项&lt;/li&gt; &lt;li&gt;列表项&lt;/li&gt; &lt;li&gt;列表项&lt;/&lt;ol type=&quot;属性值&quot;&gt; &lt;li&gt;列表项&lt;/li&gt; &lt;li&gt;列表项&lt;/li&gt; &lt;li&gt;列表项&lt;/li> 定义列表标签&lt;dl&gt; &lt;dt&gt;HTML&lt;/dt&gt; &lt;dd&gt;制作网页的标准语言，控制网页的结构&lt;/dd&gt; &lt;dt&gt;CSS&lt;/dt&gt; &lt;dd&gt;层叠样式表，控制网页的样式&lt;/dd&gt; &lt;dt&gt;JavaScript&lt;/dt&gt; &lt;dd&gt;脚本语言，控制网页的行为&lt;/dd&gt;&lt;/&lt;dl&gt; &lt;dt&gt;HTML&lt;/dt&gt; &lt;dd&gt;制作网页的标准语言，控制网页的结构&lt;/dd&gt; &lt;dt&gt;CSS&lt;/dt&gt; &lt;dd&gt;层叠样式表，控制网页的样式&lt;/dd&gt; &lt;dt&gt;JavaScript&lt;/dt&gt; &lt;dd&gt;脚本语言，控制网页的行为&lt;/dd&gt;&lt;/dl> 表格标签 完整语义化及合并行列的用法 &lt;!DOCTYPE html&gt; &lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;编程题&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; table,tr,td&#123;border:1px solid silver;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;table&gt; &lt;caption&gt;学生成绩表&lt;/caption&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;性别&lt;/th&gt; &lt;th&gt;成绩&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;张三&lt;/td&gt; &lt;td&gt;男&lt;/td&gt; &lt;td&gt;250&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;李四&lt;/td&gt; &lt;td&gt;男&lt;/td&gt; &lt;td&gt;520&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;td&gt;平均分&lt;/td&gt; &lt;td colspan=&quot;2&quot;&gt;385&lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt; &lt;/table&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt; &lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;编程题&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; table,tr,td&#123;border:1px solid silver;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;table&gt; &lt;caption&gt;学生成绩表&lt;/caption&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;性别&lt;/th&gt; &lt;th&gt;成绩&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;张三&lt;/td&gt; &lt;td&gt;男&lt;/td&gt; &lt;td&gt;250&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;李四&lt;/td&gt; &lt;td&gt;男&lt;/td&gt; &lt;td&gt;520&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;td&gt;平均分&lt;/td&gt; &lt;td colspan=&quot;2&quot;&gt;385&lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html> 效果图 图片标签&lt;body&gt; &lt;img src=&quot;img/1.jpg&quot; alt=&quot;&quot;/&gt;&lt;br/&gt; &lt;img src=&quot;img/2.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt; &lt;img src=&quot;img/3.gif&quot; alt=&quot;&quot;/&gt;&lt;/&lt;body&gt; &lt;img src=&quot;img/1.jpg&quot; alt=&quot;&quot;/&gt;&lt;br/&gt; &lt;img src=&quot;img/2.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt; &lt;img src=&quot;img/3.gif&quot; alt=&quot;&quot;/&gt;&lt;/body> a标签(超链接)&lt;body&gt; &lt;a href=&quot;http://www.lvyestudy.com&quot; target=&quot;_blank&quot;&gt;绿叶学习网&lt;/a&gt;&lt;/&lt;body&gt; &lt;a href=&quot;http://www.lvyestudy.com&quot; target=&quot;_blank&quot;&gt;绿叶学习网&lt;/a&gt;&lt;/body> 表单单选框，多选框的Name属性不要忘。暂时可以用该代码来调整位置。 &nbsp;","categories":[{"name":"前端笔记","slug":"前端笔记","permalink":"https://csong.vercel.app/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"html","slug":"html","permalink":"https://csong.vercel.app/tags/html/"}]},{"title":"CSS入门学习笔记","slug":"CSS入门学习","date":"2021-04-03T03:23:43.000Z","updated":"2021-09-13T04:38:32.495Z","comments":true,"path":"2021/04/03/css-ru-men-xue-xi/","link":"","permalink":"https://csong.vercel.app/2021/04/03/css-ru-men-xue-xi/","excerpt":"","text":"CSS选择器（1）元素选择器 &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;/&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div&#123;color:red;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;p&gt;绿叶学习网&lt;/p&gt; &lt;span&gt;绿叶学习网&lt;/span&gt; &lt;div&gt;绿叶学习网&lt;/div&gt;&lt;/&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;/&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div&#123;color:red;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;p&gt;绿叶学习网&lt;/p&gt; &lt;span&gt;绿叶学习网&lt;/span&gt; &lt;div&gt;绿叶学习网&lt;/div&gt;&lt;/body> （2）id选择器 &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #lvye&#123;color:red;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div id=&quot;lvye&quot;&gt;绿叶学习网&lt;/div&gt; &lt;div&gt;绿叶学习网&lt;/div&gt;&lt;/&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #lvye&#123;color:red;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div id=&quot;lvye&quot;&gt;绿叶学习网&lt;/div&gt; &lt;div&gt;绿叶学习网&lt;/div&gt;&lt;/body> （3）class选择器 &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .lv&#123;color:red;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div class=&quot;lv&quot;&gt;绿叶学习网&lt;/div&gt; &lt;div class=&quot;lv&quot;&gt;绿叶学习网&lt;/div&gt;&lt;/&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .lv&#123;color:red;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div class=&quot;lv&quot;&gt;绿叶学习网&lt;/div&gt; &lt;div class=&quot;lv&quot;&gt;绿叶学习网&lt;/div&gt;&lt;/body> （4）后代选择器 &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #father1 div &#123;color:red;&#125; #father2 span&#123;color:blue;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;father1&quot;&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;father2&quot;&gt; &lt;p&gt;绿叶学习网&lt;/p&gt; &lt;p&gt;绿叶学习网&lt;/p&gt; &lt;span&gt;绿叶学习网&lt;/span&gt; &lt;/div&gt;&lt;/&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #father1 div &#123;color:red;&#125; #father2 span&#123;color:blue;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;father1&quot;&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;father2&quot;&gt; &lt;p&gt;绿叶学习网&lt;/p&gt; &lt;p&gt;绿叶学习网&lt;/p&gt; &lt;span&gt;绿叶学习网&lt;/span&gt; &lt;/div&gt;&lt;/body> （5）群组选择器 &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #lvye,.lv,span&#123;color:red;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;lvye&quot;&gt;绿叶学习网&lt;/div&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;p&gt;绿叶学习网&lt;/p&gt; &lt;p class=&quot;lv&quot;&gt;绿叶学习网&lt;/p&gt; &lt;span&gt;绿叶学习网&lt;/span&gt;&lt;/&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #lvye,.lv,span&#123;color:red;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;lvye&quot;&gt;绿叶学习网&lt;/div&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;p&gt;绿叶学习网&lt;/p&gt; &lt;p class=&quot;lv&quot;&gt;绿叶学习网&lt;/p&gt; &lt;span&gt;绿叶学习网&lt;/span&gt;&lt;/body> 字体类型 如果我们不定义font-family，浏览器默认字体类型一般是“宋体”。 在实际开发中，比较美观的中文字体有微软雅黑、苹方，英文字体有Times New Roman 、Arial和Verdana，注意带引号的规则。 颜色 关键字，指的就是颜色的英文名称，如red、blue、green等 #000000是黑色，#FFFFFF是白色 分段书写提高可读性 p&#123; font-family:微软雅黑; /*字体类型为微软雅黑*/ font-size:14px; /*字体大小为14px*/ font-weight:bold; /*字体粗细为bold*/ color:red; p&#123; font-family:微软雅黑; /*字体类型为微软雅黑*/ font-size:14px; /*字体大小为14px*/ font-weight:bold; /*字体粗细为bold*/ color:red; /*字体颜色为red*/&#125; 文本首行缩进 中文段落首行一般需要缩进两个字的空间。如果想要实现这个效果，text-indent值应该是font-size值的2倍 文本修饰 我们都知道超链接（a元素）默认样式有下划线，如“&lt;a href=&quot;http://www.lvyestudy.com&quot;&gt;绿叶学习网&lt;/a&gt;”这一句代码，浏览器效果如下图所示。 那么该如何去掉a元素中的下划线呢？这个时候，text-decoration:none; 就派上用场了。 &lt;style type=&quot;text/css&quot;&gt; a&#123;&lt;style type=&quot;text/css&quot;&gt; a&#123;text-decoration:none;&#125; 样式边框 div元素可以定义边框，img元素可以定义边框，table元素可以定义边框，span元素同样也可以定义边框。 border: border: 1px solid red; 上面代码其实等价于： border-width: 1px;border-style: solid;border-width: 1px;border-style: solid;border-color: red; 列表 由于列表项符号比较丑，因此在实际开发中，大多数情况下我们都需要使用list-style-type:none;去掉。 ul{}中的样式只能作用于列表，而不能作用于超链接，要用a{}，反之亦然。 图片 在实际开发中，如果你需要多大的图片，就用Photoshop制作多大的图片。不建议使用一张大图片，然后再借助width和height来改变大小。因为一张大图片体积更大，会使页面加载速度变慢。 “vertical-align属性定义周围的行内元素或文本相对于该元素的垂直方式” 背景 color属性用于定义“文本颜色”，而background-color属性用于定义“背景颜色”。 &lt;style type=&quot;text/css&quot;&gt; p &#123; color:white; &lt;style type=&quot;text/css&quot;&gt; p &#123; color:white; background-color: hotpink; &#125; 背景图片跟图片是不一样的，背景图片是使用CSS来实现，而图片是使用HTML来实现。 没有给div元素定义width和height，此时div元素的宽度和高度都为0，那背景图片不会显示。 不加引号引用更简洁。 /*方式2：路径没加引号*/background-image: url(/*方式2：路径没加引号*/background-image: url(img/haizei.png); :hover伪类应用广泛。 盒子模型 所有的元素都可以看成一个盒子。 只有块元素才可以设置width和height，行内元素是无法设置width和height的。（我们这里不考虑inline-block元素）。 对于border属性，更多使用的是简写形式： border: border: 1px solid red; padding属性在实际开发中，往往使用简写形式（与margin相同）： padding:20px表示4个方向的内边距都是20px。 padding:20px 40px表示padding-top和padding-bottom为20px，padding-right和padding-left为40px。 padding: 像素值1 像素值2 像素值3 像素值padding: 像素值1 像素值2 像素值3 像素值4; 分别对应padding-top，padding-right，padding-bottom，padding-left（顺时针记忆） 浮动 如果你想要实现两列并排或者多列并排效果时，首先考虑的是使用浮动来实现。 浮动可以形成并列的效果，但如果影响纵向的排列结构则使用clear:both来消除这样的影响。 一般都是在浮动元素后面再增加一个空元素，然后为这个空元素定义clear:both来清除浮动，而纵向的位置由margin确定。 &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*定义父元素样式*/ #father &#123; width:300px; background-color:#0C6A9D; border:1px solid silver; &#125; /*定义子元素样式*/ #father div &#123; padding:10px; margin:15px; &#125; #son1 &#123; background-color:hotpink; float:left; /*左浮动*/ &#125; #son2 &#123; background-color:#FCD568; float:right; /*右浮动*/ &#125; .clear&#123;clear:both;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;father&quot;&gt; &lt;div id=&quot;son1&quot;&gt;box1&lt;/div&gt; &lt;div id=&quot;son2&quot;&gt;box2&lt;/div&gt; &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*定义父元素样式*/ #father &#123; width:300px; background-color:#0C6A9D; border:1px solid silver; &#125; /*定义子元素样式*/ #father div &#123; padding:10px; margin:15px; &#125; #son1 &#123; background-color:hotpink; float:left; /*左浮动*/ &#125; #son2 &#123; background-color:#FCD568; float:right; /*右浮动*/ &#125; .clear&#123;clear:both;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;father&quot;&gt; &lt;div id=&quot;son1&quot;&gt;box1&lt;/div&gt; &lt;div id=&quot;son2&quot;&gt;box2&lt;/div&gt; &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body> 不注明块元素的宽和高是无法添加背景颜色的。按照一定的顺序如宽高颜色位置等。 一般构思时是先将要展现的整体看作一个元素，不为其设置margin，如果对外框有要求时再设置，如： &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #wrapper &#123; width:800px; height:600px; &#125; #header,#footer &#123; height:100px; background-color:lightskyblue; &#125; .main-left,.main-right &#123; height:380px; margin-top:10px; margin-bottom:10px; background-color:hotpink; &#125; .main-left &#123; float:left; width:595px; &#125; .main-right &#123; float:right; width:195px; &#125; .clear&#123;clear:both;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;wrapper&quot;&gt; &lt;div id=&quot;header&quot;&gt;&lt;/div&gt; &lt;div id=&quot;main&quot;&gt; &lt;div class=&quot;main-left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;main-right&quot;&gt;&lt;/div&gt; &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;footer&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #wrapper &#123; width:800px; height:600px; &#125; #header,#footer &#123; height:100px; background-color:lightskyblue; &#125; .main-left,.main-right &#123; height:380px; margin-top:10px; margin-bottom:10px; background-color:hotpink; &#125; .main-left &#123; float:left; width:595px; &#125; .main-right &#123; float:right; width:195px; &#125; .clear&#123;clear:both;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;wrapper&quot;&gt; &lt;div id=&quot;header&quot;&gt;&lt;/div&gt; &lt;div id=&quot;main&quot;&gt; &lt;div class=&quot;main-left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;main-right&quot;&gt;&lt;/div&gt; &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;footer&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 定位 position:fixed;使得元素成为固定定位元素，接着使用top、bottom、left和right这4个属性来设置元素相对浏览器的位置，这4个值的参考对象是浏览器的4条边，不必全用到。 position:relative;来实现相对定位，相对定位元素的位置是相对于原始位置而言。 position:absolute;来实现绝对定位，使用top、bottom、left和right这4个属性来设置元素相对浏览器的位置。 一般只使用其中两个。 在实际开发中，优先使用浮动布局。如果实现不了，再考虑定位布局。因为定位布局大多数情况会使得元素完全脱离原来的位置，使得布局不可控。","categories":[{"name":"前端笔记","slug":"前端笔记","permalink":"https://csong.vercel.app/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://csong.vercel.app/tags/CSS/"}]},{"title":"JS入门学习笔记","slug":"js入门学习笔记","date":"2021-04-03T03:23:43.000Z","updated":"2021-09-13T04:38:56.986Z","comments":true,"path":"2021/04/03/js-ru-men-xue-xi-bi-ji/","link":"","permalink":"https://csong.vercel.app/2021/04/03/js-ru-men-xue-xi-bi-ji/","excerpt":"","text":"引入方式 对于CSS来说，外部CSS文件只能在head中引入。不过对于JavaScript来说，外部JavaScript文件不仅可以在head中引入，还可以在body中引入。 外部引用此外还需要注意一点，引入外部CSS文件使用的是“link标签”，而引入外部JavaScript文件使用的是“script标签”。 &lt;!--引入外部CSS--&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;index.css&quot;/&gt;&lt;!--引入外部JavaScript--&gt;&lt;script src=&quot;js/index.js&quot;&gt;&lt;/&lt;!--引入外部CSS--&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;index.css&quot;/&gt;&lt;!--引入外部JavaScript--&gt;&lt;script src=&quot;js/index.js&quot;&gt;&lt;/script> 内部引用把HTML代码和JavaScript代码放在同一个文件中。其中JavaScript代码写在标签对内。 &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;!--1、在head中引入--&gt; &lt;script&gt; …… &lt;/script&gt;&lt;/&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;!--1、在head中引入--&gt; &lt;script&gt; …… &lt;/script&gt;&lt;/head> 内部JavaScript文件不仅可以在head中引入，也可以在body中引入。一般情况下，我们都是在head中引入。 元素属性JavaScript在元素的“事件属性”中直接编写JavaScript或调用函数。 &lt;!DOCTYPE html&gt; &lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;button&quot; value=&quot;按钮&quot; onclick=&quot;alert(&#x27;绿叶学习，给你初恋般的感觉&#x27;)&quot;/&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt; &lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;button&quot; value=&quot;按钮&quot; onclick=&quot;alert(&#x27;绿叶学习，给你初恋般的感觉&#x27;)&quot;/&gt;&lt;/body&gt;&lt;/html> 1.基本语法 （1）document.write()：在页面输出一个内容。（2）alert()：弹出一个对话框。 alert(alert(\"I love JavaScript!\"); 格式：注意有分号以及双引号，在JavaScript中，每一条语句都是英文分号（;）作为结束符。 1.1 变量 1.1.1命名 变量由字母、下划线、$或数字组成，并且第一个字母必须是“字母、下划线或$”。 变量不能是系统关键字和保留字。 变量的命名一定要区分大小写 1.1.2关键字及保留字 break else new typeof case false null var catch for switch void continue function this while default if throw with delete in true do instanceof try abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public alert eval location open array focus math outerHeight blur funtion name parent boolean history navigator parseFloat date image number regExp document isNaN object status escape length onLoad string 1.1.3使用 所有JavaScript变量都是由var声明 一个var也可以同时声明多个变量名，其中变量名之间必须用英文逗号（,）隔开。 var a=10,b=20,c=var a=10,b=20,c=30; 常量名全部大写 1.2 数据类型 1.2.1基本数据类型 数字 JavaScript中的数字是不区分“整型（int）”和“浮点型（float）”的。 在JavaScript中，所有变量都是用var声明。 字符串 字符串都是用英文单引号或英文双引号（注意都是英文）括起来的。 单引号括起来的字符串中可以包含双引号，双引号括起来的字符串中可以包含单引号。单引号括起来的字符串中，不能含有单引号，只能含有双引号。同样的道理，双引号括起来的字符串中，也不能含有双引号，只能含有单引号。 document.write()这个方法本身就是用来输出一个字符串的。 布尔值 未定义值 一个变量虽然已经用var来声明了，但是并没有对这个变量进行赋值，未定义值用undefined表示。 空值 空值用null表示。如果一个变量的值等于null，如“var n = null”，则表示系统没有给这个变量n分配内存空间。 1.3 运算符 注意%求余 字符串 + 数字 = 字符串 document.write(&quot;a+b=&quot; + n1 + document.write(&quot;a+b=&quot; + n1 + \"\"); 1.3.1自增运算符 i++(i–同理) i=1;j=i++;//等价于：i=1;j=i;i=i+i=1;j=i++;//等价于：i=1;j=i;i=i+1; ++i(–i同理) i=1;j=++i;//上面这段代码等价于：i=1;i=i+i=1;j=++i;//上面这段代码等价于：i=1;i=i+1; j=i; 1.3.2比较运算符!= 不等于 1.3.3逻辑运算符 &amp;&amp; “与”运算 || “或”运算 ! “非”运算 1.3.4条件运算符var a = 条件 ? 表达式1 : 表达式var a = 条件 ? 表达式1 : 表达式2; 当条件为true时，我们选择的是“表达式1”,当条件为false时，我们选择的是“表达式2”。 1.4 类型转换 1.4.1显式类型转换将字符串转换为数字： Number() 将任何“数字型字符串”（只有数字的字符串）转换为数字。 NaN指的是“Not a Number（非数字） var a = Number(&quot;2018&quot;) + var a = Number(&quot;2018&quot;) + 1000; parseInt()和parseFloat() parseInt()会从左到右进行判断，如果第1个字符是数字，则继续判断，直到出现非数字为止（小数点也是非数字）；如果第1个字符是非数字，则直接返回NaN。 第1个字符是加号（+）或减号（-），也就是非数字，parseInt()同样也是可以转换的。 同样的，parseFloat()也有这个特点，但能识别小数点。 将数字转换为字符串 与空字符串相加 **toString() a.toString()表示将a转换为字符串 在实际开发中，将数字转换为字符串，直接跟一个字符串相加 1.5 转义字符 转义字符 说明 \\&#39; 英文单引号 \\&quot; 英文双引号 \\n 换行符 如果是在document.write()中换行，则应该用： document.write(&quot;绿叶，&lt;br/&gt;初恋般的感觉~&quot;)document.write(&quot;绿叶，&lt;br/&gt;初恋般的感觉~&quot;); 如果是在alert()中换行，则应该用：\\n alert(&quot;绿叶，\\n初恋般的感觉&quot;)alert(&quot;绿叶，\\n初恋般的感觉&quot;); \\n是转义字符，一般用于对话框文本的换行。这里如果用就无法实现了。 1.6 注释 HTML CSS /*这是CSS注释*/ JS //这是JavaScript注释（单行） /* 这是JavaScript注释（多行） 这是JavaScript注释（多行） 这是JavaScript注释（多行）//这是JavaScript注释（单行） /* 这是JavaScript注释（多行） 这是JavaScript注释（多行） 这是JavaScript注释（多行） */ 1.7 流程控制 1.7.1选择结构 if 单向选择：if… ifif(条件)&#123; ……&#125; 双向选择：if…else… if(条件)&#123; ……&#125;if(条件)&#123; ……&#125;else&#123; ……&#125; 可以使用三目运算符来代替。 多向选择：if…else if…else… if(条件1)&#123; //当条件1为true时执行的代码&#125;else if(条件2)&#123; //当条件2为true时执行的代码&#125;else&#123; //当条件1和条件if(条件1)&#123; //当条件1为true时执行的代码&#125;else if(条件2)&#123; //当条件2为true时执行的代码&#125;else&#123; //当条件1和条件2都为false时执行的代码&#125; if语句的嵌套 switch switch语句会根据“判断值”来判断，然后来选择使用哪一个case。如果每一个case的取值都不符合，那就执行default的语句。 switch(判断值)&#123; case 取值1: 语块1;break; case 取值2: 语块2;break; …… case 取值n: 语块n;break; default: 语句块n+switch(判断值)&#123; case 取值1: 语块1;break; case 取值2: 语块2;break; …… case 取值n: 语块n;break; default: 语句块n+1;&#125; 1.7.2循环结构 while sum += n;等价于sum=sum+n;，而n+=2;等价于n=n+2;。在实际开发中，一般使用简写形式多。 while(条件)&#123; while(条件)&#123; //当条件为true时，循环执行&#125; do…while 首先是无条件执行循环体一次，然后再判断是否符合条件。如果符合条件，则重复执行循环体；如果不符合条件，则退出循环。 句结尾处括号后有一个分号（;） 在实际开发中，一般都是用while语句 do&#123; ……&#125;whiledo&#123; ……&#125;while(条件); for for(初始化表达式; 条件表达式; 循环后操作)&#123; ……&#125;for(初始化表达式; 条件表达式; 循环后操作)&#123; ……&#125;//循环后操作，指的是执行循环体（也就是大括号中的程序）后的操作 在循环体中，我们使用“拼接字符串”（也就是用加号拼接）的方式来构造一个“HTML字符串”。 for (var i = 2; i &lt; 5; i++)&#123; var str = &quot;&lt;p style=&#x27;font-size:&quot; + i * 5 + &quot;px&#x27;&gt;总有刁民想害朕&lt;/p&gt;&quot;; document.write(for (var i = 2; i &lt; 5; i++)&#123; var str = &quot;&lt;p style=&#x27;font-size:&quot; + i * 5 + &quot;px&#x27;&gt;总有刁民想害朕&lt;/p&gt;&quot;; document.write(str);&#125; 1.8 函数 1.8.1定义函数function 函数名(参数1 , 参数2 ,..., 参数n)&#123; ……&#125;//有返回值的函数function 函数名(参数1 , 参数2 ,..., 参数n)&#123; …… return function 函数名(参数1 , 参数2 ,..., 参数n)&#123; ……&#125;//有返回值的函数function 函数名(参数1 , 参数2 ,..., 参数n)&#123; …… return 返回值;&#125; 全局变量 全局变量在任何地方都可以用。 局部变量 局部变量只能在函数中使用 1.8.2函数的调用 直接调用 在表达式中调用 在超链接中调用 &lt;a href=&quot;javascript:函数名&quot;&gt;&lt;/a&gt; //举例&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; function expressMes() &#123; alert(&quot;她：我爱helicopter。\\n我：oh~my，= =?!&quot;); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=&quot;javascript:expressMes()&quot;&gt;表白对话&lt;/a&gt;&lt;/&lt;a href=&quot;javascript:函数名&quot;&gt;&lt;/a&gt; //举例&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; function expressMes() &#123; alert(&quot;她：我爱helicopter。\\n我：oh~my，= =?!&quot;); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=&quot;javascript:expressMes()&quot;&gt;表白对话&lt;/a&gt;&lt;/body> 1.8.3嵌套函数1.8.4内置函数 函数 说明 parseInt() 提取字符串中的数字，只限提取整数 parseFloat() 提取字符串中的数字，可以提取小数 isFinite() 判断某一个数是否是一个有限数值 isNaN() 判断一个数是否是NaN值 escape() 对字符串进行编码 unescape() 对字符串进行解码 eval() 把一个字符串当做一个表达式一样去执行 1.8.5内置对象 length 获取字符串的长度 var str = &quot;I love lvye!&quot;;document.write(&quot;字符串长度是：&quot; + var str = &quot;I love lvye!&quot;;document.write(&quot;字符串长度是：&quot; + str.length); toLowerCase()、toUpperCase() 将大写字符串转化为小写字符串、将小写字符串转化为大写字符串。 字符串名.toLowerCase()字符串名.to字符串名.toLowerCase()字符串名.toUpperCase() charAt() 获取字符串中的某一个字符。 字符串第1个字符的下标是0，第2个字符的下标是1。 在字符串中，空格也是作为一个字符来处理。 两个字符之间比较的是ASCII码的大小。 字符串名.charAt(n)//例如document.write(&quot;第1个字符是：&quot; + str.charAt(0) + &quot;&lt;br/&gt;&quot;);document.write(&quot;第7个字符是：&quot; + str.char字符串名.charAt(n)//例如document.write(&quot;第1个字符是：&quot; + str.charAt(0) + &quot;&lt;br/&gt;&quot;);document.write(&quot;第7个字符是：&quot; + str.charAt(6)); substring() 截取字符串的某一部分。 start和end都是整数，一般都是从0开始，其中end大于start。 substring(start,end)截取范围为：[start,end)，也就是包含start，不包含end。其中，end可以省略。当end省略时，截取的范围为：start到结尾。 对于字符串操作来说，凡是涉及下标，都是从0开始。 字符串名.substring(start, 字符串名.substring(start, end) replace() 替换字符串 字符串替换只会替换第一个，正则表达式会替换全部。 字符串名.replace(原字符串, 替换字符串)字符串名.replace(正则表达式, 替换字符串)//例如var str = &quot;I love javascript!&quot;;var str_new = str.replace(&quot;javascript&quot;, &quot;lvye&quot;);var str = &quot;I am loser, you are loser, all are loser.&quot;;var str_new = str.replace(/loser/g, 字符串名.replace(原字符串, 替换字符串)字符串名.replace(正则表达式, 替换字符串)//例如var str = &quot;I love javascript!&quot;;var str_new = str.replace(&quot;javascript&quot;, &quot;lvye&quot;);var str = &quot;I am loser, you are loser, all are loser.&quot;;var str_new = str.replace(/loser/g, \"hero\"); split() 分割字符串 分割符可以是一个字符、多个字符或一个正则表达式。 split(“”)可以用来分割字符串每一个字符。 字符串名.split(&quot;分割符&quot;)//例如&lt;script&gt; var str = &quot;HTML,CSS,JavaScript&quot;; var arr = str.split(&quot;,&quot;); document.write(&quot;数组第1个元素是：&quot; + arr[0] + &quot;&lt;br/&gt;&quot;); document.write(&quot;数组第2个元素是：&quot; + arr[1] + &quot;&lt;br/&gt;&quot;); document.write(&quot;数组第3个元素是：&quot; + arr[2]);&lt;/字符串名.split(&quot;分割符&quot;)//例如&lt;script&gt; var str = &quot;HTML,CSS,JavaScript&quot;; var arr = str.split(&quot;,&quot;); document.write(&quot;数组第1个元素是：&quot; + arr[0] + &quot;&lt;br/&gt;&quot;); document.write(&quot;数组第2个元素是：&quot; + arr[1] + &quot;&lt;br/&gt;&quot;); document.write(&quot;数组第3个元素是：&quot; + arr[2]);&lt;/script> indexOf()、lastIndexOf() 找出“某个指定字符串”在字符串中首次出现的下标位、找出“某个指定字符串”在字符串中最后出现的下标位置。（也可以找某个具体字符） 如果字符串中不包含“指定字符串”，indexOf()或lastIndexOf()就会返回-1。 字符串名.indexOf(指定字符串)字符串名.lastIndexOf字符串名.indexOf(指定字符串)字符串名.lastIndexOf(指定字符串) 1.9 数组 1.9.1创建数组一般使用简写形式来创建数组。 var 数组名 = new Array(元素1, 元素2, ……, 元素n); //完整形式var 数组名 = [元素1, 元素2, ……, 元素n]; var 数组名 = new Array(元素1, 元素2, ……, 元素n); //完整形式var 数组名 = [元素1, 元素2, ……, 元素n]; //简写形式 1.9.2数组的获取想要获取数组某一项的值，我们都是使用“下标”的方式来获取。 数组的下标是从0开始的，而不是从1开始的。 1.9.2数组的赋值也可以用于增加数组的项数。 arr[i] = 值arr[i] = 值; 1.9.3获取数组长度一般情况下，都是用数组来存储“相同数据类型”的数据 数组名.数组名.length 应用：输出数组的每一个元素 //创建数组var arr = [1, 2, 3, 4, 5, 6];//输出数组所有元素for(var i=0;i&lt;arr.length;i++)&#123; document.write(arr[i] + //创建数组var arr = [1, 2, 3, 4, 5, 6];//输出数组所有元素for(var i=0;i&lt;arr.length;i++)&#123; document.write(arr[i] + \"\");&#125; 1.9.4获截数组部分slice(start,end)截取范围为：[start,end)，也就是“包含start但不包含end”。其中，end可以省略。当end省略时，获取的范围为：start到结尾。 数组名.slice(start, 数组名.slice(start, end); 1.9.5添加数组元素 在数组开头添加元素：unshift() 数组名.unshift(新元素1, 新元素2, ……, 新元素数组名.unshift(新元素1, 新元素2, ……, 新元素n) 在数组结尾添加元素：push() 当我们不知道数组有多少个元素的时候，我们就没法用下标这种方式来给数组添加新元素。此时，push()方法就相当有用了，因为它不需要知道你有多少个元素，它的目的就是在你数组的最后面添加新元素。 数组名.push(新元素1, 新元素2, ……, 新元素数组名.push(新元素1, 新元素2, ……, 新元素n) 1.9.5删除数组元素 删除数组中的第一个元素 数组名.数组名.shift() 删除数组的最后一个元素 数组名.pop数组名.pop() 1.9.6数组元素大小比较数组名.sort(函数名)//例如//定义一个升序函数function up(a, b) &#123; return a - b;&#125;//定义一个降序函数function down(a, b) &#123; return b - a;&#125;//定义数组var arr = [3, 9, 1, 12, 50, 21];arr.sort(up);document.write(&quot;升序：&quot; + arr.join(&quot;、&quot;) + &quot;&lt;br/&gt;&quot;);arr.sort(down);document.write(&quot;降序：&quot; + arr.join(数组名.sort(函数名)//例如//定义一个升序函数function up(a, b) &#123; return a - b;&#125;//定义一个降序函数function down(a, b) &#123; return b - a;&#125;//定义数组var arr = [3, 9, 1, 12, 50, 21];arr.sort(up);document.write(&quot;升序：&quot; + arr.join(&quot;、&quot;) + &quot;&lt;br/&gt;&quot;);arr.sort(down);document.write(&quot;降序：&quot; + arr.join(\"、\")); 1.9.7数组元素颠倒顺序数组名.reverse()数组名.reverse(); 1.9.8数组元素连接成字符串默认情况下，则采用英文逗号（,）作为连接符来连接。 数组名.join(&quot;连接符&quot;)数组名.join(&quot;连接符&quot;); 1.10 时间对象 1.10.1操作年月日 获取年月日 方法 说明 getFullYear() 获取年份，取值为4位数字 getMonth() 获取月份，取值为0（一月）到11（十二月）之间的整数 getDate() 获取日数，取值为1~31之间的整数 设置年月日 setFullYear() 设置年、月、日。 year表示年，是必选参数，用一个4位的整数表示，如2017、2020等。 时间对象.setFullYear(year,month,时间对象.setFullYear(year,month,day); setMonth() 设置月、日。 month表示月，是必选参数，用0~11之间的整数表示。其中0表示1月，1表示2月，以此类推。 时间对象.setMonth(month, 时间对象.setMonth(month, day); setDate() 设置日。 day表示日，是必选参数，用1~31之间的整数表示。 时间对象.setDate(day); //举例&lt;script&gt; var d = new Date(); d.setFullYear(1992, 09, 01); document.write(时间对象.setDate(day); //举例&lt;script&gt; var d = new Date(); d.setFullYear(1992, 09, 01); document.write(\"我设置的时间是：\" + d); 1.10.2操作时分秒 获取当前的时、分、秒 方法 说明 getHours() 获取小时数，取值为0~23之间的整数 getMinutes() 获取分钟数，取值为0~59之间的整数 getSeconds() 获取秒数，取值为0~59之间的整数 &lt;script&gt; var d = new Date(); var myHours = d.getHours(); var myMinutes = d.getMinutes(); var mySeconds = d.getSeconds(); document.write(&quot;当前时间是：&quot; + myHours + &quot;:&quot; + myMinutes + &quot;:&quot; + mySeconds);&lt;/&lt;script&gt; var d = new Date(); var myHours = d.getHours(); var myMinutes = d.getMinutes(); var mySeconds = d.getSeconds(); document.write(&quot;当前时间是：&quot; + myHours + &quot;:&quot; + myMinutes + &quot;:&quot; + mySeconds);&lt;/script> 设置时、分、秒 setHours() 设置时、分、秒、毫秒。 hour是必选参数，表示时，取值为0~23之间的整数。 时间对象.setHours(hour, min, sec, 时间对象.setHours(hour, min, sec, millisec); setMinutes() 设置分、秒、毫秒。 min是必选参数，表示分，取值为0~59之间的整数。 时间对象.setMinutes( min, sec, 时间对象.setMinutes( min, sec, millisec); setSeconds() 设置秒、毫秒。 sec是必选参数，表示秒，取值为0~59之间的整数。 millisec是可选参数，表示毫秒，取值为0~999之间的整数。 时间对象.setSeconds(sec, 时间对象.setSeconds(sec, millisec); 1.10.3获取星期几时间对象.getDay();//getDay()返回一个数字，其中0表示星期天，1表示星期一……时间对象.getDay();//getDay()返回一个数字，其中0表示星期天，1表示星期一……6表示星期六。 将数字转换为中文 var weekday = [&quot;星期日&quot;, &quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;];var d = new Date();document.write(&quot;今天是&quot; + var weekday = [&quot;星期日&quot;, &quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;];var d = new Date();document.write(&quot;今天是&quot; + weekday[d.getDay()]); 1.11 数学对象 1.11.1Math对象属性常见的Math对象属性 属性 说明 对应的数学形式 PI 圆周率 π LN2 2的自然对数 ln(2) LN10 10的自然对数 ln(10) LOG2E 以2为底的e的对数 log2e LOG10E 以10为底的e的对数 log10e SQRT2 2的平方根 √2 SQRT1_2 2的平方根的倒数 1/√2 对于角度，在实际开发中推荐这种写法：“度数 * Math.PI/180”，因为这种写法可以让我们一眼就能看出角度是多少。 120*Math.PI/180 //120°150*Math.PI/180 //120*Math.PI/180 //120°150*Math.PI/180 //150° 1.11.2Math对象的方法 常用 方法 说明 max(a,b,…,n) 返回一组数中的最大值 min(a,b,…,n) 返回一组数中的最小值 sin(x) 正弦 cos(x) 余弦 tan(x) 正切 asin(x) 反正弦 acos(x) 反余弦 atan(x) 反正切 atan2(y, x) 反正切（注意y、x顺序） floor(x) 向下取整 ceil(x) 向上取整 random() 生成随机数 不常用 方法 说明 abs(x) 返回x的绝对值 sqrt(x) 返回x的平方根 log(x) 返回x的自然对数（底为e） pow(x,y) 返回x的y次幂 exp(x) 返回e的指数 1.11.2最大值与最小值Math.max(a, b, …, n);Math.min(a, Math.max(a, b, …, n);Math.min(a, b, …, n); 1.11.3取整运算 向上取整 Math.ceil(x) 向下取整 Math.floor(x) 1.11.4三角函数 atan2(y, x)跟atan(x)是不一样的，atan2(y, x)能够精确判断角度对应哪一个角，而atan(x)不能。因此在高级动画开发时，我们大多数用的是atan2(y, x)，基本用不到atan(x)。 反三角函数用得很少（除了atan2()），一般都是用三角函数，常用的有：sin()、cos()和atan2()。 1.11.5生成随机数使用random()方法来生成01之间的一个随机数。这里的01是只包含0不包含1的，也就是[0, 1)。 常用 Math.random()*m 生成0~m之间的随机数 Math.random()*m+n 生成n~m+n之间的随机数 Math.random()*m-n 生成-n~m-n之间的随机数 Math.random()*m-m 生成-m~0之间的随机数 Math.floor(Math.random()*(m+1)) 生成0到m之间的随机整数 Math.floor(Math.random()*m)+1 生成1到m之间的随机整数（包括1和m） Math.floor(Math.random()*(m-n+1))+n 生成n到m之间的随机整数（包括n和m） 2.核心技术2.1 DOM 2.1.1DOM节点类型 元素节点 属性节点 文本节点 举例： 注意： 节点跟元素是不一样的概念，节点是包括元素的。 一个元素就是一个节点，这个节点称之为“元素节点”。 属性节点和文本节点是独立的节点，并不属于元素节点。 只有元素节点才可以拥有子节点，属性节点和文本节点都无法拥有子节点。 2.1.2获取元素 严格区分大小写 getElementById() onload表示在整个页面加载完成后执行的代码块。 getElementById()获取的是一个DOM对象，我们在给变量命名的时候，习惯性地以英文“o”开头，以便跟其他变量区分开来，让我们一眼就看出来这是一个DOM对象。 document.getElementById(&quot;id名&quot;)//举例window.onload = function () &#123; var oDiv = document.getElementById(&quot;div1&quot;); oDiv.style.color = document.getElementById(&quot;id名&quot;)//举例window.onload = function () &#123; var oDiv = document.getElementById(&quot;div1&quot;); oDiv.style.color = \"red\";&#125; getElementsByTagName() getElementsByTagName()方法获取的是一个“类数组”（也叫伪数组），这不是真正意义上的数组。我们只能使用到数组的length属性以及下标的形式，但是对于push()等方法是没办法在这里用的。类数组只能用到两点：length属性；下标形式。 document. getElementsByTagName(&quot;标签名&quot;)//举例&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; window.onload = function () &#123; var oUl = document.getElementById(&quot;list&quot;); var oLi = oUl.getElementsByTagName(&quot;li&quot;); oLi[2].style.color = &quot;red&quot;; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;ul id=document. getElementsByTagName(&quot;标签名&quot;)//举例&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; window.onload = function () &#123; var oUl = document.getElementById(&quot;list&quot;); var oLi = oUl.getElementsByTagName(&quot;li&quot;); oLi[2].style.color = &quot;red&quot;; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;ul id=\"list\"> HTML CSS JavaScript jQuery Vue.js getElementsByClassName() getElementsByClassName()获取的也是一个类数组。 如果我们想得到某一个元素，也是使用数组下标的形式获取的 document. getElementsByClassName(document. getElementsByClassName(\"类名\") querySelector()和querySelectorAll() 可以使用CSS选择器的语法来获取所需要的元素。 对于id选择器来说，由于页面只有一个元素，建议大家用getElementById()，而不是用querySelector()或querySelectorAll()这两个。因为getElementById()方法效率更高，性能也更快。 document.querySelector(&quot;选择器&quot;);document.querySelectorAll(document.querySelector(&quot;选择器&quot;);document.querySelectorAll(\"选择器\"); getElementsByName() document.getElementsByName(document.getElementsByName(\"name名\") document.title和document.body window.onload = function () &#123; document.title = &quot;梦想是什么？&quot;; document.body.innerHTML = window.onload = function () &#123; document.title = &quot;梦想是什么？&quot;; document.body.innerHTML = \"梦想就是一种让你感到坚持就是幸福的东西。\";&#125; 2.1.3创建元素① 创建元素节点：createElement() ② 创建文本节点：createTextNode() ③ 把文本节点插入元素节点：appendChild() ④ 把组装好的元素插入到已有元素中：appendChild() 2.1.4插入元素 appendChild() 把一个新元素插入到父元素的内部子元素的 末尾 A表示父元素，B表示动态创建好的新元素。 A.appendA.appendChild(B); insertBefore() 将一个新元素插入到父元素中的某一个子元素“之前”。 A表示父元素，B表示新子元素。ref表示指定子元素，在这个元素之前插入新子元素。 A.insertBefore(B,A.insertBefore(B,ref); 2.1.5删除元素removeChild() 删除父元素下的某个子元素 A表示父元素，B表示父元素内部的某个子元素。 A.removeChild(B);//lastElementChild)表示删除最后一个子元素A.removeChild(B);//lastElementChild)表示删除最后一个子元素//firstElementChild)表示删除第一个子元素 2.1.6复制元素cloneNode()复制元素。 obj表示被复制的元素，而参数bool是一个布尔值 obj.cloneNode(obj.cloneNode(bool) 2.1.6替换元素replaceChild() A表示父元素，new表示新子元素，old表示旧子元素。 A.replaceChild(new,A.replaceChild(new,old); 2.2 DOM进阶 2.2.1 HTML属性操作 “对象属性”方式 获取HTML属性值 obj是元素名，它一个DOM对象。所谓的DOM对象，指的是getElementById()、getElementsByTagName()等方法获取到的元素节点。 attr是属性名，.id表示获取按钮的id属性值。.type表示获取type属性值。.className表示获取一个元素的class。 obj.obj.attr 设置HTML属性值 obj.attr = &quot;值&quot;obj.attr = &quot;值&quot;; “对象方法”方式 只有“对象方法方式”才可以操作自定义属性。 getAttribute() 获取元素的某个属性的值。 obj.getAttribute(obj.getAttribute(\"attr\") setAttribute() 设置元素的某个属性的值。 obj.setAttribute(&quot;attr&quot;,obj.setAttribute(&quot;attr&quot;,\"值\") removeAttribute() 删除元素的某个属性。 removeAttribute()更多情况下是结合class属性来“整体”控制元素的样式属性的 obj.removeAttribute(obj.removeAttribute(\"attr\") hasAttribute() 判断元素是否含有某个属性。 直接使用removeAttribute()删除元素的属性是不太正确的，比较严谨的做法是先用hasAttribute()判断这个属性是否存在，如果存在，才去删除。 obj.hasAttribute(obj.hasAttribute(\"attr\") 2.2.2 CSS属性操作 获取CSS属性值 getComputedStyle() obj表示DOM对象，attr表示CSS属性名。 获取CSS属性值一定要用getComputedStyle()，而不是obj.style.attr或obj.style.cssText，原因在于后者只可以获取元素style属性中设置的CSS属性，对于内部样式或者外部样式。 getComputedStyle(obj).attr//等价getComputedStyle(obj).attr//等价//getComputedStyle(obj)[\"attr\"] 设置CSS属性值 style对象 attr表示CSS属性名，采用的同样是“骆驼峰”型。 obj.style.attr = &quot;值&quot;obj.style.attr = &quot;值&quot;; cssText属性 同时设置多个CSS属性 obj表示DOM对象，cssText的值是一个字符串 这个字符串中的属性名不再使用骆驼峰型写法，而是使用平常的CSS写法 obj.style.cssText = &quot;值&quot;obj.style.cssText = &quot;值&quot;; 2.2.3 DOM遍历 查找父元素 obj.parentNode 查找子元素 childNodes、firstChild、lastChild childNodes获取的是所有的子节点，包括元素节点以及文本节点。 比较麻烦，一般不使用。 children、firstElementChild、lastElementChild 查找兄弟元素 previousSibling、nextSibling previousSibling查找前一个兄弟节点，nextSibling查找后一个兄弟节点。 比较麻烦同不建议使用。 previousElementSibling、nextElementSibling 2.2.4 innerHTML和innerText innerHTML innerHTML获取的是元素内部所有的内容 innerText innerText获取的仅仅是文本内容。 后面的字符串可以换行写，在字符串每一行后面加上个反斜杠（\\） oDiv.innerHTML = &#x27;&lt;span&gt;绿叶学习网&lt;/span&gt;\\ &lt;span style=&quot;color:hotpink;&quot;&gt;JavaScript&lt;/span&gt;\\ &lt;span style=&quot;color:deepskyblue;&quot;&gt;入门教程&lt;/oDiv.innerHTML = &#x27;&lt;span&gt;绿叶学习网&lt;/span&gt;\\ &lt;span style=&quot;color:hotpink;&quot;&gt;JavaScript&lt;/span&gt;\\ &lt;span style=&quot;color:deepskyblue;&quot;&gt;入门教程&lt;/span>&#x27;; 2.3 事件 2.3.1 事件调用方式 在实际开发中，更倾向于在script标签中调用事件。 在script标签中调用 obj.事件名 = function()obj.事件名 = function()&#123; ……&#125;; 在元素中调用 &lt;head&gt;&lt;meta charset=&quot;utf-8&quot; /&gt;&lt;title&gt;&lt;/title&gt;&lt;script&gt; function alertMes() &#123; alert(&quot;绿叶学习网&quot;); &#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;input type=&quot;button&quot; onclick=&quot;alertMes()&quot; value=&quot;弹出&quot; /&gt;&lt;/body&gt; //或者&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;button&quot; onclick=&quot;alert(&#x27;绿叶学习网&#x27;)&quot; value=&quot;弹出&quot; /&gt;&lt;/&lt;head&gt;&lt;meta charset=&quot;utf-8&quot; /&gt;&lt;title&gt;&lt;/title&gt;&lt;script&gt; function alertMes() &#123; alert(&quot;绿叶学习网&quot;); &#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;input type=&quot;button&quot; onclick=&quot;alertMes()&quot; value=&quot;弹出&quot; /&gt;&lt;/body&gt; //或者&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;button&quot; onclick=&quot;alert(&#x27;绿叶学习网&#x27;)&quot; value=&quot;弹出&quot; /&gt;&lt;/body> 2.3.2 鼠标事件 onmouseover和onmouseout分别用于控制鼠标“移入”和“移出”这两种状态。例如在下拉菜单导航中，鼠标移入会显示二级导航，鼠标移出则会收起二级导航。 事件 说明 onclick 鼠标单击事件 onmouseover 鼠标移入事件 onmouseout 鼠标移出事件 onmousedown 鼠标按下事件 onmouseup 鼠标松开事件 onmousemove 鼠标移动事件 2.3.3 键盘事件 onkeydown表示键盘按下一瞬间所触发的事件，而onkeyup表示键盘松开一瞬间所触发的事件。对于键盘来说，都是先有“按下”，才有“松开”，也就是onkeydown发生在onkeyup之前。 键盘按下：onkeydown 键盘松开：onkeyup 2.3.3 表单事件 onfocus和onblur onfocus表示获取焦点时触发的事件，而onblur表示失去焦点时触发的事件 具有“获取焦点”和“失去焦点”特点的元素只有2种。 表单元素（单选框、复选框、单行文本框、多行文本框、下拉列表） 超链接 focus()是一个方法，仅仅用于让元素获取焦点。而onfocus是一个属性，它用于事件操作 onselect 当我们选中“单行文本框”或“多行文本框”中的内容时，就会触发onselect事件。 select()跟onselect是不一样的。 onchange onchange事件常用于“具有多个选项的表单元素”。 单选框选择某一项时触发。 复选框选择某一项时触发。 下拉列表选择某一项时触发。 2.3.4 编辑事件 oncopy 使用oncopy事件来防止页面内容被复制。 document.body.oncopy = function () &#123; return document.body.oncopy = function () &#123; return false;&#125; onselectstart 使用onselectstart事件来防止页面内容被选取。 document.body.onselectstart=function()&#123; return document.body.onselectstart=function()&#123; return false;&#125; oncontextmenu 使用oncontextmenu事件来禁止鼠标右键。 document.oncontextmenu = function () &#123; return document.oncontextmenu = function () &#123; return false;&#125; 2.3.5页面事件 onload 一般来说，只有在想要“获取页面中某一个元素”的时候才会用到 浏览器从上到下解析到window.onload时，就会先不解析window.onload里面的代码，而是继续往下解析，直到把整个HTML文档解析完了之后才会回去执行window.onload里面的代码。 window.onload = function(window.onload = function()&#123; ……&#125; onbeforeunload 离开页面之前触发的一个事件。 window.onbeforeunload = function(window.onbeforeunload = function()&#123; ……&#125; 2.4 事件进阶 2.4.1 添加事件 事件处理器 事件处理器是没办法为一个元素添加多个相同事件的。 oBtn.onclick = function()&#123;……&#125;oBtn.onclick = function()&#123;……&#125;; 解除事件： obj.事件名 = null;//例子&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; window.onload = function () &#123; var oP = document.getElementById(&quot;content&quot;); var oBtn = document.getElementById(&quot;btn&quot;); //为P元素添加事件 oP.onclick = changeColor; //点击按钮后，为p元素解除事件 oBtn.addEventListener(&quot;click&quot;, function () &#123; oP.onclick = null; &#125;, false); function changeColor() &#123; this.style.color = obj.事件名 = null;//例子&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; window.onload = function () &#123; var oP = document.getElementById(&quot;content&quot;); var oBtn = document.getElementById(&quot;btn&quot;); //为P元素添加事件 oP.onclick = changeColor; //点击按钮后，为p元素解除事件 oBtn.addEventListener(&quot;click&quot;, function () &#123; oP.onclick = null; &#125;, false); function changeColor() &#123; this.style.color = \"hotpink\"; &#125; &#125; 事件监听器 绑定事件： //fn是一个函数名oBtn.addEventListener(&quot;click&quot;, alertMes, false);function alertMes() &#123; alert(&quot;JavaScript&quot;);&#125;//fn是一个匿名函数oBtn.addEventListener(&quot;click&quot;, function () &#123; alert(&quot;JavaScript&quot;);&#125;, //fn是一个函数名oBtn.addEventListener(&quot;click&quot;, alertMes, false);function alertMes() &#123; alert(&quot;JavaScript&quot;);&#125;//fn是一个匿名函数oBtn.addEventListener(&quot;click&quot;, function () &#123; alert(&quot;JavaScript&quot;);&#125;, false); 使用多次window.onload，但是会发现JavaScript只执行最后一次window.onload。可以使用addEventListener()来实现。 window.addEventListener(&quot;load&quot;,function()&#123;……&#125;,window.addEventListener(&quot;load&quot;,function()&#123;……&#125;,false); 解除事件： obj.removeEventListener(type , fn , false);obj.removeEventListener(type , fn , false);//于removeEventListener()方法来说，fn必须是一个函数名，而不能是一个函数。 2.4.2 event对象 属性 说明 type 事件类型 keyCode 键码值 shiftKey 是否按下shift键 ctrlKey 是否按下Ctrl键 altKey 是否按下Alt键 按键 键码 W（上） 87 S（下） 83 A（左） 65 D（右） 68 ↑ 38 ↓ 40 ← 37 → 39 e.keyCode返回的是一个数字，而e.shiftKey、e.ctrlKey、e.altKey返回的都是布尔值（true或false） 2.4.3 this 哪个DOM对象（元素节点）调用了this所在的函数，那么this指向的就是哪个DOM对象。 在事件函数中，想要使用当前元素节点，我们尽量使用this来代替oBtn、oLi[i]等等这种DOM对象的写法。 2.5 windows对象 一个窗口就是一个window对象，这个窗口里面的HTML文档就是一个document对象，document对象是window对象的子对象。 子对象 说明 document 文档对象，用于操作页面元素 location 地址对象，用于操作URL地址 navigator 浏览器对象，用于获取浏览器版本信息 history 历史对象，用于操作浏览历史 screen 屏幕对象，用于操作屏幕宽度高度 方法 说明 alert() 提示对话框 confirm() 判断对话框 prompt() 输入对话框 open() 打开窗口 close() 关闭窗口 setTimeout() 开启“一次性”定时器 clearTimeout() 关闭“一次性”定时器 setInterval() 开启“重复性”定时器 clearInterval() 关闭“重复性”定时器 2.5.1 窗口操作 打开窗口 window.window.open(url, target) url指的是新窗口的地址，如果url为空，则表示打开一个空白窗口。空白窗口很有用，我们可以使用document.write()往空白窗口输出文本，甚至输出一个HTML页面。 target表示打开方式，它的取值跟a标签中target属性的取值是一样的，常用取值有两个：_blank和_self。当target为“_blank（默认值）”，表示在新窗口打开；当target为“_self”时，表示在当前窗口打开。 如果你打开的是另外一个域名下面的页面，是不允许操作新窗口的内容的 //举例：往空白窗口输出一个页面&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; window.onload = function () &#123; var oBtn = document.getElementById(&quot;btn&quot;); var opener = null; oBtn.onclick = function () &#123; opener = window.open(); var strHtml = &#x27;&lt;!DOCTYPE html&gt;\\ &lt;html&gt;\\ &lt;head&gt;\\ &lt;title&gt;&lt;/title&gt;\\ &lt;/head&gt;\\ &lt;body&gt;\\ &lt;strong&gt;小心偷影子的人，他会带走你的心。&lt;/strong&gt;\\ &lt;/body&gt;\\ &lt;/html&gt;&#x27;; opener.document.write(strHtml); &#125;; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input id=&quot;btn&quot; type=&quot;button&quot; value=&quot;打开&quot; /&gt;&lt;///举例：往空白窗口输出一个页面&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; window.onload = function () &#123; var oBtn = document.getElementById(&quot;btn&quot;); var opener = null; oBtn.onclick = function () &#123; opener = window.open(); var strHtml = &#x27;&lt;!DOCTYPE html&gt;\\ &lt;html&gt;\\ &lt;head&gt;\\ &lt;title&gt;&lt;/title&gt;\\ &lt;/head&gt;\\ &lt;body&gt;\\ &lt;strong&gt;小心偷影子的人，他会带走你的心。&lt;/strong&gt;\\ &lt;/body&gt;\\ &lt;/html&gt;&#x27;; opener.document.write(strHtml); &#125;; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input id=&quot;btn&quot; type=&quot;button&quot; value=&quot;打开&quot; /&gt;&lt;/body> 关闭窗口 window.window.close() window.close()方法是没有参数的。 2.5.2 对话框 alert() 在alert()中实现文本换行，用的是\\n。 alert(alert(\"提示文字\") confirm() onfirm()对话框不仅提示文字，还提供确认。 confirm(confirm(\"提示文字\") prompt() prompt()对话框不仅提示文字，还返回一个字符串。 prompt(prompt(\"提示文字\") 方法 说明 alert() 仅提示文字，没有返回值 confirm() 具有提示文字，返回“布尔值”（true或false） prompt() 具有提示文字，返回“字符串” 2.5.3 定时器 setTimeout()和clearTimeout() 使用setTimeout()方法来“一次性”地调用函数，并且可以使用clearTimeout()来取消执行setTimeout()。 setTimeout(code, time);//两种写法setTimeout(alertMes, 2000)setTimeout(setTimeout(code, time);//两种写法setTimeout(alertMes, 2000)setTimeout(\"alertMes()\", 2000) 参数code可以是一段代码，可以是一个函数，也可以是一个函数名。 参数time是时间，单位为毫秒，表示要过多长时间才执行code中的代码。 setInterval()和clearInterval() 使用setInterval()方法来“重复性”地调用函数，并且可以使用clearInterval()来取消执行setInterval()。 setInterval(code, time);//写法//方式1setInterval(function()&#123;…&#125;, 2000)//方式2setInterval(alertMes, 2000)//方式3setInterval(setInterval(code, time);//写法//方式1setInterval(function()&#123;…&#125;, 2000)//方式2setInterval(alertMes, 2000)//方式3setInterval(\"alertMes()\", 2000) PS.每次点击【开始】按钮的一开始就要清除一次定时器 2.5.4 location对象 属性 说明 href 当前页面地址 search 当前页面地址“？”后面的内容 hash 当前页面地址“#”后面的内容 window.location.href 获取或设置当前页面的地址。 window.location.search 获取和设置当前页面地址“?”后面的内容。 window.location.hash 获取和设置当前页面地址井号（#）后面的内容。 2.5.5 navigator对象window.navigator.userAgent IE含有“MSIE”；Chrome含有“Chrome”；而Firefox含有“Firefox”。 &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; if (window.navigator.userAgent.indexOf(&quot;MSIE&quot;) != -1) &#123; alert(&quot;这是IE&quot;); &#125;else if (window.navigator.userAgent.indexOf(&quot;Chrome&quot;) != -1) &#123; alert(&quot;这是Chrome&quot;); &#125;else if (window.navigator.userAgent.indexOf(&quot;Firefox&quot;) != -1) &#123; alert(&quot;这是Firefox&quot;); &#125; &lt;/script&gt;&lt;/&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; if (window.navigator.userAgent.indexOf(&quot;MSIE&quot;) != -1) &#123; alert(&quot;这是IE&quot;); &#125;else if (window.navigator.userAgent.indexOf(&quot;Chrome&quot;) != -1) &#123; alert(&quot;这是Chrome&quot;); &#125;else if (window.navigator.userAgent.indexOf(&quot;Firefox&quot;) != -1) &#123; alert(&quot;这是Firefox&quot;); &#125; &lt;/script&gt;&lt;/head> indexOf()用于找出“某个字符串”在字符串中首次出现的位置，如果找不到就返回-1 2.6 document对象 2.6.1 document对象属性 属性 说明 document.title 获取文档的title document.body 获取文档的body document.forms 获取所有form元素 document.images 获取所有img元素 document.links 获取所有a元素 document.cookie 文档的cookie document.URL 当前文档的URL document.referrer 返回使浏览者到达当前文档的URL document.URL 获取当前页面的地址。 document.URL只能获取不能设置；window.location.href既可以获取也可以设置。 document.referrer 获取用户在访问当前页面之前所在页面的地址 2.6.2 document对象方法 方法 说明 document.getElementById() 通过id获取元素 document.getElementsByTagName() 通过标签名获取元素 document.getElementsByClassName() 通过class获取元素 document.getElementsByName() 通过name获取元素 document.querySelector() 通过选择器获取元素，只获取第1个 document.querySelectorAll() 通过选择器获取元素，获取所有 document.createElement() 创建元素节点 document.createTextNode() 创建文本节点 document.write() 输出内容 document.writeln() 输出内容并换行 document.write() &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; document.write(&#x27;&lt;div style=&quot;color:hotpink;&quot;&gt;绿叶学习网&lt;/div&gt;&#x27;); &lt;/script&gt;&lt;/&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; document.write(&#x27;&lt;div style=&quot;color:hotpink;&quot;&gt;绿叶学习网&lt;/div&gt;&#x27;); &lt;/script&gt;&lt;/head> document.write()不仅可以输出文本，还可以输出标签。此外，document.write()都是往body标签内输出内容的。 writeln() writeln()方法会在输出内容后面多加上一个换行符\\n。","categories":[{"name":"前端笔记","slug":"前端笔记","permalink":"https://csong.vercel.app/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://csong.vercel.app/tags/JS/"}]}],"categories":[{"name":"前端笔记","slug":"前端笔记","permalink":"https://csong.vercel.app/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://csong.vercel.app/tags/Markdown/"},{"name":"CSS3","slug":"CSS3","permalink":"https://csong.vercel.app/tags/CSS3/"},{"name":"HTML5","slug":"HTML5","permalink":"https://csong.vercel.app/tags/HTML5/"},{"name":"html","slug":"html","permalink":"https://csong.vercel.app/tags/html/"},{"name":"CSS","slug":"CSS","permalink":"https://csong.vercel.app/tags/CSS/"},{"name":"JS","slug":"JS","permalink":"https://csong.vercel.app/tags/JS/"}]}