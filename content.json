{"meta":{"title":"CSONG","subtitle":"","description":"","author":"csong","url":"https://csong01.github.io","root":"/"},"pages":[{"title":"bangumis","date":"2021-03-25T09:37:18.000Z","updated":"2021-04-03T06:41:25.870Z","comments":true,"path":"bangumis/index.html","permalink":"https://csong01.github.io/bangumis/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-04-03T03:17:49.000Z","updated":"2021-04-03T03:22:41.922Z","comments":false,"path":"categories/index.html","permalink":"https://csong01.github.io/categories/index.html","excerpt":"","text":""},{"title":"link","date":"2021-04-03T06:24:34.000Z","updated":"2021-04-03T06:24:50.366Z","comments":true,"path":"link/index.html","permalink":"https://csong01.github.io/link/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-04-03T03:19:15.000Z","updated":"2021-04-03T03:22:33.245Z","comments":false,"path":"tags/index.html","permalink":"https://csong01.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"CSS入门学习笔记","slug":"CSS入门学习","date":"2021-04-03T03:23:43.000Z","updated":"2021-04-03T06:36:32.623Z","comments":true,"path":"2021/04/03/css-ru-men-xue-xi/","link":"","permalink":"https://csong01.github.io/2021/04/03/css-ru-men-xue-xi/","excerpt":"","text":"CSS选择器（1）元素选择器 div&#123;color:red;&#125; 绿叶学习网 绿叶学习网 绿叶学习网 绿叶学习网 （2）id选择器 &lt;head> &lt;meta charset=\"utf-8\" /> &lt;title>&lt;/title> &lt;style type=\"text/css\"> #lvye&amp;#123;color:red;&amp;#125; &lt;/style> &lt;/head> &lt;body> &lt;div>绿叶学习网&lt;/div> &lt;div id=\"lvye\">绿叶学习网&lt;/div> &lt;div>绿叶学习网&lt;/div> &lt;/body> （3）class选择器 &lt;head> &lt;meta charset=\"utf-8\" /> &lt;title>&lt;/title> &lt;style type=\"text/css\"> .lv&amp;#123;color:red;&amp;#125; &lt;/style> &lt;/head> &lt;body> &lt;div>绿叶学习网&lt;/div> &lt;div class=\"lv\">绿叶学习网&lt;/div> &lt;div class=\"lv\">绿叶学习网&lt;/div> &lt;/body> （4）后代选择器 &lt;head> &lt;meta charset=\"utf-8\" /> &lt;title>&lt;/title> &lt;style type=\"text/css\"> #father1 div &amp;#123;color:red;&amp;#125; #father2 span&amp;#123;color:blue;&amp;#125; &lt;/style> &lt;/head> &lt;body> &lt;div id=\"father1\"> &lt;div>绿叶学习网&lt;/div> &lt;div>绿叶学习网&lt;/div> &lt;/div> &lt;div id=\"father2\"> &lt;p>绿叶学习网&lt;/p> &lt;p>绿叶学习网&lt;/p> &lt;span>绿叶学习网&lt;/span> &lt;/div> &lt;/body> （5）群组选择器 &lt;head> &lt;meta charset=\"utf-8\" /> &lt;title>&lt;/title> &lt;style type=\"text/css\"> #lvye,.lv,span&amp;#123;color:red;&amp;#125; &lt;/style> &lt;/head> &lt;body> &lt;div id=\"lvye\">绿叶学习网&lt;/div> &lt;div>绿叶学习网&lt;/div> &lt;p>绿叶学习网&lt;/p> &lt;p class=\"lv\">绿叶学习网&lt;/p> &lt;span>绿叶学习网&lt;/span> &lt;/body> 字体类型 如果我们不定义font-family，浏览器默认字体类型一般是“宋体”。 在实际开发中，比较美观的中文字体有微软雅黑、苹方，英文字体有Times New Roman 、Arial和Verdana，注意带引号的规则。 颜色 关键字，指的就是颜色的英文名称，如red、blue、green等 #000000是黑色，#FFFFFF是白色 分段书写提高可读性 p &amp;#123; font-family:微软雅黑; /*字体类型为微软雅黑*/ font-size:14px; /*字体大小为14px*/ font-weight:bold; /*字体粗细为bold*/ color:red; /*字体颜色为red*/ &amp;#125; 文本首行缩进 中文段落首行一般需要缩进两个字的空间。如果想要实现这个效果，text-indent值应该是font-size值的2倍 文本修饰 我们都知道超链接（a元素）默认样式有下划线，如“&lt;a href=&quot;http://www.lvyestudy.com&quot;&gt;绿叶学习网&lt;/a&gt;”这一句代码，浏览器效果如下图所示。 那么该如何去掉a元素中的下划线呢？这个时候，text-decoration:none; 就派上用场了。 a&#123;text-decoration:none;&#125; 样式边框 div元素可以定义边框，img元素可以定义边框，table元素可以定义边框，span元素同样也可以定义边框。 border: 1px solid red; 上面代码其实等价于： border-width: 1px; border-style: solid; border-color: red; 列表 由于列表项符号比较丑，因此在实际开发中，大多数情况下我们都需要使用list-style-type:none;去掉。 ul{}中的样式只能作用于列表，而不能作用于超链接，要用a{}，反之亦然。 图片 在实际开发中，如果你需要多大的图片，就用Photoshop制作多大的图片。不建议使用一张大图片，然后再借助width和height来改变大小。因为一张大图片体积更大，会使页面加载速度变慢。 “vertical-align属性定义周围的行内元素或文本相对于该元素的垂直方式” 背景 color属性用于定义“文本颜色”，而background-color属性用于定义“背景颜色”。 &lt;style type=\"text/css\"> p &amp;#123; color:white; background-color: hotpink; &amp;#125; &lt;/style> 背景图片跟图片是不一样的，背景图片是使用CSS来实现，而图片是使用HTML来实现。 没有给div元素定义width和height，此时div元素的宽度和高度都为0，那背景图片不会显示。 不加引号引用更简洁。 /*方式2：路径没加引号*/ background-image: url(img/haizei.png); :hover伪类应用广泛。 盒子模型 所有的元素都可以看成一个盒子。 只有块元素才可以设置width和height，行内元素是无法设置width和height的。（我们这里不考虑inline-block元素）。 对于border属性，更多使用的是简写形式： border: 1px solid red; padding属性在实际开发中，往往使用简写形式（与margin相同）： padding:20px表示4个方向的内边距都是20px。 padding:20px 40px表示padding-top和padding-bottom为20px，padding-right和padding-left为40px。 padding: 像素值1 像素值2 像素值3 像素值4; 分别对应padding-top，padding-right，padding-bottom，padding-left（顺时针记忆） 浮动 如果你想要实现两列并排或者多列并排效果时，首先考虑的是使用浮动来实现。 浮动可以形成并列的效果，但如果影响纵向的排列结构则使用clear:both来消除这样的影响。 一般都是在浮动元素后面再增加一个空元素，然后为这个空元素定义clear:both来清除浮动，而纵向的位置由margin确定。 &lt;head> &lt;meta charset=\"utf-8\" /> &lt;title>&lt;/title> &lt;style type=\"text/css\"> /*定义父元素样式*/ #father &amp;#123; width:300px; background-color:#0C6A9D; border:1px solid silver; &amp;#125; /*定义子元素样式*/ #father div &amp;#123; padding:10px; margin:15px; &amp;#125; #son1 &amp;#123; background-color:hotpink; float:left; /*左浮动*/ &amp;#125; #son2 &amp;#123; background-color:#FCD568; float:right; /*右浮动*/ &amp;#125; .clear&amp;#123;clear:both;&amp;#125; &lt;/style> &lt;/head> &lt;body> &lt;div id=\"father\"> &lt;div id=\"son1\">box1&lt;/div> &lt;div id=\"son2\">box2&lt;/div> &lt;div class=\"clear\">&lt;/div> &lt;/div> &lt;/body> 不注明块元素的宽和高是无法添加背景颜色的。按照一定的顺序如宽高颜色位置等。 一般构思时是先将要展现的整体看作一个元素，不为其设置margin，如果对外框有要求时再设置，如： &lt;!DOCTYPE html> &lt;html> &lt;head> &lt;meta charset=\"utf-8\" /> &lt;title>&lt;/title> &lt;style type=\"text/css\"> #wrapper &amp;#123; width:800px; height:600px; &amp;#125; #header,#footer &amp;#123; height:100px; background-color:lightskyblue; &amp;#125; .main-left,.main-right &amp;#123; height:380px; margin-top:10px; margin-bottom:10px; background-color:hotpink; &amp;#125; .main-left &amp;#123; float:left; width:595px; &amp;#125; .main-right &amp;#123; float:right; width:195px; &amp;#125; .clear&amp;#123;clear:both;&amp;#125; &lt;/style> &lt;/head> &lt;body> &lt;div id=\"wrapper\"> &lt;div id=\"header\">&lt;/div> &lt;div id=\"main\"> &lt;div class=\"main-left\">&lt;/div> &lt;div class=\"main-right\">&lt;/div> &lt;div class=\"clear\">&lt;/div> &lt;/div> &lt;div id=\"footer\">&lt;/div> &lt;/div> &lt;/body> &lt;/html> 定位 position:fixed;使得元素成为固定定位元素，接着使用top、bottom、left和right这4个属性来设置元素相对浏览器的位置，这4个值的参考对象是浏览器的4条边，不必全用到。 position:relative;来实现相对定位，相对定位元素的位置是相对于原始位置而言。 position:absolute;来实现绝对定位，使用top、bottom、left和right这4个属性来设置元素相对浏览器的位置。 一般只使用其中两个。 在实际开发中，优先使用浮动布局。如果实现不了，再考虑定位布局。因为定位布局大多数情况会使得元素完全脱离原来的位置，使得布局不可控。","categories":[{"name":"前端笔记","slug":"前端笔记","permalink":"https://csong01.github.io/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://csong01.github.io/tags/CSS/"}]},{"title":"HTML入门学习笔记","slug":"HTML入门学习笔记","date":"2021-04-03T03:23:43.000Z","updated":"2021-04-03T04:00:52.290Z","comments":true,"path":"2021/04/03/html-ru-men-xue-xi-bi-ji/","link":"","permalink":"https://csong01.github.io/2021/04/03/html-ru-men-xue-xi-bi-ji/","excerpt":"","text":"对功能模块代码进行注释尤为重要 文字标签 标签 语义 说明 strong strong（强调） 粗体 em emphasized（强调） 斜体 sup superscripted（上标） 上标 sub subscripted（下标） 下标 自闭合标签 标签 说明 定义网页的信息（供搜索引擎查看） 引入“外部CSS文件” 换行标签 水平线标签 图片标签 表单标签 有序列表标签&lt;ol type=\"属性值\"> &lt;li>列表项&lt;/li> &lt;li>列表项&lt;/li> &lt;li>列表项&lt;/li> &lt;/ol 无序列表标签&lt;ul> &lt;li>列表项&lt;/li> &lt;li>列表项&lt;/li> &lt;li>列表项&lt;/li> &lt;/ul> 定义列表标签&lt;dl> &lt;dt>HTML&lt;/dt> &lt;dd>制作网页的标准语言，控制网页的结构&lt;/dd> &lt;dt>CSS&lt;/dt> &lt;dd>层叠样式表，控制网页的样式&lt;/dd> &lt;dt>JavaScript&lt;/dt> &lt;dd>脚本语言，控制网页的行为&lt;/dd> &lt;/dl> 表格标签 完整语义化及合并行列的用法 &lt;!DOCTYPE html> &lt;html> &lt;head> &lt;meta charset=\"utf-8\" /> &lt;title>编程题&lt;/title> &lt;style type=\"text/css\"> table,tr,td&amp;#123;border:1px solid silver;&amp;#125; &lt;/style> &lt;/head> &lt;body> &lt;table> &lt;caption>学生成绩表&lt;/caption> &lt;thead> &lt;tr> &lt;th>姓名&lt;/th> &lt;th>性别&lt;/th> &lt;th>成绩&lt;/th> &lt;/tr> &lt;/thead> &lt;tbody> &lt;tr> &lt;td>张三&lt;/td> &lt;td>男&lt;/td> &lt;td>250&lt;/td> &lt;/tr> &lt;tr> &lt;td>李四&lt;/td> &lt;td>男&lt;/td> &lt;td>520&lt;/td> &lt;/tr> &lt;/tbody> &lt;tfoot> &lt;tr> &lt;td>平均分&lt;/td> &lt;td colspan=\"2\">385&lt;/td> &lt;/tr> &lt;/tfoot> &lt;/table> &lt;/body> &lt;/html> 效果图 图片标签&lt;body> &lt;img src=\"img/1.jpg\" alt=\"\"/>&lt;br/> &lt;img src=\"img/2.png\" alt=\"\"/>&lt;br/> &lt;img src=\"img/3.gif\" alt=\"\"/> &lt;/body> a标签(超链接)&lt;body> &lt;a href=\"http://www.lvyestudy.com\" target=\"_blank\">绿叶学习网&lt;/a> &lt;/body> 表单单选框，多选框的Name属性不要忘。暂时可以用该代码来调整位置。 &amp;nbsp;","categories":[{"name":"前端笔记","slug":"前端笔记","permalink":"https://csong01.github.io/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"html","slug":"html","permalink":"https://csong01.github.io/tags/html/"}]},{"title":"JS入门学习笔记","slug":"js入门学习笔记","date":"2021-04-03T03:23:43.000Z","updated":"2021-04-03T06:36:54.438Z","comments":true,"path":"2021/04/03/js-ru-men-xue-xi-bi-ji/","link":"","permalink":"https://csong01.github.io/2021/04/03/js-ru-men-xue-xi-bi-ji/","excerpt":"","text":"引入方式 对于CSS来说，外部CSS文件只能在head中引入。不过对于JavaScript来说，外部JavaScript文件不仅可以在head中引入，还可以在body中引入。 外部引用此外还需要注意一点，引入外部CSS文件使用的是“link标签”，而引入外部JavaScript文件使用的是“script标签”。 &lt;!--引入外部CSS--> &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"index.css\"/> &lt;!--引入外部JavaScript--> &lt;script src=\"js/index.js\">&lt;/script> 内部引用把HTML代码和JavaScript代码放在同一个文件中。其中JavaScript代码写在标签对内。 &lt;head> &lt;meta charset=\"utf-8\" /> &lt;title>&lt;/title> &lt;!--1、在head中引入--> &lt;script> …… &lt;/script> &lt;/head> 内部JavaScript文件不仅可以在head中引入，也可以在body中引入。一般情况下，我们都是在head中引入。 元素属性JavaScript在元素的“事件属性”中直接编写JavaScript或调用函数。 &lt;!DOCTYPE html> &lt;html> &lt;head> &lt;meta charset=\"utf-8\" /> &lt;title>&lt;/title> &lt;/head> &lt;body> &lt;input type=\"button\" value=\"按钮\" onclick=\"alert('绿叶学习，给你初恋般的感觉')\"/> &lt;/body> &lt;/html> 1.基本语法 （1）document.write()：在页面输出一个内容。（2）alert()：弹出一个对话框。 alert(\"I love JavaScript!\"); 格式：注意有分号以及双引号，在JavaScript中，每一条语句都是英文分号（;）作为结束符。 1.1 变量 1.1.1命名 变量由字母、下划线、$或数字组成，并且第一个字母必须是“字母、下划线或$”。 变量不能是系统关键字和保留字。 变量的命名一定要区分大小写 1.1.2关键字及保留字 break else new typeof case false null var catch for switch void continue function this while default if throw with delete in true do instanceof try abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public alert eval location open array focus math outerHeight blur funtion name parent boolean history navigator parseFloat date image number regExp document isNaN object status escape length onLoad string 1.1.3使用 所有JavaScript变量都是由var声明 一个var也可以同时声明多个变量名，其中变量名之间必须用英文逗号（,）隔开。 var a=10,b=20,c=30; 常量名全部大写 1.2 数据类型 1.2.1基本数据类型 数字 JavaScript中的数字是不区分“整型（int）”和“浮点型（float）”的。 在JavaScript中，所有变量都是用var声明。 字符串 字符串都是用英文单引号或英文双引号（注意都是英文）括起来的。 单引号括起来的字符串中可以包含双引号，双引号括起来的字符串中可以包含单引号。单引号括起来的字符串中，不能含有单引号，只能含有双引号。同样的道理，双引号括起来的字符串中，也不能含有双引号，只能含有单引号。 document.write()这个方法本身就是用来输出一个字符串的。 布尔值 未定义值 一个变量虽然已经用var来声明了，但是并没有对这个变量进行赋值，未定义值用undefined表示。 空值 空值用null表示。如果一个变量的值等于null，如“var n = null”，则表示系统没有给这个变量n分配内存空间。 1.3 运算符 注意%求余 字符串 + 数字 = 字符串 document.write(\"a+b=\" + n1 + \"&lt;br/>\"); 1.3.1自增运算符 i++(i–同理) i=1; j=i++; //等价于： i=1; j=i; i=i+1; ++i(–i同理) i=1; j=++i; //上面这段代码等价于： i=1; i=i+1; j=i; 1.3.2比较运算符!= 不等于 1.3.3逻辑运算符 &amp;&amp; “与”运算 || “或”运算 ! “非”运算 1.3.4条件运算符var a = 条件 ? 表达式1 : 表达式2; 当条件为true时，我们选择的是“表达式1”,当条件为false时，我们选择的是“表达式2”。 1.4 类型转换 1.4.1显式类型转换将字符串转换为数字： Number() 将任何“数字型字符串”（只有数字的字符串）转换为数字。 NaN指的是“Not a Number（非数字） var a = Number(&quot;2018&quot;) + 1000; parseInt()和parseFloat() parseInt()会从左到右进行判断，如果第1个字符是数字，则继续判断，直到出现非数字为止（小数点也是非数字）；如果第1个字符是非数字，则直接返回NaN。 第1个字符是加号（+）或减号（-），也就是非数字，parseInt()同样也是可以转换的。 同样的，parseFloat()也有这个特点，但能识别小数点。 将数字转换为字符串 与空字符串相加 **toString() a.toString()表示将a转换为字符串 在实际开发中，将数字转换为字符串，直接跟一个字符串相加 1.5 转义字符 转义字符 说明 \\&#39; 英文单引号 \\&quot; 英文双引号 \\n 换行符 如果是在document.write()中换行，则应该用： document.write(&quot;绿叶，&lt;br/&gt;初恋般的感觉~&quot;); 如果是在alert()中换行，则应该用：\\n alert(&quot;绿叶，\\n初恋般的感觉&quot;); \\n是转义字符，一般用于对话框文本的换行。这里如果用就无法实现了。 1.6 注释 HTML &lt;!--这是HTML注释--&gt; CSS /*这是CSS注释*/ JS //这是JavaScript注释（单行） /* 这是JavaScript注释（多行） 这是JavaScript注释（多行） 这是JavaScript注释（多行） */ 1.7 流程控制 1.7.1选择结构 if 单向选择：if… if(条件) &#123; …… &#125; 双向选择：if…else… if(条件) &#123; …… &#125; else &#123; …… &#125; 可以使用三目运算符来代替。 多向选择：if…else if…else… if(条件1) &#123; //当条件1为true时执行的代码 &#125; else if(条件2) &#123; //当条件2为true时执行的代码 &#125; else &#123; //当条件1和条件2都为false时执行的代码 &#125; if语句的嵌套 switch switch语句会根据“判断值”来判断，然后来选择使用哪一个case。如果每一个case的取值都不符合，那就执行default的语句。 switch(判断值) &#123; case 取值1: 语块1;break; case 取值2: 语块2;break; …… case 取值n: 语块n;break; default: 语句块n+1; &#125; 1.7.2循环结构 while sum += n;等价于sum=sum+n;，而n+=2;等价于n=n+2;。在实际开发中，一般使用简写形式多。 while(条件) &#123; //当条件为true时，循环执行 &#125; do…while 首先是无条件执行循环体一次，然后再判断是否符合条件。如果符合条件，则重复执行循环体；如果不符合条件，则退出循环。 句结尾处括号后有一个分号（;） 在实际开发中，一般都是用while语句 do &#123; …… &#125;while(条件); for for(初始化表达式; 条件表达式; 循环后操作) &#123; …… &#125; //循环后操作，指的是执行循环体（也就是大括号中的程序）后的操作 在循环体中，我们使用“拼接字符串”（也就是用加号拼接）的方式来构造一个“HTML字符串”。 for (var i = 2; i &lt; 5; i++) &#123; var str = &quot;&lt;p style=&#39;font-size:&quot; + i * 5 + &quot;px&#39;&gt;总有刁民想害朕&lt;/p&gt;&quot;; document.write(str); &#125; 1.8 函数 1.8.1定义函数function 函数名(参数1 , 参数2 ,..., 参数n) &#123; …… &#125; //有返回值的函数 function 函数名(参数1 , 参数2 ,..., 参数n) &#123; …… return 返回值; &#125; 全局变量 全局变量在任何地方都可以用。 局部变量 局部变量只能在函数中使用 1.8.2函数的调用 直接调用 在表达式中调用 在超链接中调用 &lt;a href=&quot;javascript:函数名&quot;&gt;&lt;/a&gt; //举例 &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; function expressMes() &#123; alert(&quot;她：我爱helicopter。\\n我：oh~my，= =?!&quot;); &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;a href=&quot;javascript:expressMes()&quot;&gt;表白对话&lt;/a&gt; &lt;/body&gt; 1.8.3嵌套函数1.8.4内置函数 函数 说明 parseInt() 提取字符串中的数字，只限提取整数 parseFloat() 提取字符串中的数字，可以提取小数 isFinite() 判断某一个数是否是一个有限数值 isNaN() 判断一个数是否是NaN值 escape() 对字符串进行编码 unescape() 对字符串进行解码 eval() 把一个字符串当做一个表达式一样去执行 1.8.5内置对象 length 获取字符串的长度 var str = &quot;I love lvye!&quot;; document.write(&quot;字符串长度是：&quot; + str.length); toLowerCase()、toUpperCase() 将大写字符串转化为小写字符串、将小写字符串转化为大写字符串。 字符串名.toLowerCase() 字符串名.toUpperCase() charAt() 获取字符串中的某一个字符。 字符串第1个字符的下标是0，第2个字符的下标是1。 在字符串中，空格也是作为一个字符来处理。 两个字符之间比较的是ASCII码的大小。 字符串名.charAt(n) //例如 document.write(&quot;第1个字符是：&quot; + str.charAt(0) + &quot;&lt;br/&gt;&quot;); document.write(&quot;第7个字符是：&quot; + str.charAt(6)); substring() 截取字符串的某一部分。 start和end都是整数，一般都是从0开始，其中end大于start。 substring(start,end)截取范围为：[start,end)，也就是包含start，不包含end。其中，end可以省略。当end省略时，截取的范围为：start到结尾。 对于字符串操作来说，凡是涉及下标，都是从0开始。 字符串名.substring(start, end) replace() 替换字符串 字符串替换只会替换第一个，正则表达式会替换全部。 字符串名.replace(原字符串, 替换字符串) 字符串名.replace(正则表达式, 替换字符串) //例如 var str = &quot;I love javascript!&quot;; var str_new = str.replace(&quot;javascript&quot;, &quot;lvye&quot;); var str = &quot;I am loser, you are loser, all are loser.&quot;; var str_new = str.replace(/loser/g, &quot;hero&quot;); split() 分割字符串 分割符可以是一个字符、多个字符或一个正则表达式。 split(“”)可以用来分割字符串每一个字符。 字符串名.split(&quot;分割符&quot;) //例如 &lt;script&gt; var str = &quot;HTML,CSS,JavaScript&quot;; var arr = str.split(&quot;,&quot;); document.write(&quot;数组第1个元素是：&quot; + arr[0] + &quot;&lt;br/&gt;&quot;); document.write(&quot;数组第2个元素是：&quot; + arr[1] + &quot;&lt;br/&gt;&quot;); document.write(&quot;数组第3个元素是：&quot; + arr[2]); &lt;/script&gt; indexOf()、lastIndexOf() 找出“某个指定字符串”在字符串中首次出现的下标位、找出“某个指定字符串”在字符串中最后出现的下标位置。（也可以找某个具体字符） 如果字符串中不包含“指定字符串”，indexOf()或lastIndexOf()就会返回-1。 字符串名.indexOf(指定字符串) 字符串名.lastIndexOf(指定字符串) 1.9 数组 1.9.1创建数组一般使用简写形式来创建数组。 var 数组名 = new Array(元素1, 元素2, ……, 元素n); //完整形式 var 数组名 = [元素1, 元素2, ……, 元素n]; //简写形式 1.9.2数组的获取想要获取数组某一项的值，我们都是使用“下标”的方式来获取。 数组的下标是从0开始的，而不是从1开始的。 1.9.2数组的赋值也可以用于增加数组的项数。 arr[i] = 值; 1.9.3获取数组长度一般情况下，都是用数组来存储“相同数据类型”的数据 数组名.length 应用：输出数组的每一个元素 //创建数组 var arr = [1, 2, 3, 4, 5, 6]; //输出数组所有元素 for(var i=0;i&lt;arr.length;i++) &#123; document.write(arr[i] + &quot;&lt;br/&gt;&quot;); &#125; 1.9.4获截数组部分slice(start,end)截取范围为：[start,end)，也就是“包含start但不包含end”。其中，end可以省略。当end省略时，获取的范围为：start到结尾。 数组名.slice(start, end); 1.9.5添加数组元素 在数组开头添加元素：unshift() 数组名.unshift(新元素1, 新元素2, ……, 新元素n) 在数组结尾添加元素：push() 当我们不知道数组有多少个元素的时候，我们就没法用下标这种方式来给数组添加新元素。此时，push()方法就相当有用了，因为它不需要知道你有多少个元素，它的目的就是在你数组的最后面添加新元素。 数组名.push(新元素1, 新元素2, ……, 新元素n) 1.9.5删除数组元素 删除数组中的第一个元素 数组名.shift() 删除数组的最后一个元素 数组名.pop() 1.9.6数组元素大小比较数组名.sort(函数名) //例如 //定义一个升序函数 function up(a, b) &#123; return a - b; &#125; //定义一个降序函数 function down(a, b) &#123; return b - a; &#125; //定义数组 var arr = [3, 9, 1, 12, 50, 21]; arr.sort(up); document.write(&quot;升序：&quot; + arr.join(&quot;、&quot;) + &quot;&lt;br/&gt;&quot;); arr.sort(down); document.write(&quot;降序：&quot; + arr.join(&quot;、&quot;)); 1.9.7数组元素颠倒顺序数组名.reverse(); 1.9.8数组元素连接成字符串默认情况下，则采用英文逗号（,）作为连接符来连接。 数组名.join(&quot;连接符&quot;); 1.10 时间对象 1.10.1操作年月日 获取年月日 方法 说明 getFullYear() 获取年份，取值为4位数字 getMonth() 获取月份，取值为0（一月）到11（十二月）之间的整数 getDate() 获取日数，取值为1~31之间的整数 设置年月日 setFullYear() 设置年、月、日。 year表示年，是必选参数，用一个4位的整数表示，如2017、2020等。 时间对象.setFullYear(year,month,day); setMonth() 设置月、日。 month表示月，是必选参数，用0~11之间的整数表示。其中0表示1月，1表示2月，以此类推。 时间对象.setMonth(month, day); setDate() 设置日。 day表示日，是必选参数，用1~31之间的整数表示。 时间对象.setDate(day); //举例 &lt;script&gt; var d = new Date(); d.setFullYear(1992, 09, 01); document.write(&quot;我设置的时间是：&lt;br/&gt;&quot; + d); &lt;/script&gt; 1.10.2操作时分秒 获取当前的时、分、秒 方法 说明 getHours() 获取小时数，取值为0~23之间的整数 getMinutes() 获取分钟数，取值为0~59之间的整数 getSeconds() 获取秒数，取值为0~59之间的整数 &lt;script&gt; var d = new Date(); var myHours = d.getHours(); var myMinutes = d.getMinutes(); var mySeconds = d.getSeconds(); document.write(&quot;当前时间是：&quot; + myHours + &quot;:&quot; + myMinutes + &quot;:&quot; + mySeconds); &lt;/script&gt; 设置时、分、秒 setHours() 设置时、分、秒、毫秒。 hour是必选参数，表示时，取值为0~23之间的整数。 时间对象.setHours(hour, min, sec, millisec); setMinutes() 设置分、秒、毫秒。 min是必选参数，表示分，取值为0~59之间的整数。 时间对象.setMinutes( min, sec, millisec); setSeconds() 设置秒、毫秒。 sec是必选参数，表示秒，取值为0~59之间的整数。 millisec是可选参数，表示毫秒，取值为0~999之间的整数。 时间对象.setSeconds(sec, millisec); 1.10.3获取星期几时间对象.getDay(); //getDay()返回一个数字，其中0表示星期天，1表示星期一……6表示星期六。 将数字转换为中文 var weekday = [&quot;星期日&quot;, &quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;]; var d = new Date(); document.write(&quot;今天是&quot; + weekday[d.getDay()]); 1.11 数学对象 1.11.1Math对象属性常见的Math对象属性 属性 说明 对应的数学形式 PI 圆周率 π LN2 2的自然对数 ln(2) LN10 10的自然对数 ln(10) LOG2E 以2为底的e的对数 log2e LOG10E 以10为底的e的对数 log10e SQRT2 2的平方根 √2 SQRT1_2 2的平方根的倒数 1/√2 对于角度，在实际开发中推荐这种写法：“度数 * Math.PI/180”，因为这种写法可以让我们一眼就能看出角度是多少。 120*Math.PI/180 //120° 150*Math.PI/180 //150° 1.11.2Math对象的方法 常用 方法 说明 max(a,b,…,n) 返回一组数中的最大值 min(a,b,…,n) 返回一组数中的最小值 sin(x) 正弦 cos(x) 余弦 tan(x) 正切 asin(x) 反正弦 acos(x) 反余弦 atan(x) 反正切 atan2(y, x) 反正切（注意y、x顺序） floor(x) 向下取整 ceil(x) 向上取整 random() 生成随机数 不常用 方法 说明 abs(x) 返回x的绝对值 sqrt(x) 返回x的平方根 log(x) 返回x的自然对数（底为e） pow(x,y) 返回x的y次幂 exp(x) 返回e的指数 1.11.2最大值与最小值Math.max(a, b, …, n); Math.min(a, b, …, n); 1.11.3取整运算 向上取整 Math.ceil(x) 向下取整 Math.floor(x) 1.11.4三角函数 atan2(y, x)跟atan(x)是不一样的，atan2(y, x)能够精确判断角度对应哪一个角，而atan(x)不能。因此在高级动画开发时，我们大多数用的是atan2(y, x)，基本用不到atan(x)。 反三角函数用得很少（除了atan2()），一般都是用三角函数，常用的有：sin()、cos()和atan2()。 1.11.5生成随机数使用random()方法来生成01之间的一个随机数。这里的01是只包含0不包含1的，也就是[0, 1)。 常用 Math.random()*m 生成0~m之间的随机数 Math.random()*m+n 生成n~m+n之间的随机数 Math.random()*m-n 生成-n~m-n之间的随机数 Math.random()*m-m 生成-m~0之间的随机数 Math.floor(Math.random()*(m+1)) 生成0到m之间的随机整数 Math.floor(Math.random()*m)+1 生成1到m之间的随机整数（包括1和m） Math.floor(Math.random()*(m-n+1))+n 生成n到m之间的随机整数（包括n和m） 2.核心技术2.1 DOM 2.1.1DOM节点类型 元素节点 属性节点 文本节点 举例： 注意： 节点跟元素是不一样的概念，节点是包括元素的。 一个元素就是一个节点，这个节点称之为“元素节点”。 属性节点和文本节点是独立的节点，并不属于元素节点。 只有元素节点才可以拥有子节点，属性节点和文本节点都无法拥有子节点。 2.1.2获取元素 严格区分大小写 getElementById() onload表示在整个页面加载完成后执行的代码块。 getElementById()获取的是一个DOM对象，我们在给变量命名的时候，习惯性地以英文“o”开头，以便跟其他变量区分开来，让我们一眼就看出来这是一个DOM对象。 document.getElementById(&quot;id名&quot;) //举例 window.onload = function () &#123; var oDiv = document.getElementById(&quot;div1&quot;); oDiv.style.color = &quot;red&quot;; &#125; getElementsByTagName() getElementsByTagName()方法获取的是一个“类数组”（也叫伪数组），这不是真正意义上的数组。我们只能使用到数组的length属性以及下标的形式，但是对于push()等方法是没办法在这里用的。类数组只能用到两点：length属性；下标形式。 document. getElementsByTagName(&quot;标签名&quot;) //举例 &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; window.onload = function () &#123; var oUl = document.getElementById(&quot;list&quot;); var oLi = oUl.getElementsByTagName(&quot;li&quot;); oLi[2].style.color = &quot;red&quot;; &#125; &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;ul id=&quot;list&quot;&gt; &lt;li&gt;HTML&lt;/li&gt; &lt;li&gt;CSS&lt;/li&gt; &lt;li&gt;JavaScript&lt;/li&gt; &lt;li&gt;jQuery&lt;/li&gt; &lt;li&gt;Vue.js&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt; getElementsByClassName() getElementsByClassName()获取的也是一个类数组。 如果我们想得到某一个元素，也是使用数组下标的形式获取的 document. getElementsByClassName(&quot;类名&quot;) querySelector()和querySelectorAll() 可以使用CSS选择器的语法来获取所需要的元素。 对于id选择器来说，由于页面只有一个元素，建议大家用getElementById()，而不是用querySelector()或querySelectorAll()这两个。因为getElementById()方法效率更高，性能也更快。 document.querySelector(&quot;选择器&quot;); document.querySelectorAll(&quot;选择器&quot;); getElementsByName() document.getElementsByName(&quot;name名&quot;) document.title和document.body window.onload = function () &#123; document.title = &quot;梦想是什么？&quot;; document.body.innerHTML = &quot;&lt;strong style=&#39;color:red&#39;&gt;梦想就是一种让你感到坚持就是幸福的东西。&lt;/strong&gt;&quot;; &#125; 2.1.3创建元素① 创建元素节点：createElement() ② 创建文本节点：createTextNode() ③ 把文本节点插入元素节点：appendChild() ④ 把组装好的元素插入到已有元素中：appendChild() 2.1.4插入元素 appendChild() 把一个新元素插入到父元素的内部子元素的 末尾 A表示父元素，B表示动态创建好的新元素。 A.appendChild(B); insertBefore() 将一个新元素插入到父元素中的某一个子元素“之前”。 A表示父元素，B表示新子元素。ref表示指定子元素，在这个元素之前插入新子元素。 A.insertBefore(B,ref); 2.1.5删除元素removeChild() 删除父元素下的某个子元素 A表示父元素，B表示父元素内部的某个子元素。 A.removeChild(B); //lastElementChild)表示删除最后一个子元素 //firstElementChild)表示删除第一个子元素 2.1.6复制元素cloneNode()复制元素。 obj表示被复制的元素，而参数bool是一个布尔值 obj.cloneNode(bool) 2.1.6替换元素replaceChild() A表示父元素，new表示新子元素，old表示旧子元素。 A.replaceChild(new,old); 2.2 DOM进阶 2.2.1 HTML属性操作 “对象属性”方式 获取HTML属性值 obj是元素名，它一个DOM对象。所谓的DOM对象，指的是getElementById()、getElementsByTagName()等方法获取到的元素节点。 attr是属性名，.id表示获取按钮的id属性值。.type表示获取type属性值。.className表示获取一个元素的class。 obj.attr 设置HTML属性值 obj.attr = &quot;值&quot;; “对象方法”方式 只有“对象方法方式”才可以操作自定义属性。 getAttribute() 获取元素的某个属性的值。 obj.getAttribute(&quot;attr&quot;) setAttribute() 设置元素的某个属性的值。 obj.setAttribute(&quot;attr&quot;,&quot;值&quot;) removeAttribute() 删除元素的某个属性。 removeAttribute()更多情况下是结合class属性来“整体”控制元素的样式属性的 obj.removeAttribute(&quot;attr&quot;) hasAttribute() 判断元素是否含有某个属性。 直接使用removeAttribute()删除元素的属性是不太正确的，比较严谨的做法是先用hasAttribute()判断这个属性是否存在，如果存在，才去删除。 obj.hasAttribute(&quot;attr&quot;) 2.2.2 CSS属性操作 获取CSS属性值 getComputedStyle() obj表示DOM对象，attr表示CSS属性名。 getComputedStyle(obj).attr //等价 //getComputedStyle(obj)[&quot;attr&quot;] 设置CSS属性值 style对象 attr表示CSS属性名，采用的同样是“骆驼峰”型。 obj.style.attr = &quot;值&quot;; cssText属性 同时设置多个CSS属性 obj表示DOM对象，cssText的值是一个字符串 这个字符串中的属性名不再使用骆驼峰型写法，而是使用平常的CSS写法 obj.style.cssText = &quot;值&quot;;","categories":[{"name":"前端笔记","slug":"前端笔记","permalink":"https://csong01.github.io/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://csong01.github.io/tags/JS/"}]}],"categories":[{"name":"前端笔记","slug":"前端笔记","permalink":"https://csong01.github.io/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://csong01.github.io/tags/CSS/"},{"name":"html","slug":"html","permalink":"https://csong01.github.io/tags/html/"},{"name":"JS","slug":"JS","permalink":"https://csong01.github.io/tags/JS/"}]}