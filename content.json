{"meta":{"title":"CSONG","subtitle":"","description":"","author":"csong","url":"https://csong.vercel.app","root":"/"},"pages":[{"title":"categories","date":"2021-04-03T03:17:49.000Z","updated":"2021-04-04T06:05:30.188Z","comments":false,"path":"categories/index.html","permalink":"https://csong.vercel.app/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-04-03T03:19:15.000Z","updated":"2021-04-08T09:36:38.655Z","comments":false,"path":"tags/index.html","permalink":"https://csong.vercel.app/tags/index.html","excerpt":"","text":""},{"title":"link","date":"2021-04-03T06:24:34.000Z","updated":"2021-04-23T03:37:32.617Z","comments":true,"path":"link/index.html","permalink":"https://csong.vercel.app/link/index.html","excerpt":"","text":"申请要求 申请友链之前请先添加本站链接。 按照下方 “我的信息” 格式在评论区留言。 要求网站内容符合中华人民共和国法律，制作不能太粗糙，无恶意代码。 如发现贵站失效超过一月，将直接取消贵链接，恕不另行通知。 PS. 网站评论会立刻通知，我会在方便的时候及时处理。我的信息站点名称：CSONG站点描述：仰天大笑出门去，我辈岂是蓬蒿人。站点地址：https://csong.vercel.app/站点头像：https://cdn.jsdelivr.net/gh/csong01/picgo@master/img/favicon.jpg"}],"posts":[{"title":"CSS3学习笔记","slug":"CSS3学习笔记","date":"2021-04-17T11:27:20.000Z","updated":"2021-05-29T12:22:08.219Z","comments":true,"path":"2021/04/17/css3-xue-xi-bi-ji/","link":"","permalink":"https://csong.vercel.app/2021/04/17/css3-xue-xi-bi-ji/","excerpt":"","text":"CSS3简介浏览器私有前缀在书写CSS3属性的时候，可能需要在属性前面加上浏览器的私有前缀，然后该浏览器才能识别对应的CSS3属性。对于IE浏览器来说，暂时只有IE9及以上版本支持CSS3属性，对于IE6~IE8的兼容，我们可以借助ie-css3.htc这个扩展文本来实现。 私有前缀 对应的浏览器 -webkit- Chrome和Safari -moz- Firefox -ms- IE -o- Opera 举个例子，如果我们想要使用CSS3来实现边框阴影效果，可能会这样写：box-shadow: 5px 5px 10px red;但是并非所有浏览器都能识别box-shadow这个属性，例如Chrome只能识别-webkit-box-shadow（前缀为-webkit-），而Firefox只能识别-moz-box-radius（前缀为-moz-）。因此，如果想要让所有主流浏览器都能实现边框阴影效果，我们需要这样写：box-shadow: 5px 5px 10px red;-webkit-box-shadow: 5px 5px 10px red;-moz-box-shadow: 5px 5px 10px red;-ms-box-shadow: 5px 5px 10px red;-o-box-shadow: 5px 5px 举个例子，如果我们想要使用CSS3来实现边框阴影效果，可能会这样写：box-shadow: 5px 5px 10px red;但是并非所有浏览器都能识别box-shadow这个属性，例如Chrome只能识别-webkit-box-shadow（前缀为-webkit-），而Firefox只能识别-moz-box-radius（前缀为-moz-）。因此，如果想要让所有主流浏览器都能实现边框阴影效果，我们需要这样写：box-shadow: 5px 5px 10px red;-webkit-box-shadow: 5px 5px 10px red;-moz-box-shadow: 5px 5px 10px red;-ms-box-shadow: 5px 5px 10px red;-o-box-shadow: 5px 5px 10px red; 新选择器属性选择器 //举例&lt;style type=&quot;text/css&quot;&gt; /*清除所有元素默认的padding和margin*/ *&#123;padding:0;margin:0;&#125; /*清除列表项符号*/ ul&#123;list-style-type:none;&#125; a &#123; display:inline-block; font-size:12px; height:20px; line-height:20px; &#125; /*匹配doc文件*/ a[href$=&quot;doc&quot;]::before &#123; content:url(&quot;img/1.png&quot;); &#125; /*匹配pdf文件*/ a[href$=&quot;pdf&quot;]::before &#123; content:url(&quot;img/2.png&quot;); &#125; /*匹配ppt文件*/ a[href$=&quot;ppt&quot;]::before &#123; content:url(//举例&lt;style type=&quot;text/css&quot;&gt; /*清除所有元素默认的padding和margin*/ *&#123;padding:0;margin:0;&#125; /*清除列表项符号*/ ul&#123;list-style-type:none;&#125; a &#123; display:inline-block; font-size:12px; height:20px; line-height:20px; &#125; /*匹配doc文件*/ a[href$=&quot;doc&quot;]::before &#123; content:url(&quot;img/1.png&quot;); &#125; /*匹配pdf文件*/ a[href$=&quot;pdf&quot;]::before &#123; content:url(&quot;img/2.png&quot;); &#125; /*匹配ppt文件*/ a[href$=&quot;ppt&quot;]::before &#123; content:url(\"img/3.png\"); &#125; 子元素伪类选择器:first-child、:last-child、:nth-child(n)、:only-child用子元素伪类选择器，可以让结构与样式分离，使得用子元素伪类选择器，可以让结构与样式分离，使得HTML结构更加清晰，更利于后期维护和搜索引擎优化（即SEO）。 选择器 说明 E:first-child 选择父元素下的第一个子元素（该子元素类型为E，以下类同） E:last-child 选择父元素下的最后一个子元素 E:nth-child(n) 选择父元素下的第n个子元素或奇偶元素，n取值有3种：数字、odd和even，其中n从1开始 E:only-child 选择父元素下唯一的子元素，该父元素只有一个子元素 &lt;-- 隔行换色 --&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123;padding:0;margin:0;&#125; ul&#123;list-style-type:none;&#125; ul li&#123; height:20px;&#125; /*设置奇数列的背景颜色*/ ul li:nth-child(odd) &#123; background-color:red; &#125; /*设置偶数列的背景颜色*/ ul li:nth-child(even) &#123; background-color:green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/&lt;-- 隔行换色 --&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123;padding:0;margin:0;&#125; ul&#123;list-style-type:none;&#125; ul li&#123; height:20px;&#125; /*设置奇数列的背景颜色*/ ul li:nth-child(odd) &#123; background-color:red; &#125; /*设置偶数列的背景颜色*/ ul li:nth-child(even) &#123; background-color:green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html> :first-of-type、:last-of-type、:nth-of-type(n)、:only-of-type:first-child在选择父元素下的子元素时，不仅要区分元素类型，还要求是第一个子元素。而:first-child在选择父元素下的子元素时，不仅要区分元素类型，还要求是第一个子元素。而:first-of-type在选择父元素下的子元素时，只需要区分元素类型，不要求是第一个子元素 选择器 说明 E:first-of-type 选择父元素下的第一个E类型的子元素 E:last-of-type 选择父元素下的最后一个E类型的子元素 E:nth-of-type(n) 选择父元素下的第n个E类型的子元素或奇偶元素，n取值有3种：数字、odd和even，n从1开始 E:only-of-type 选择父元素下唯一的E类型的子元素，该父元素可以有多个子元素 UI伪类选择器对于指定的样式，在默认状态下不起作用，只有当元素处于某种状态时才起作用。此外，记住一点，大多数对于指定的样式，在默认状态下不起作用，只有当元素处于某种状态时才起作用。此外，记住一点，大多数UI伪类选择器都是针对表单元素的 :focus使用:focus选择器来定义元素获取焦点时使用的样式。不过并不是所有的HTML元素都有焦点样式，具有“获取焦点”和“失去焦点”特点的元素只有两种。（1）表单元素（按钮、单选框、复选框、文本框、下拉列表）（2）超链接------------------------------------------------------------------------------input:focus &#123; outline:使用:focus选择器来定义元素获取焦点时使用的样式。不过并不是所有的HTML元素都有焦点样式，具有“获取焦点”和“失去焦点”特点的元素只有两种。（1）表单元素（按钮、单选框、复选框、文本框、下拉列表）（2）超链接------------------------------------------------------------------------------input:focus &#123; outline:1px solid red; &#125; ::selection使用::selection选择器来定义页面中被选中文本的样式。注意，::selection选择器使用的是双冒号，而不是单冒号。实际上，单冒号往往都是伪类，而双冒号往往都是伪元素。------------------------------------------------------------------------------div::selection &#123; color:white; background-color:red; &#125;div::-moz-selection &#123; color:white; background-color:red; &#125;------------------------------------------------------------------------------为整个页面的选中文本定义样式，我们只需要使用::selection&#123;&#125;就可以实现。------------------------------------------------------------------------------::selection &#123; color:white; background-color:red; &#125; /*兼容Firefox浏览器*/ ::-moz-selection &#123; color:white; 使用::selection选择器来定义页面中被选中文本的样式。注意，::selection选择器使用的是双冒号，而不是单冒号。实际上，单冒号往往都是伪类，而双冒号往往都是伪元素。------------------------------------------------------------------------------div::selection &#123; color:white; background-color:red; &#125;div::-moz-selection &#123; color:white; background-color:red; &#125;------------------------------------------------------------------------------为整个页面的选中文本定义样式，我们只需要使用::selection&#123;&#125;就可以实现。------------------------------------------------------------------------------::selection &#123; color:white; background-color:red; &#125; /*兼容Firefox浏览器*/ ::-moz-selection &#123; color:white; background-color:red; &#125; :checked使用:checked选择器来定义单选框或复选框被选中时的样式。在兼容性方面，暂时只有Opera浏览器支持:checked。------------------------------------------------------------------------------input:checked &#123; 使用:checked选择器来定义单选框或复选框被选中时的样式。在兼容性方面，暂时只有Opera浏览器支持:checked。------------------------------------------------------------------------------input:checked &#123; background-color: red; &#125; :enabled和:disabled使用:enabled选择器来定义表单元素“可用”时的样式，也可以使用:disabled选择器来定义表单元素“不可用”时的样式。------------------------------------------------------------------------------&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; input:enabled &#123; outline:1px solid red; &#125; input:disabled &#123; background-color:orange; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;form&gt; &lt;p&gt;&lt;label for=&quot;enabled&quot;&gt;可用:&lt;/label&gt;&lt;input id=&quot;enabled&quot; type=&quot;text&quot;/&gt;&lt;/p&gt; &lt;p&gt;&lt;label for=&quot;disabled&quot;&gt;禁用:&lt;/label&gt;&lt;input id=&quot;disabled&quot; type=&quot;text&quot; disabled/&gt;&lt;/p&gt; &lt;/form&gt;&lt;/使用:enabled选择器来定义表单元素“可用”时的样式，也可以使用:disabled选择器来定义表单元素“不可用”时的样式。------------------------------------------------------------------------------&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; input:enabled &#123; outline:1px solid red; &#125; input:disabled &#123; background-color:orange; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;form&gt; &lt;p&gt;&lt;label for=&quot;enabled&quot;&gt;可用:&lt;/label&gt;&lt;input id=&quot;enabled&quot; type=&quot;text&quot;/&gt;&lt;/p&gt; &lt;p&gt;&lt;label for=&quot;disabled&quot;&gt;禁用:&lt;/label&gt;&lt;input id=&quot;disabled&quot; type=&quot;text&quot; disabled/&gt;&lt;/p&gt; &lt;/form&gt;&lt;/body> :read-write和:read-only使用:read-write选择器来定义表单元素“可读写”时的样式，也可以使用:read-only选择器来定义表单元素“只读”时的样式。Firefox浏览器只能识别带有-moz-前缀的:read-write和:read-only。------------------------------------------------------------------------------&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; input:read-write &#123; outline:1px solid red; &#125; input:read-only &#123; background-color:silver; &#125; /*兼容Firefox浏览器*/ input:-moz-read-write &#123; outline:1px solid red; &#125; input:-moz-read-only &#123; background-color:silver; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;form method=&quot;post&quot;&gt; &lt;p&gt;&lt;label for=&quot;txt1&quot;&gt;读写:&lt;/label&gt;&lt;input id=&quot;txt1&quot; type=&quot;text&quot; /&gt;&lt;/p&gt; &lt;p&gt;&lt;label for=&quot;txt2&quot;&gt;只读:&lt;/label&gt;&lt;input id=&quot;txt2&quot; type=&quot;text&quot; readonly /&gt;&lt;/p&gt; &lt;/form&gt;&lt;/使用:read-write选择器来定义表单元素“可读写”时的样式，也可以使用:read-only选择器来定义表单元素“只读”时的样式。Firefox浏览器只能识别带有-moz-前缀的:read-write和:read-only。------------------------------------------------------------------------------&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; input:read-write &#123; outline:1px solid red; &#125; input:read-only &#123; background-color:silver; &#125; /*兼容Firefox浏览器*/ input:-moz-read-write &#123; outline:1px solid red; &#125; input:-moz-read-only &#123; background-color:silver; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;form method=&quot;post&quot;&gt; &lt;p&gt;&lt;label for=&quot;txt1&quot;&gt;读写:&lt;/label&gt;&lt;input id=&quot;txt1&quot; type=&quot;text&quot; /&gt;&lt;/p&gt; &lt;p&gt;&lt;label for=&quot;txt2&quot;&gt;只读:&lt;/label&gt;&lt;input id=&quot;txt2&quot; type=&quot;text&quot; readonly /&gt;&lt;/p&gt; &lt;/form&gt;&lt;/body> 其他伪类选择器:root使用:root选择器来选择HTML页面的根元素如果想要设置整个页面的背景色，我们应该针对html元素来设置，而不是body元素。下面两句代码是等价的：:root&#123;background-color:gray;&#125;html&#123;background-color:gray;&#125;(使用:root选择器来定义整个页面的背景色为灰色，然后将使用:root选择器来选择HTML页面的根元素如果想要设置整个页面的背景色，我们应该针对html元素来设置，而不是body元素。下面两句代码是等价的：:root&#123;background-color:gray;&#125;html&#123;background-color:gray;&#125;(使用:root选择器来定义整个页面的背景色为灰色，然后将body元素的背景色定义为红色。) :empty使用:empty选择器来选择一个“不包含任何子元素和内容”的元素，也就是选择一个空元素。对于表格中内容为空的单元格，我们往往为其设置不同的颜色，这样也会使得用户体验更好。&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; table,tr,td &#123; border:1px solid silver; &#125; td &#123; width:60px; height:60px; line-height:60px; text-align:center; background-color: #FFA722; &#125; td:empty &#123; background-color:red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;4&lt;/td&gt; &lt;td&gt;8&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;16&lt;/td&gt; &lt;td&gt;32&lt;/td&gt; &lt;td&gt;64&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;128&lt;/td&gt; &lt;td&gt;256&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/使用:empty选择器来选择一个“不包含任何子元素和内容”的元素，也就是选择一个空元素。对于表格中内容为空的单元格，我们往往为其设置不同的颜色，这样也会使得用户体验更好。&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; table,tr,td &#123; border:1px solid silver; &#125; td &#123; width:60px; height:60px; line-height:60px; text-align:center; background-color: #FFA722; &#125; td:empty &#123; background-color:red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;4&lt;/td&gt; &lt;td&gt;8&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;16&lt;/td&gt; &lt;td&gt;32&lt;/td&gt; &lt;td&gt;64&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;128&lt;/td&gt; &lt;td&gt;256&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body> :target:target选择器来选取页面中的某一个target元素。所谓的target元素，指的是id被当成页面的锚点链接来使用的元素。:target选择器一般都是结合锚点链接来使用的，这样可以实现用户体验更好的导航效果。&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; :target h3 &#123; color:red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;a href=&quot;#music&quot;&gt;推荐音乐&lt;/a&gt;&lt;br /&gt; &lt;a href=&quot;#movie&quot;&gt;推荐电影&lt;/a&gt;&lt;br /&gt; &lt;a href=&quot;#article&quot;&gt;推荐文章&lt;/a&gt;&lt;br /&gt; &lt;/div&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; &lt;div id=&quot;music&quot;&gt; &lt;h3&gt;推荐音乐&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;林俊杰-被风吹过的夏天&lt;/li&gt; &lt;li&gt;曲婉婷-在我的歌声里&lt;/li&gt; &lt;li&gt;许嵩-灰色头像&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; &lt;div id=&quot;movie&quot;&gt; &lt;h3&gt;推荐电影&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;蜘蛛侠系列&lt;/li&gt; &lt;li&gt;钢铁侠系统&lt;/li&gt; &lt;li&gt;复仇者联盟&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; &lt;div id=&quot;article&quot;&gt; &lt;h3&gt;推荐文章&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;朱自清-荷塘月色&lt;/li&gt; &lt;li&gt;余光中-乡愁&lt;/li&gt; &lt;li&gt;鲁迅-阿Q正传&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/:target选择器来选取页面中的某一个target元素。所谓的target元素，指的是id被当成页面的锚点链接来使用的元素。:target选择器一般都是结合锚点链接来使用的，这样可以实现用户体验更好的导航效果。&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; :target h3 &#123; color:red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;a href=&quot;#music&quot;&gt;推荐音乐&lt;/a&gt;&lt;br /&gt; &lt;a href=&quot;#movie&quot;&gt;推荐电影&lt;/a&gt;&lt;br /&gt; &lt;a href=&quot;#article&quot;&gt;推荐文章&lt;/a&gt;&lt;br /&gt; &lt;/div&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; &lt;div id=&quot;music&quot;&gt; &lt;h3&gt;推荐音乐&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;林俊杰-被风吹过的夏天&lt;/li&gt; &lt;li&gt;曲婉婷-在我的歌声里&lt;/li&gt; &lt;li&gt;许嵩-灰色头像&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; &lt;div id=&quot;movie&quot;&gt; &lt;h3&gt;推荐电影&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;蜘蛛侠系列&lt;/li&gt; &lt;li&gt;钢铁侠系统&lt;/li&gt; &lt;li&gt;复仇者联盟&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; ……&lt;br /&gt; &lt;div id=&quot;article&quot;&gt; &lt;h3&gt;推荐文章&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;朱自清-荷塘月色&lt;/li&gt; &lt;li&gt;余光中-乡愁&lt;/li&gt; &lt;li&gt;鲁迅-阿Q正传&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/body> :not()使用:not()选择器来选取某一个元素之外的所有元素。这个选择器非常重要，在实际开发中用得非常多，大家要重点掌握。&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123;padding:0;margin:0;&#125; ul&#123;list-style-type:none;&#125; ul li:not(.first) &#123; color:red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li class=&quot;first&quot;&gt;绿叶学习网&lt;/li&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;/ul&gt;&lt;/使用:not()选择器来选取某一个元素之外的所有元素。这个选择器非常重要，在实际开发中用得非常多，大家要重点掌握。&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123;padding:0;margin:0;&#125; ul&#123;list-style-type:none;&#125; ul li:not(.first) &#123; color:red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li class=&quot;first&quot;&gt;绿叶学习网&lt;/li&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;/ul&gt;&lt;/body> 文本样式文本阴影：text-shadowW3C坐标系 数学坐标系：y轴正方向向上。 W3C坐标系：y轴正方向向下。 text-shadow属性简介为文本添加阴影效果text-shadow:x-offset y-offset blur color;x-offset是“水平阴影”，表示阴影的水平偏移距离，单位可以是px、em和百分比等。由于CSS3采用的是W3C坐标系，因此如果值为正，则阴影向右偏移；如果值为负，则阴影向左偏移。y-offset是“垂直阴影”，表示阴影的垂直偏移距离，单位可以是px、em和百分比等。由于CSS3采用的是W3C坐标系，因此如果值为正，则阴影向下偏移；如果值为负，则阴影向上偏移。blur是“模糊距离”，表示阴影的模糊程度，单位可以是px、em、百分比等。blur值越大，则阴影越模糊；blur值越小，则阴影越清晰。此外，blur不能为负值。如果不需要阴影模糊效果，可以把blur值设置为0。color是“阴影颜色”，表示阴影的颜色。可以使用text-shadow属性为文本定义多个阴影，并且针对每个阴影使用不同的颜色。当定义多个阴影时，text-shadow属性是一个以英文逗号隔开的值列表，例如：text-shadow:0 0 4px red, 0 -5px 4px green, 2px -10px 6px blue;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; display: inline-block; padding: 16px; font-size: 32px; font-weight: bold; background-color: #CCC; color: #ddd; text-shadow: -1px 0 0 #333, /*向左阴影*/ 0 -1px 0 #333, /*向上阴影*/ 1px 0 0 #333, /*向右阴影*/ 0 1px 0 #333; /*向下阴影*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt;&lt;/body&gt;&lt;/为文本添加阴影效果text-shadow:x-offset y-offset blur color;x-offset是“水平阴影”，表示阴影的水平偏移距离，单位可以是px、em和百分比等。由于CSS3采用的是W3C坐标系，因此如果值为正，则阴影向右偏移；如果值为负，则阴影向左偏移。y-offset是“垂直阴影”，表示阴影的垂直偏移距离，单位可以是px、em和百分比等。由于CSS3采用的是W3C坐标系，因此如果值为正，则阴影向下偏移；如果值为负，则阴影向上偏移。blur是“模糊距离”，表示阴影的模糊程度，单位可以是px、em、百分比等。blur值越大，则阴影越模糊；blur值越小，则阴影越清晰。此外，blur不能为负值。如果不需要阴影模糊效果，可以把blur值设置为0。color是“阴影颜色”，表示阴影的颜色。可以使用text-shadow属性为文本定义多个阴影，并且针对每个阴影使用不同的颜色。当定义多个阴影时，text-shadow属性是一个以英文逗号隔开的值列表，例如：text-shadow:0 0 4px red, 0 -5px 4px green, 2px -10px 6px blue;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; display: inline-block; padding: 16px; font-size: 32px; font-weight: bold; background-color: #CCC; color: #ddd; text-shadow: -1px 0 0 #333, /*向左阴影*/ 0 -1px 0 #333, /*向上阴影*/ 1px 0 0 #333, /*向右阴影*/ 0 1px 0 #333; /*向下阴影*/ &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt;&lt;/body&gt;&lt;/html> 文本描边：text-stroke给文字添加边框。text-stroke:width color;Crhome和Firefox这两个浏览器都只能识别-webkit-前缀的text-stroke属性。text-stroke是一个复合属性，它是由text-stroke-wdith和text-stroke-color两个子属性组成。（1）text-stroke-width：定义边框的宽度。（2）text-stroke-color：定义边框的颜色。&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; font-family:Verdana; font-size:50px; font-weight:bold; color:transparent; /*设置文字颜色为透明*/ text-stroke:2px red; -webkit-text-stroke:2px red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;lvyestudy&lt;/div&gt;&lt;/body&gt;&lt;/给文字添加边框。text-stroke:width color;Crhome和Firefox这两个浏览器都只能识别-webkit-前缀的text-stroke属性。text-stroke是一个复合属性，它是由text-stroke-wdith和text-stroke-color两个子属性组成。（1）text-stroke-width：定义边框的宽度。（2）text-stroke-color：定义边框的颜色。&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; font-family:Verdana; font-size:50px; font-weight:bold; color:transparent; /*设置文字颜色为透明*/ text-stroke:2px red; -webkit-text-stroke:2px red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;lvyestudy&lt;/div&gt;&lt;/body&gt;&lt;/html> 文本溢出：text-overflow定义文本的溢出样式。text-overflow:取值;只能实现“单行文本”的省略号效果。如果想要实现“多行文本”的省略号效果必须借助JavaScript或jQuery才行。单独使用text-overflow属性是无法得到省略号效果的。要想实现文本溢出时就显示省略号效果，我们还需要结合white-space和overflow这两个属性来实现，这三个是固定搭配的，下面是完整的语法：overflow:hidden; white-space:nowrap;text-overflow:ellipsis; (white-space:nowrap;规定段落中的文本不进行换行：)&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:200px; height:100px; border:1px solid silver; overflow:hidden; white-space:nowrap; text-overflow:ellipsis; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网成立于2015年4月1日，是一个最富有活力的Web技术学习网站。在这里，我们只提供互联网最好的Web技术教程和最佳的学习体验。每一个教程、每一篇文章、甚至每一个知识点，都体现绿叶精品的态度。没有最好，但是我们可以做到更好！&lt;/div&gt;&lt;/body&gt;&lt;/定义文本的溢出样式。text-overflow:取值;只能实现“单行文本”的省略号效果。如果想要实现“多行文本”的省略号效果必须借助JavaScript或jQuery才行。单独使用text-overflow属性是无法得到省略号效果的。要想实现文本溢出时就显示省略号效果，我们还需要结合white-space和overflow这两个属性来实现，这三个是固定搭配的，下面是完整的语法：overflow:hidden; white-space:nowrap;text-overflow:ellipsis; (white-space:nowrap;规定段落中的文本不进行换行：)&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:200px; height:100px; border:1px solid silver; overflow:hidden; white-space:nowrap; text-overflow:ellipsis; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网成立于2015年4月1日，是一个最富有活力的Web技术学习网站。在这里，我们只提供互联网最好的Web技术教程和最佳的学习体验。每一个教程、每一篇文章、甚至每一个知识点，都体现绿叶精品的态度。没有最好，但是我们可以做到更好！&lt;/div&gt;&lt;/body&gt;&lt;/html> 属性值 说明 ellipsis 当文本溢出时，显示省略号，并且隐藏多余的文字 clip 当文本溢出时，不显示省略号，而是将溢出的文字裁切掉 强制换行：word-wrap、word-break 一般情况下，我们只会用到word-wrap:break-word;或word-break:break-all这两个来实现强制换行。word-wrap和word-break这两个属性都是针对英文页面来说的，在中文页面中很少用到 word-wrap word-wrap:break-word;会首先尝试挪到下一行，看看下一行的宽度够不够，不够的话再进行单词内的断句。 word-wrap:取值; word-wrap属性只有2个取值，如下表所示。 属性值 说明 Normal 自动换行（默认值） break-word 强制换行 word-break word-break:break-all不会尝试把长单词挪到下一行，而是直接就进行单词内的断句。 word-break:取值; word-break属性有3个取值，如下表所示。 属性值 说明 normal 自动换行（默认值） break-all 允许在单词内换行 keep-all 只能在半角空格或连字符处换行 嵌入字体：@font-face 可以使用@font-face方法来加载服务器端的字体，从而使得所有用户都能正常显示该字体。不建议使用@font-face来实现嵌入中文字体。这是因为中文字体文件大多数都是10MB以上。这么大的字体文件，会严重影响页面的加载速度，导致用户体验非常差。 @font-face方法不仅可以用于嵌入字体，最重要的还可以实现字体图标技术（即iconfont） 如果想要实现嵌入字体，一般需要以下两步。 ①使用@font-face定义字体。②使用font-family引用字体。 @font-face&#123; font-family: 字体名称; src:url(@font-face&#123; font-family: 字体名称; src:url(文件路径);&#125; &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*定义字体*/ @font-face &#123; font-family: myfont; /*定义字体名称为myfont*/ src: url(&quot;css/font/Horst-Blackletter.ttf&quot;); &#125; div &#123; font-family:myfont; /*使用自定义的myfont字体*/ font-size:60px; background-color:#ECE2D6; color:#626C3D; padding:20px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;lvyestudy&lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*定义字体*/ @font-face &#123; font-family: myfont; /*定义字体名称为myfont*/ src: url(&quot;css/font/Horst-Blackletter.ttf&quot;); &#125; div &#123; font-family:myfont; /*使用自定义的myfont字体*/ font-size:60px; background-color:#ECE2D6; color:#626C3D; padding:20px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;lvyestudy&lt;/div&gt;&lt;/body&gt;&lt;/html> 颜色样式opacity透明度 我们可以使用opacity属性来定义元素的透明度。 opacity属性取值是一个数值，取值范围为0.0~1.0。其中0.0表示完全透明，1.0表示完全不透明。 opacity属性不仅作用于元素的背景颜色，还会作用于内部所有子元素以及文本内容。 opacity属性大多数时候都是配合:hover来定义鼠标移动到某个按钮或图片上时，改变透明度来呈现动态的效果。 opacity:数值; &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; a &#123; display:inline-block; padding:5px 10px; font-family:微软雅黑; color:white; background-color:hotpink; cursor:pointer; &#125; a:hover &#123; opacity:0.6; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;a&gt;调试代码&lt;/a&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; a &#123; display:inline-block; padding:5px 10px; font-family:微软雅黑; color:white; background-color:hotpink; cursor:pointer; &#125; a:hover &#123; opacity:0.6; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;a&gt;调试代码&lt;/a&gt;&lt;/body&gt;&lt;/html> RGBA颜色RGBA中的透明度只会针对当前设置的属性起作用。 下面几种有关RGBA颜色的写法都是正确的： rgba(255, 255, 0, 0.5)rgba(50%, 80%, 50%, rgba(255, 255, 0, 0.5)rgba(50%, 80%, 50%, 0.5) rgba(R, G, B, rgba(R, G, B, A) &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123;padding:0;margin:0;&#125; ul &#123; display:inline-block; list-style-type:none; width:200px; &#125; li &#123; height:30px; line-height:30px; font-size:20px; font-weight:bold; text-align:center; &#125; /*第1个li，透明度为1.0*/ li:first-child &#123; background-color:rgba(255,0,255,1.0); &#125; /*第2个li，透明度为0.6*/ li:nth-child(2) &#123; background-color:rgba(255,0,255,0.6); &#125; /*第3个li，透明度为0.3*/ li:last-child &#123; background-color:rgba(255,0,255,0.3); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123;padding:0;margin:0;&#125; ul &#123; display:inline-block; list-style-type:none; width:200px; &#125; li &#123; height:30px; line-height:30px; font-size:20px; font-weight:bold; text-align:center; &#125; /*第1个li，透明度为1.0*/ li:first-child &#123; background-color:rgba(255,0,255,1.0); &#125; /*第2个li，透明度为0.6*/ li:nth-child(2) &#123; background-color:rgba(255,0,255,0.6); &#125; /*第3个li，透明度为0.3*/ li:last-child &#123; background-color:rgba(255,0,255,0.3); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;ul&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;li&gt;绿叶学习网&lt;/li&gt; &lt;/ul&gt;&lt;/body&gt;&lt;/html> CSS3渐变 在真正的开发中，大多数渐变效果都是线性渐变 线性渐变线性渐变，指的是在一条直线上进行的渐变。我们见到的大多数渐变效果都是线性渐变。 线性渐变也可以接受一个“值列表”，用于同时定义多种颜色的线性渐变，颜色值之间用英文逗号隔开即可。 background:background:linear-gradient(to right, red, orange, yellow, green, blue, indigo, violet); background:background:linear-gradient(方向, 开始颜色, 结束颜色) 线性渐变的“方向”取值有两种:一种是使用角度（单位为deg）;另外一种是使用关键字，如下表所示。 属性值 对应角度 说明 to top 0deg 从下到上 to bottom 180deg 从上到下（默认值） to left 270deg 从右到左 to right 90deg 从左到右 to top left 无 从右下角到左上角（斜对角） to top right 无 从左下角到右上角（斜对角） &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:200px; height:150px; background:linear-gradient(to right,blue,yellow); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:200px; height:150px; background:linear-gradient(to right,blue,yellow); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html> 径向渐变 径向渐变，指的是颜色从内到外进行的圆形渐变 position用于定义圆心位置。shape size用于定义形状大小，由两部分组成，shape定义形状，size定义大小。start-color和stop-color分别用于定义开始颜色和结束颜色。 其中，position和shape size都是可选参数。如果省略，则表示采用默认值。start-color和stop-color都是必选参数，可以有多个颜色值。 background:background:radial-gradient(position, shape size, start-color, stop-color) 圆心位置position常用取值有两种：一种是“长度值”（如10px）；另外一种是“关键字”（如top），,如下表所示。Chrome和Firefox只能识别以-webkit-作为前缀的径向渐变属性。 属性值 说明 center 中部（默认值） top 顶部 bottom 底部 left 左部 right 右部 top center 靠上居中 top left 左上 top right 右上 left center 靠左居中 center center 正中 right center 靠右居中 bottom left 左下 bottom center 靠下居中 bottom right 右下 shape sizeshape 属性值 说明 ellipse 椭圆形（默认值） circle 圆形 size 属性值 说明 closet-side 指定径向渐变的半径长度为从圆心到离圆心最近的边 closet-corner 指定径向渐变的半径长度为从圆心到离圆心最近的角 farthest-side 指定径向渐变的半径长度为从圆心到离圆心最远的边 farthest-corner 指定径向渐变的半径长度为从圆心到离圆心最远的角 #div1 &#123; background:-webkit-radial-gradient(ellipse, orange,blue); &#125; #div2 &#123; background:#div1 &#123; background:-webkit-radial-gradient(ellipse, orange,blue); &#125; #div2 &#123; background:-webkit-radial-gradient(circle,orange,blue); &#125; start-color和stop-color默认情况下，径向渐变的颜色节点是均匀分布的，不过我们可以为每一种颜色添加百分比，从而使得各个颜色节点不均匀分布。 边框样式圆角效果：border-radius 在前端开发中，我们都是秉着“尽量少用图片”的原则。能用CSS实现的效果，就尽量不要用图片。因为每一个图片都会引发一次HTTP请求，加上图片体积大，会极大影响页面的加载速度。 我们可以使用border-radius属性为元素添加圆角效果。 border-radius属性取值是一个长度值，单位可以是px、em和百分比等。 border-radius:取值; &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:200px; height:150px; border:1px solid gray; border-radius:20px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:200px; height:150px; border:1px solid gray; border-radius:20px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html> border-radius属性值的4种写法border-radius:10px;表示4个角的圆角半径都是10px border-radius:10px 20px;表示左上角和右下角的圆角半径是10px，右上角和左下角的圆角半径都是20px border-radius:10px 20px 30px;表示左上角的圆角半径是10px，左下角和右上角的圆角半径都是20px，右下角圆角半径是30px border-radius:10px 20px 30px 40px;表示左上角、右上角、右下角和左下角的圆角半径，依次是10px、20px、30px、40px，按照顺时针方向来记忆。 border-radius实现半圆和圆半圆把高度（height）设为宽度（width）的一半，并且左上角和右上角的圆角半径定义与元素的高度一致，而右下角和左下角的圆角半径定义为0。 圆元素的宽度和高度定义为相同值，然后4个角的圆角半径定义为宽度（或高度）的一半（或者50%）。 border-radius实现椭圆border-radius:x/y; 当border-radius属性取值为一个值时，例如，“border-radius:30px;”表示圆角水平半径和垂直半径为30px，也就是说“border-radius:30px;”等价于“border-radius:30px/30px”，前者是后者的缩写。 实现椭圆，原理如下：元素的宽度和高度不相等，其中4个角的圆角水平半径定义为宽度的一半，垂直半径定义为高度的一半。 div &#123; width:160px; height:100px; border:1px solid gray; border-radius:80px/div &#123; width:160px; height:100px; border:1px solid gray; border-radius:80px/50px; &#125; border-radius的派生子属性 border-top-right-radius：右上角 border-bottom-right-radius：右下角 border-bottom-left-radius：左下角 border-top-left-radius：左上角 边框阴影：box-shadow 使用box-shadow属性轻松为元素添加阴影效果。 style取值有两种：outset和inset。当取值为outset时（默认值），表示外阴影；当取值为inset时，表示内阴影。 当x-offset和y-offset都为0时，阴影都是向外发散或者向内发散。 box-shadow:x-offset y-offset blur spread color style; x-offset：定义水平阴影的偏移距离，可以使用负值。由于CSS3采用的是W3C坐标系，因此x-offset取值为正时，向右偏移；取值为负时，向左偏移。 y-offset：定义垂直阴影的偏移距离，可以使用负值。由于CSS3采用的是W3C坐标系，因此y-offset取值为正时，向下偏移；取值为负时，向上偏移。 blur：定义阴影的模糊半径，只能为正值。 spread：定义阴影的大小。 color：定义阴影的颜色。 style：定义是外阴影还是内阴影。 个方向阴影独立样式box-shadow:左阴影, 上阴影, 下阴影, 右阴影; &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; body&#123;padding:100px;&#125; div &#123; width:100px; height:100px; line-height:100px; text-align:center; box-shadow:-5px 0 12px red, 0 -5px 12px yellow, 0 5px 12px blue, 5px 0 12px green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; body&#123;padding:100px;&#125; div &#123; width:100px; height:100px; line-height:100px; text-align:center; box-shadow:-5px 0 12px red, 0 -5px 12px yellow, 0 5px 12px blue, 5px 0 12px green; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html> 多色边框：border-colors（1）border-colors属性兼容性很差，并没有得到各大主流浏览器支持，暂时只有Firefox浏览器支持。（2）不能使用-moz-border-bolors属性为4条边同时设定颜色，必须像上面语法那样分别为4条边设定颜色。（3）如果边框宽度（即（1）border-colors属性兼容性很差，并没有得到各大主流浏览器支持，暂时只有Firefox浏览器支持。（2）不能使用-moz-border-bolors属性为4条边同时设定颜色，必须像上面语法那样分别为4条边设定颜色。（3）如果边框宽度（即border-width）为n个像素，则该边框可以使用n种颜色，即每像素显示一种颜色。 border-top-colors:颜色值;border-right-colors:颜色值;border-bottom-colors:颜色值;border-left-colors:颜色值;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:200px; height:100px; border-width:7px; border-style:solid; -moz-border-top-colors:red orange yellow green cyan blue purple; -moz-border-right-colors: red orange yellow green cyan blue purple; -moz-border-bottom-colors: red orange yellow green cyan blue purple; -moz-border-left-colors: red orange yellow green cyan blue purple; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/border-top-colors:颜色值;border-right-colors:颜色值;border-bottom-colors:颜色值;border-left-colors:颜色值;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:200px; height:100px; border-width:7px; border-style:solid; -moz-border-top-colors:red orange yellow green cyan blue purple; -moz-border-right-colors: red orange yellow green cyan blue purple; -moz-border-bottom-colors: red orange yellow green cyan blue purple; -moz-border-left-colors: red orange yellow green cyan blue purple; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html> 边框背景：border-imageborder-image属性简介可以使用border-image属性为边框添加背景图片。现在所有主流浏览器最新版本都支持border-image属性。border-image属性需要定义3个方面的内容。（1）图片路径。（2）切割宽度：四条边的切割宽度，依次为上边、右边、下边、左边（顺时针）。（3）平铺方式：有3种取值，分别为repeat、round和stretch。对于border-image属性，我们总结如下:（1）在制作边框背景图片时，应该制作4条边，中间部分需要挖空。（2）边框背景图片每条边的宽度跟对应的边框宽度（即border-width）应该相同。border-image属性的平铺方式有3种：repeat、round、stretch。（1）取值为repeat时，表示4条边的小方块会不断重复，超出元素部分将会被剪切掉。（2）取值为round时，表示4条边的小方块会铺满。为了铺满，边框图片会压缩或拉伸。（3）取值为stretch时，表示可以使用border-image属性为边框添加背景图片。现在所有主流浏览器最新版本都支持border-image属性。border-image属性需要定义3个方面的内容。（1）图片路径。（2）切割宽度：四条边的切割宽度，依次为上边、右边、下边、左边（顺时针）。（3）平铺方式：有3种取值，分别为repeat、round和stretch。对于border-image属性，我们总结如下:（1）在制作边框背景图片时，应该制作4条边，中间部分需要挖空。（2）边框背景图片每条边的宽度跟对应的边框宽度（即border-width）应该相同。border-image属性的平铺方式有3种：repeat、round、stretch。（1）取值为repeat时，表示4条边的小方块会不断重复，超出元素部分将会被剪切掉。（2）取值为round时，表示4条边的小方块会铺满。为了铺满，边框图片会压缩或拉伸。（3）取值为stretch时，表示4条边的小方块会拉伸，边长有多长就拉多长。 &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:170px; height:110px; line-height:110px; text-align: center; border:30px solid gray; margin-top:20px; &#125; /*第1个div平铺方式为：repeat*/ #div1&#123;border-image:url(img/border.png) 30 repeat;&#125; /*第2个div平铺方式为：round*/ #div2&#123;border-image:url(img/border.png) 30 round;&#125; /*第3个div平铺方式为：stretch*/ #div3&#123;border-image:url(img/border.png) 30 stretch;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;div1&quot;&gt;repeat&lt;/div&gt; &lt;div id=&quot;div2&quot;&gt;round&lt;/div&gt; &lt;div id=&quot;div3&quot;&gt;stretch&lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:170px; height:110px; line-height:110px; text-align: center; border:30px solid gray; margin-top:20px; &#125; /*第1个div平铺方式为：repeat*/ #div1&#123;border-image:url(img/border.png) 30 repeat;&#125; /*第2个div平铺方式为：round*/ #div2&#123;border-image:url(img/border.png) 30 round;&#125; /*第3个div平铺方式为：stretch*/ #div3&#123;border-image:url(img/border.png) 30 stretch;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;div1&quot;&gt;repeat&lt;/div&gt; &lt;div id=&quot;div2&quot;&gt;round&lt;/div&gt; &lt;div id=&quot;div3&quot;&gt;stretch&lt;/div&gt;&lt;/body&gt;&lt;/html> border-image的派生子属性border-image属性可以分开，分别为4条边设置相应的背景图片，这4条边的属性如下表所示。 子属性 说明 border-top-image 定义上边框背景图片 border-bottom-image 定义下边框背景图片 border-left-image 定义左边框背景图片 border-right-image 定义右边框背景图片 背景样式背景大小：background-size 可以使用background-size属性来定义背景图片的大小 背景图片跟普通图片（即img标签）是不同的东西！width和height这两个属性只能用来定义img标签图片的大小，是不能用于控制背景图片的大小。 background-size属性取值有两种：一种是长度值，如px、em、百分比等；另外一种是使用关键字，如下表所示。 属性值 说明 cover 即“覆盖”，表示将背景图片等比缩放来填满整个元素 contain 即“容纳”，表示将背景图片等比缩放至某一边紧贴元素边沿为止 background-size:取值; 背景位置：background-origin 可以使用background-origin属性来定义背景图片是从什么地方开始平铺的，也就是定义背景图片的位置。 background-origin往往都是配合background-position来使用的，其中background-origin定义background-position相对于什么位置来定位。 background-origin:取值; 属性值 说明 border-box 从边框开始平铺 padding-box 从内边距开始平铺（默认值） content-box 从内容区开始平铺 背景剪切：background-clip background-clip属性用于指定背景图片在元素盒子模型中的哪些区域被剪切。 background-clip:取值; 属性值 说明 border-box 从边框开始剪切（默认值） padding-box 从内边距开始剪切 content-box 从内容区开始剪切 多背景图片 在实际开发中，我们并不建议使用多背景图片，而是应该制作一张复合图片来实现。因为多一张图片就会多引发一次HTTP请求，影响页面加载速度。 &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:400px; height:200px; border:1px solid silver; background:url(img/frame1.png) bottom left no-repeat, url(img/frame2.png) top right no-repeat; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:400px; height:200px; border:1px solid silver; background:url(img/frame1.png) bottom left no-repeat, url(img/frame2.png) top right no-repeat; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html> CSS3变形 可以使用transform属性来实现元素的变形效果。 方法 说明 translate() 平移 scale() 缩放 skew() 倾斜 rotate() 旋转 平移：translate() 单位可以为px、em和百分比等 采用的坐标系都是W3C坐标系 transform: translateX(x); /*沿X轴方向平移*/transform: translateY(y); /*沿Y轴方向平移*/transform: translate(x, y); transform: translateX(x); /*沿X轴方向平移*/transform: translateY(y); /*沿Y轴方向平移*/transform: translate(x, y); /*沿X轴和Y轴同时平移*/ &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; body&#123;padding: 100px;&#125; /*设置原始元素样式*/ #origin &#123; width:200px; height:100px; border:1px dashed gray; &#125; /*设置当前元素样式*/ #current &#123; width:200px; height:100px; color:white; background-color: rgb(30, 170, 250); opacity: 0.6; transform:translate(20px, 40px); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;origin&quot;&gt; &lt;div id=&quot;current&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; body&#123;padding: 100px;&#125; /*设置原始元素样式*/ #origin &#123; width:200px; height:100px; border:1px dashed gray; &#125; /*设置当前元素样式*/ #current &#123; width:200px; height:100px; color:white; background-color: rgb(30, 170, 250); opacity: 0.6; transform:translate(20px, 40px); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;origin&quot;&gt; &lt;div id=&quot;current&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 缩放：scale() 当x或y取值为0~1之间时，元素进行缩小；当x或y取值大于1时，元素进行放大。 transform: scaleX(x); /*沿X轴方向缩放*/transform: scaleY(y); /*沿Y轴方向缩放*/transform: scale(x, y); transform: scaleX(x); /*沿X轴方向缩放*/transform: scaleY(y); /*沿Y轴方向缩放*/transform: scale(x, y); /*沿X轴和Y轴同时缩放*/ &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*设置原始元素样式*/ #origin &#123; width:200px; height:100px; border:1px dashed gray; &#125; /*设置当前元素样式*/ #current &#123; width:200px; height:100px; color:white; background-color: rgb(30, 170, 250); opacity: 0.6; transform:scale(1.2, 1.5); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;origin&quot;&gt; &lt;div id=&quot;current&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*设置原始元素样式*/ #origin &#123; width:200px; height:100px; border:1px dashed gray; &#125; /*设置当前元素样式*/ #current &#123; width:200px; height:100px; color:white; background-color: rgb(30, 170, 250); opacity: 0.6; transform:scale(1.2, 1.5); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;origin&quot;&gt; &lt;div id=&quot;current&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 倾斜：skew() 参数x表示元素在x轴方向的倾斜度数，单位为deg（即degree的缩写）。如果度数为正，则表示元素沿下x轴方向逆时针倾斜；如果度数为负，则表示元素沿x轴方向顺时针倾斜。 由于元素限定了高度为100px，而skewX()方法是沿着x轴方向倾斜的。因此只要倾斜角度不超过180°，元素都会保持100px的高度，同时为了保持倾斜，元素只能沿着x轴方向拉长本身。 transform: skewX(x); /*沿X轴方向倾斜*/transform: skewY(y); /*沿Y轴方向倾斜*/transform: skew(x, y); transform: skewX(x); /*沿X轴方向倾斜*/transform: skewY(y); /*沿Y轴方向倾斜*/transform: skew(x, y); /*沿X轴和Y轴同时倾斜*/ &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*设置原始元素样式*/ #origin &#123; width:200px; height:100px; border:1px dashed gray; &#125; /*设置当前元素样式*/ #current &#123; width:200px; height:100px; color:white; background-color: lightskyblue; transform:skew(10deg, 20deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;origin&quot;&gt; &lt;div id=&quot;current&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*设置原始元素样式*/ #origin &#123; width:200px; height:100px; border:1px dashed gray; &#125; /*设置当前元素样式*/ #current &#123; width:200px; height:100px; color:white; background-color: lightskyblue; transform:skew(10deg, 20deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;origin&quot;&gt; &lt;div id=&quot;current&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 旋转：rotate() 参数angle表示元素相对于中心原点旋转的度数，单位为deg。如果度数为正，则表示顺时针旋转；如果度数为负，则表示逆时针旋转。 transform: transform: rotate(angle); &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*设置原始元素样式*/ #origin &#123; width:200px; height:100px; border:1px dashed gray; &#125; /*设置当前元素样式*/ #current &#123; width:200px; height:100px; color:white; background-color: lightskyblue; transform:rotate(30deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;origin&quot;&gt; &lt;div id=&quot;current&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*设置原始元素样式*/ #origin &#123; width:200px; height:100px; border:1px dashed gray; &#125; /*设置当前元素样式*/ #current &#123; width:200px; height:100px; color:white; background-color: lightskyblue; transform:rotate(30deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;origin&quot;&gt; &lt;div id=&quot;current&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 中心原点：transform-origin 默认情况下，元素的中心原点位于x轴和y轴的50%处 ransform-origin属性取值有两种：一种是“长度值”；另外一种是“关键字”。当取值为长度值时，单位可以为px、em和百分比等。 关键字 百分比 说明 top left 0 0 左上 top center 50% 0 靠上居中 top right 100% 0 右上 left center 0 50% 靠左居中 center center 50% 50% 正中 right center 100% 50% 靠右居中 bottom left 0 100% 左下 bottom center 50% 100% 靠下居中 bottom right 100% 100% 右下 transform-origin: 取值; &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*设置原始元素样式*/ #origin &#123; width:200px; height:100px; border:1px dashed gray; margin:100px &#125; /*设置当前元素样式*/ #current &#123; width:200px; height:100px; background-color: lightskyblue; transform-origin:right center; transform:rotate(30deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;origin&quot;&gt; &lt;div id=&quot;current&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*设置原始元素样式*/ #origin &#123; width:200px; height:100px; border:1px dashed gray; margin:100px &#125; /*设置当前元素样式*/ #current &#123; width:200px; height:100px; background-color: lightskyblue; transform-origin:right center; transform:rotate(30deg); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;origin&quot;&gt; &lt;div id=&quot;current&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> CSS3过渡 使用transition属性来将元素的某一个属性从“一个属性值”在指定的时间内平滑地过渡到“另一个属性值”，从而来实现动画效果 凡是涉及CSS3过渡，我们都是结合:hover伪类，来实现过渡效果 transition: 过渡属性 过渡时间 过渡方式 延迟时间; transition是一个复合属性，主要包括4个子属性 属性 说明 transition-property 对元素的哪一个属性进行操作 transition-duration 过渡的持续时间 transition-timing-function 过渡的速率方式 transition-delay 过渡的延迟时间（可选参数） &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; display:inline-block; padding:5px 10px; border-radius:5px; color:white; background-color:hotpink; cursor:pointer; transition:background-color 1s linear 0s; &#125; div:hover &#123; background-color:purple; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;从0到1系列&lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; display:inline-block; padding:5px 10px; border-radius:5px; color:white; background-color:hotpink; cursor:pointer; transition:background-color 1s linear 0s; &#125; div:hover &#123; background-color:purple; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;从0到1系列&lt;/div&gt;&lt;/body&gt;&lt;/html> 过渡属性：transition-property 可以使用transition-property属性来定义过渡效果操作的是哪一个属性。 transition-property属性取值是“CSS属性”。 transition-property: 取值;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; display:inline-block; width:100px; height:50px; background-color:lightskyblue; transition-property:height; transition-duration:0.5s ; transition-timing-function:linear; transition-delay:0s; &#125; div:hover &#123; height:100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/transition-property: 取值;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; display:inline-block; width:100px; height:50px; background-color:lightskyblue; transition-property:height; transition-duration:0.5s ; transition-timing-function:linear; transition-delay:0s; &#125; div:hover &#123; height:100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html> 过渡时间：transition-duration 使用transition-duration属性来定义过渡的持续时间。 transition-duration属性取值是一个时间，单位为秒（s），可以取小数。 transition-duration: 时间;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; display:inline-block; width:100px; height:100px; background-color:lightskyblue; transition-property:border-radius; transition-duration:0.5s; transition-timing-function:linear; transition-delay:0s; &#125; div:hover &#123; border-radius:50px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/transition-duration: 时间;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; display:inline-block; width:100px; height:100px; background-color:lightskyblue; transition-property:border-radius; transition-duration:0.5s; transition-timing-function:linear; transition-delay:0s; &#125; div:hover &#123; border-radius:50px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html> 过渡方式：transition-timing-function 使用transition-timing-function属性来定义过渡方式。 transition-timing-function: 取值; transition-timing-function属性取值共有5种，如下表所示。 属性值 说明 速率 ease 默认值，由快到慢，逐渐变慢 linear 匀速 ease-in 速度越来越快（即渐显效果） ease-out 速度越来越慢（即渐隐效果） ease-in-out 先加速后减速（即渐显渐隐效果） &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:100px; height:50px; line-height:50px; text-align:center; margin-top:5px; background-color:lightskyblue; transition-property:width; transition-duration:2s ; transition-delay:0s; &#125; #div1&#123;transition-timing-function:linear;&#125; #div2&#123;transition-timing-function:ease;&#125; #div3&#123;transition-timing-function:ease-in;&#125; #div4&#123;transition-timing-function:ease-out;&#125; #div5&#123;transition-timing-function:ease-in-out;&#125; div:hover &#123; width:300px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;div1&quot;&gt;linear&lt;/div&gt; &lt;div id=&quot;div2&quot;&gt;ease&lt;/div&gt; &lt;div id=&quot;div3&quot;&gt;ease-in&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:100px; height:50px; line-height:50px; text-align:center; margin-top:5px; background-color:lightskyblue; transition-property:width; transition-duration:2s ; transition-delay:0s; &#125; #div1&#123;transition-timing-function:linear;&#125; #div2&#123;transition-timing-function:ease;&#125; #div3&#123;transition-timing-function:ease-in;&#125; #div4&#123;transition-timing-function:ease-out;&#125; #div5&#123;transition-timing-function:ease-in-out;&#125; div:hover &#123; width:300px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;div1&quot;&gt;linear&lt;/div&gt; &lt;div id=&quot;div2&quot;&gt;ease&lt;/div&gt; &lt;div id=&quot;div3&quot;&gt;ease-in&lt;/div> 延迟时间：transition-delay 使用transition-delay属性来定义过渡效果的延迟时间。 transition-delay属性取值是一个时间，单位为秒（s），可以是小数，默认值为0s。也就是说，当我们没有定义transition-delay时，过渡效果就没有延迟时间。 transition-delay: 时间;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; display:inline-block; width:100px; height:100px; background-color:lightskyblue; transition-property:border-radius; transition-duration:0.5s; transition-timing-function:linear; transition-delay: 2s; &#125; div:hover &#123; border-radius:50px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/transition-delay: 时间;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; display:inline-block; width:100px; height:100px; background-color:lightskyblue; transition-property:border-radius; transition-duration:0.5s; transition-timing-function:linear; transition-delay: 2s; &#125; div:hover &#123; border-radius:50px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html> 深入了解transition属性transition-property取值为all 以使用transition属性同时对多个CSS属性来实现过渡效果 transition:all 1s linear transition:all 1s linear 0s; transition-delay的省略 transition-delay属性是一个可选属性，因此当transition-delay取值为0s时，这个参数可以省略。 transition:all 1s linear 0s;//上面这句代码可以等价于：transition:all transition:all 1s linear 0s;//上面这句代码可以等价于：transition:all 1s linear; transition属性的位置 如果把transition属性写在悬浮状态内的话，移出时没有过渡效果。 div:hover &#123; border-radius:50px; background-color:hotpink; /*transition属性放到:hover&#123;&#125;中*/ transition:all div:hover &#123; border-radius:50px; background-color:hotpink; /*transition属性放到:hover&#123;&#125;中*/ transition:all 0.5s linear; &#125; CSS3动画简介 对于transition属性来说，它只能将元素的某一个属性从一个属性值过渡到另一个属性值。 对于animation属性来说，它可以将元素的某一个属性从第1个属性值过渡到第2个属性值，然后还可以继续过渡到第3个属性值，以此类推。 transition属性（即CSS3过渡）只能实现一次性的动画效果，而animation属性（即CSS3动画）可以实现连续性的动画效果。 使用animation属性实现CSS3动画需要两步 （1）定义动画。（2）调用动画。 animation: 动画名称 持续时间 动画方式 延迟时间 动画次数 动画方向; animation是一个复合属性，主要包括6个子属性，如下表所示。 属性 说明 animation-name 对哪一个CSS属性进行操作 animation-duration 动画的持续时间 animation-timing-function 动画的速率方式 animation-delay 动画的延迟时间 animation-iteration-count 动画的播放次数 animation-direction 动画的播放方向，正向还是反向 &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:100px; height:100px; border-radius:50px; background-color:red; &#125; /*定义动画*/ @keyframes mycolor &#123; 0%&#123;background-color:red;&#125; 30%&#123;background-color:blue;&#125; 60%&#123;background-color:yellow;&#125; 100%&#123;background-color:green;&#125; &#125; /*调用动画*/ div:hover &#123; animation:mycolor 5s linear; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div &#123; width:100px; height:100px; border-radius:50px; background-color:red; &#125; /*定义动画*/ @keyframes mycolor &#123; 0%&#123;background-color:red;&#125; 30%&#123;background-color:blue;&#125; 60%&#123;background-color:yellow;&#125; 100%&#123;background-color:green;&#125; &#125; /*调用动画*/ div:hover &#123; animation:mycolor 5s linear; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html> @keyframes 在调用动画之前，我们必须先使用@keyframes规则来定义动画 @keyframes 动画名&#123; 0%&#123;&#125; …… 100@keyframes 动画名&#123; 0%&#123;&#125; …… 100%&#123;&#125;&#125; 0%表示动画的开始，100%表示动画的结束，0%和100%是必须的。 如果仅仅只有0%和100%这两个百分比的话，此时0%和100%可以使用关键字from和to来代替，其中0%对应from，100%对应to。 @keyframes mycolor&#123; from&#123;color:red&#125; to&#123;@keyframes mycolor&#123; from&#123;color:red&#125; to&#123;color:green&#125;&#125; 动画名称：animation-name animation-name调用的动画名需要和@keyframes规则定义的动画名完全一致（区分大小写），如果不一致将不会产生任何动画效果。 只需要把调用动画的代码放在div元素，而不是在:hover伪类中，就能在打开页面就能自动执行动画 animation-name: 动画名; 持续时间：animation-duration animation-duration属性取值是一个时间，单位为秒（s），可以是小数。 CSS3动画大多数时候都是配合CSS3变形一起使用，然后来实现各种绚丽复杂的动画效果。 animation-duration: 时间;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; @keyframes mytranslate &#123; 0%&#123;&#125; 100%&#123;transform:translateX(160px);&#125; &#125; #container &#123; display:inline-block; width:200px; border:1px solid silver; &#125; #div1,#div2 &#123; width:40px; height:40px; margin-top:10px; border-radius:20px; background-color:red; animation-name:mytranslate; animation-timing-function:linear; &#125; #div1&#123;animation-duration:2s;&#125; #div2&#123;animation-duration:4s;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;container&quot;&gt; &lt;div id=&quot;div1&quot;&gt;&lt;/div&gt; &lt;div id=&quot;div2&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/animation-duration: 时间;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; @keyframes mytranslate &#123; 0%&#123;&#125; 100%&#123;transform:translateX(160px);&#125; &#125; #container &#123; display:inline-block; width:200px; border:1px solid silver; &#125; #div1,#div2 &#123; width:40px; height:40px; margin-top:10px; border-radius:20px; background-color:red; animation-name:mytranslate; animation-timing-function:linear; &#125; #div1&#123;animation-duration:2s;&#125; #div2&#123;animation-duration:4s;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;container&quot;&gt; &lt;div id=&quot;div1&quot;&gt;&lt;/div&gt; &lt;div id=&quot;div2&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 动画方式：animation-timing-function 使用animation-timing-function属性来定义动画的动画方式。所谓“动画方式”，指的是动画在过渡时间内的速率变化方式。 animation-timing-function属性取值共有5种，这个跟CSS3过渡的 transition-timing-function是一样的 animation-timing-function: 取值;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*定义动画*/ @keyframes mytransform &#123; 0%&#123; &#125; 100%&#123;width:300px;&#125; &#125; div &#123; width:100px; height:50px; line-height:50px; text-align:center; margin-top:10px; border-radius:0; background-color:lightskyblue; /*调用动画*/ animation-name:mytransform; animation-duration:5s; &#125; #div1&#123;animation-timing-function:linear;&#125; #div2&#123;animation-timing-function:ease;&#125; #div3&#123;animation-timing-function:ease-in;&#125; #div4&#123;animation-timing-function:ease-out;&#125; #div5&#123;animation-timing-function:ease-in-out&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;div1&quot;&gt;linear&lt;/div&gt; &lt;div id=&quot;div2&quot;&gt;ease&lt;/div&gt; &lt;div id=&quot;div3&quot;&gt;ease-in&lt;/div&gt; &lt;div id=&quot;div4&quot;&gt;ease-out&lt;/div&gt; &lt;div id=&quot;div5&quot;&gt;ease-in-out&lt;/div&gt;&lt;/body&gt;&lt;/animation-timing-function: 取值;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*定义动画*/ @keyframes mytransform &#123; 0%&#123; &#125; 100%&#123;width:300px;&#125; &#125; div &#123; width:100px; height:50px; line-height:50px; text-align:center; margin-top:10px; border-radius:0; background-color:lightskyblue; /*调用动画*/ animation-name:mytransform; animation-duration:5s; &#125; #div1&#123;animation-timing-function:linear;&#125; #div2&#123;animation-timing-function:ease;&#125; #div3&#123;animation-timing-function:ease-in;&#125; #div4&#123;animation-timing-function:ease-out;&#125; #div5&#123;animation-timing-function:ease-in-out&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;div1&quot;&gt;linear&lt;/div&gt; &lt;div id=&quot;div2&quot;&gt;ease&lt;/div&gt; &lt;div id=&quot;div3&quot;&gt;ease-in&lt;/div&gt; &lt;div id=&quot;div4&quot;&gt;ease-out&lt;/div&gt; &lt;div id=&quot;div5&quot;&gt;ease-in-out&lt;/div&gt;&lt;/body&gt;&lt;/html> 延迟时间：animation-delay 使用animation-delay属性来定义动画的延迟时间 animation-delay属性取值是一个时间，单位为秒（s），可以为小数，其中默认值为0s。也就是说，当我们没有定义animation-delay时，动画就没有延迟时间。 animation-delay: 时间; 播放次数：animation-iteration-count animation-iteration-count属性取值有两种：一种是“正整数”；另外一种是“infinite”。当取值是n（正整数）时，表示动画播放n次；当取值为infinite时，表示动画播放无数次，也就是循环播放。 animation-iteration-count: 取值;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; @keyframes mytranslate &#123; 0%&#123;&#125; 50%&#123;transform:translateX(160px);&#125; 100%&#123;&#125; &#125; #ball &#123; width:40px; height:40px; border-radius:20px; background-color:red; animation-name:mytranslate; animation-timing-function:linear; animation-duration:2s; animation-iteration-count:infinite; /*循环播放*/ &#125; #container &#123; display:inline-block; width:200px; border:1px solid silver; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;container&quot;&gt; &lt;div id=&quot;ball&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/animation-iteration-count: 取值;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; @keyframes mytranslate &#123; 0%&#123;&#125; 50%&#123;transform:translateX(160px);&#125; 100%&#123;&#125; &#125; #ball &#123; width:40px; height:40px; border-radius:20px; background-color:red; animation-name:mytranslate; animation-timing-function:linear; animation-duration:2s; animation-iteration-count:infinite; /*循环播放*/ &#125; #container &#123; display:inline-block; width:200px; border:1px solid silver; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;container&quot;&gt; &lt;div id=&quot;ball&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 播放方向：animation-direction animation-direction属性在实际开发中用得很少 animation-direction: 取值; animation-direction属性取值有3个，如下表所示。 播放状态：animation-play-stateanimation-play-state: 取值; animation-play-state属性只有2个取值，如下表所示。 属性值 说明 running 播放（默认值） paused 暂停 多列布局列数：column-count 定义多列布局的列数。 column-count: 取值; column-count属性取值有2种，如下表所示。 属性值 说明 auto 列数由column-width属性决定（默认值） n（正整数） 自动划分为n列 body &#123; width:400px; padding:10px; border:1px solid silver; column-count:body &#123; width:400px; padding:10px; border:1px solid silver; column-count:3; &#125; 列宽：column-width 定义多列布局中每一列的宽度。 column-width属性取值有2种，如下表所示。 属性值 说明 auto 列数由column-count属性决定（默认值） 长度值 单位可以为px、em和百分比等 间距：column-gap 定义列与列之间的间距。 column-gap: 取值; column-gap属性取值有2个，如下表所示。 属性值 说明 normal 浏览器默认长度值 长度值 单位可以为px、em和百分比等 边框：column-rule 定义列与列之间的边框样式。 column-rule: width style color;column-rule:column-rule: width style color;column-rule:1px dashed red; column-rule属性跟border属性是非常相似的，它也是一个复合属性，由3个子属性组成。 column-rule-width：定义边框的宽度。 column-rule-style：定义边框的样式。 column-rule-color：定义边框的颜色。 跨列：column-span 实现多列布局的跨列效果 跨列在CSS3多列布局中也是很常见的效果。 column-span: 取值; column-span属性取值只有2种，如下表所示。 属性值 说明 none 不跨列 all 跨所有列（跟none相反） 滤镜效果亮度：brightness() 亮度滤镜可以减弱或增强图片的亮度。 brightness()方法的取值是一个百分比，其中0%~100%表示减弱图片的亮度，例如0%就是完全黑色。100%以上表示增强图片的亮度，例如200%就是将亮度提高2倍。 filter: filter: brightness(百分比); 灰度：grayscale() 灰度滤镜可以将彩色图片转换成黑白图片 grayscale()方法的取值是一个百分比，其中0%表示不做任何修改，100%表示完全灰度（即黑白图片）。 filter: filter: grayscale(百分比) 复古：sepia() 实现复古滤镜效果。复古滤镜，也叫褐色滤镜。 sepia()方法的取值是一个百分比，取值范围为0%~100%。其中，0%表示没有转换，100%表示复古效果。 filter: filter: sepia(百分比) 反色：invert() 实现反色滤镜效果的。反色，指的是将红、绿、蓝3个通道的像素取各自的相反值。 invert()方法的取值是一个百分比，取值范围为0%~100%。其中，0%表示没有转换，100%表示反转所有颜色。 filter: filter: invert(百分比) 旋转（色相）：hue-rotate() 实现色相旋转的滤镜效果。 hue-rotate()方法的取值是一个度数，单位为deg（即degree的缩写）。其中，0deg表示不旋转，360deg表示旋转360°，也就是相当于一个循环。 filter: hue-filter: hue-rotate(度数) 阴影：drop-shadow() drop-shadow()方法的参数有4个，每一个参数说明如下。 （1）x-offset：定义水平阴影的偏移距离，可以使用负值。由于CSS3采用的是W3C坐标系，因此x-offset取值为正时，向右偏移；取值为负时，向左偏移。 （2）y-offset：定义垂直阴影的偏移距离，可以使用负值。由于CSS3采用的是W3C坐标系，因此y-offset取值为正时，向下偏移；取值为负时，向上偏移。 （3）blur：定义阴影的模糊半径，只能为正值。 （4）color：定义阴影的颜色。 filter: drop-shadow(x-offset y-offset blur color)#after &#123; filter:drop-shadow(5px 5px filter: drop-shadow(x-offset y-offset blur color)#after &#123; filter:drop-shadow(5px 5px 10px red); &#125; 透明度：opacity() opacity()方法的取值是一个百分比，取值范围为0%~100%。其中，0%表示完全透明，100%表示完全不透明。 filter: filter: opacity(百分比) 模糊度：blur() 使用blur()方法来实现模糊度滤镜效果，也就是“马赛克”。 blur()方法的取值是一个像素值，取值越大，模糊效果越明显。 filter: blur(像素)#after &#123; filter:blur(filter: blur(像素)#after &#123; filter:blur(5px); &#125; 对比度：contrast() contrast()方法的取值是一个百分比。其中，0%~100%表示减弱对比度，例如0%则是灰度图片。100%以上表示增强对比度，例如200%表示增强对比度为原来的2倍。 filter: filter: contrast(百分比) 饱和度：saturate() saturate()方法的取值是一个百分比。其中，0%~100%表示减弱饱和度，100%以上表示增强饱和度。 filter: filter: saturate(百分比) 多种滤镜 为某个元素同时定义多种滤镜效果，我们可以将filter属性的取值设置为一个“值列表”的形式来实现。 在值列表中，两个值之间需要用空格隔开。 filter: 值列表;#after &#123; filter:brightness(120%) contrast(200%) blur(filter: 值列表;#after &#123; filter:brightness(120%) contrast(200%) blur(1px); &#125; 弹性盒子模型 通过弹性盒子模型，我们可以轻松地创建自适应浏览器窗口的“流动布局”以及自适应字体大小的弹性布局，使得响应式布局的实现更加容易。 在使用弹性盒子模型之前，必须为父元素定义“display:flex;”或“display:inline-flex;”，这个父元素才具有弹性盒子模型的特点。 子元素宽度之和小于父元素宽度。因此，所有子元素最终的宽度就是原来定义的宽度。 子元素宽度之和大于父元素宽度。因此，子元素会按比例来划分宽度。 响应式布局的关键是使用@media来实现媒体查询 放大比例：flex-grow 定义弹性盒子内部子元素的放大比例。也就是当所有子元素宽度之和小于父元素的宽度时，子元素如何分配父元素的剩余空间。 在使用flex-grow时，一般是不需要对弹性盒子内部的子元素定义宽度或高度的，否则会影响flex容器的比例分配。 flex-grow属性取值是一个数值，默认值为0。当取值为0时，表示不索取父元素的剩余空间。当取值大于0时，表示索取父元素的剩余空间（即子元素放大）。取值越大，索取得越多。 由于所有子元素都没有指定宽度，因此我们可以看成：所有子元素宽度之和小于父元素的宽度。接着我们只需要使用flex-grow属性给每一个子元素指定一个值，然后浏览器就会自动计算每个子元素所占的比例，自动划分宽度。 举个例子，父元素下有两个子元素：A和 B。其中父元素宽400px，A宽为100px，B宽为200px。那么父元素的剩余空间为400-100-200=100px。 （1）如果A和B都不索取，也就是A和B的flex-grow为0，则父元素的剩余空间为100px。 （2）如果A索取，B不索取。其中A设置flex-grow:1，那么最终A的宽为100+100=200px，B的宽不变还是200px。 （3）如果A和B同时索取剩余空间，其中A设置flex-grow:1，B设置flex-grow:1，那么最终A的宽为100+100×1/(1+1)=150px，B的宽为200+100×1/(1+1)=250px。 （4）如果A和B同时索取剩余空间，其中A设置flex-grow:1，B设置flex-grow:3，那么最终A的宽为100+100×1/(1+3)=125px，B的宽为200+100×3/(1+3)=275px。 &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #wrapper &#123; display:flex; width:200px; height:150px; &#125; #box1 &#123; background:red; flex-grow: 1; &#125; #box2 &#123; background:blue; flex-grow: 2; &#125; #box3 &#123; background:orange; flex-grow: 1; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;wrapper&quot;&gt; &lt;div id=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box2&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box3&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #wrapper &#123; display:flex; width:200px; height:150px; &#125; #box1 &#123; background:red; flex-grow: 1; &#125; #box2 &#123; background:blue; flex-grow: 2; &#125; #box3 &#123; background:orange; flex-grow: 1; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;wrapper&quot;&gt; &lt;div id=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box2&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box3&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 缩小比例：flex-shrink 当所有子元素宽度之和大于父元素的宽度时，子元素如何缩小自己的宽度。 flex-shrink属性取值是一个数值，默认值为1。当取值为0时，表示子元素不缩小。当取值大于1时，表示子元素按一定的比例缩小。取值越大，缩小得越厉害。 只有当所有子元素宽度之和小于弹性盒子的宽度时，flex-grow才会生效，而此时flex-shrink无效；只有当所有子元素宽度之和大于弹性盒子的宽度时，flex-shrink属性才会生效，而此时flex-grow无效。也就是说，flex-grow和flex-shrink是互斥的，不可能同时生效。 （1）对于定义了flex-grow:0或者flex-shrink:0;的子元素，宽度为原来定义的宽度，并且不会参与划分。 （2）flex-grow的默认值为0，而flex-shrink的默认值为1。 在实际开发中，我们更多的是使用flex-grow属性，很少会用flex-shrink属性。 flex-shrink: 数值; 举个例子，父元素下有两个子元素：A和 B。其中父元素宽400px，A宽为200px，B宽为300px。那么A和B宽度之和超出父元素宽度为：200+300-400=100px。 （1）如果A和B都不缩小，也就是A和B都设置flex-shrink:0，那么会有100px的宽度超出父元素。 （2）如果A不缩小，B缩小。其中A设置flex-shrink:0;，B设置flex-shrink:1;（默认值）。那么最终A的宽不变还是200px，B的宽为300-100=200px（自身宽度-超出父元素的宽度）。 （3）如果A和B同时缩小，其中A设置flex-shrink:1，B设置flex-shrink:1，那么最终A的宽为200-100×(200×1)/(200×1+300×1)=160px（A自身宽度-A减小的宽度），B的宽为300-100×(300×1)/(200×1+300×1)=240px（B自身宽度-B减小的宽度）。 （4）如果A和B同时缩小，其中A设置flex-shrink:3，B设置flex-shrink:2，那么最终A的宽为200-100×(200×3)/(200×3+300×2)=150px（A自身宽度-A减小的宽度），B的宽为300-100×(300×2)/(200×3+300×2)=250px（B自身宽度-B减小的宽度）。 元素宽度：flex-basis 定义弹性盒子内部子元素的在分配空间之前，该子元素所占的空间大小。浏览器会根据这个属性，然后计算父元素是否有多余空间。 在弹性盒子中，flex-basis的语义会比width好一点。flex-basis和width都可以用来设置子元素的宽度，但是我们应该使用flex-basis而不是width，这也是为了更好的语义化。 flex-basis属性取值有两个：一个是“auto”，即该子元素的宽度是根据内容多少来定的；另外一个是“长度值”，单位可以为px、em和百分比等。 flex-basis属性用来设置子元素的宽度，当然，width属性也可以用来设置子元素的宽度。如果某一个子元素同时设置flex-basis和width，那么flex-basis的值会覆盖width的值。 flex-basis是针对弹性盒子（父元素）下的子元素而已的，不能用于设置弹性盒子的宽度。 复合属性：flex 可以使用flex属性来同时设置flex-grow、flex-shrink、flex-basis这3个属性。 参数grow是flex-grow的取值，参数shrink是flex-shrink的取值，参数basis是flex-basis的取值。因此，flex属性的默认值为“0 1 auto”。 在实际开发中，优先使用flex属性，而不是单独写flex-grow、flex-shrink、flex-basis这3个属性。 flex:1;”其实等价于“flex:1 1 auto;”，而“flex:2;”等价于“flex:2 1 auto;”。也就是说flex取值只有一个数时，表示只设置了flex-grow这个属性的取值。事实上，在实际开发中我们一般也是只需要设置flex-grow属性，很少用得上另外两个属性。 flex: grow shrink basis; &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #wrapper &#123; display:flex; width:200px; height:150px; &#125; #box1 &#123; background:red; flex: 1; &#125; #box2 &#123; background:blue; flex: 2; &#125; #box3 &#123; background:orange; flex: 1; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;wrapper&quot;&gt; &lt;div id=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box2&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box3&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #wrapper &#123; display:flex; width:200px; height:150px; &#125; #box1 &#123; background:red; flex: 1; &#125; #box2 &#123; background:blue; flex: 2; &#125; #box3 &#123; background:orange; flex: 1; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;wrapper&quot;&gt; &lt;div id=&quot;box1&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box2&quot;&gt;&lt;/div&gt; &lt;div id=&quot;box3&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 排列方向：flex-direction 定义弹性盒子内部“子元素”的排列方向。也就是定义子元素是横着排，还是竖着排。 flex-direction属性是在弹性盒子（即父元素）上定义的。 flex-direction: 取值; flex-direction属性取值有4个，如下表所示。 属性值 说明 row 横向排列（默认值） row-reverse 横向反向排列 column 纵向排列 column-reverse 纵向反向排列 &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #wrapper &#123; display:flex; flex-direction:row-reverse; width:200px; height:150px; &#125; #box1,#box2,#box3 &#123; height:150px; line-height: 150px; text-align: center; font-size:30px; color:white; &#125; #box1 &#123; background:red; flex: 1; &#125; #box2 &#123; background:blue; flex: 2; &#125; #box3 &#123; background:orange; flex: 3; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;wrapper&quot;&gt; &lt;div id=&quot;box1&quot;&gt;1&lt;/div&gt; &lt;div id=&quot;box2&quot;&gt;2&lt;/div&gt; &lt;div id=&quot;box3&quot;&gt;3&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #wrapper &#123; display:flex; flex-direction:row-reverse; width:200px; height:150px; &#125; #box1,#box2,#box3 &#123; height:150px; line-height: 150px; text-align: center; font-size:30px; color:white; &#125; #box1 &#123; background:red; flex: 1; &#125; #box2 &#123; background:blue; flex: 2; &#125; #box3 &#123; background:orange; flex: 3; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;wrapper&quot;&gt; &lt;div id=&quot;box1&quot;&gt;1&lt;/div&gt; &lt;div id=&quot;box2&quot;&gt;2&lt;/div&gt; &lt;div id=&quot;box3&quot;&gt;3&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 多行显示：flex-wrap 使用flex-wrap属性来定义弹性盒子内部“子元素”是单行显示还是多行显示。 flex-wrap: 取值; flex-wrap属性常见取值有3个，如下表所示。 属性值 说明 nowrap 单行显示（默认值） wrap 多行显示，也就是换行显示 wrap-reverse 多行显示，但是却是反向 &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /* 公用样式 */ .wrapper1,.wrapper2,.wrapper3 &#123; display: flex; color: white; font-size:24px; width:400px; height: 100px; line-height:50px; border:1px solid gray; text-align: center; &#125; .wrapper1 div,.wrapper2 div,.wrapper3 div &#123; height: 50%; width: 50%; &#125; .red &#123;background: red;&#125; .green &#123;background: green;&#125; .blue &#123;background: blue;&#125; /* 弹性盒子样式 */ .wrapper1 &#123;flex-wrap: nowrap;&#125; .wrapper2 &#123;flex-wrap: wrap;&#125; .wrapper3 &#123;flex-wrap: wrap-reverse;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h3&gt;1、flex-wrap:nowrap（默认值）&lt;/h3&gt; &lt;div class=&quot;wrapper1&quot;&gt; &lt;div class=&quot;red&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;green&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;blue&quot;&gt;3&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;2、flex-wrap:wrap&lt;/h3&gt; &lt;div class=&quot;wrapper2&quot;&gt; &lt;div class=&quot;red&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;green&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;blue&quot;&gt;3&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;3、flex-wrap:wrap-reverse&lt;/h3&gt; &lt;div class=&quot;wrapper3&quot;&gt; &lt;div class=&quot;red&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;green&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;blue&quot;&gt;3&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /* 公用样式 */ .wrapper1,.wrapper2,.wrapper3 &#123; display: flex; color: white; font-size:24px; width:400px; height: 100px; line-height:50px; border:1px solid gray; text-align: center; &#125; .wrapper1 div,.wrapper2 div,.wrapper3 div &#123; height: 50%; width: 50%; &#125; .red &#123;background: red;&#125; .green &#123;background: green;&#125; .blue &#123;background: blue;&#125; /* 弹性盒子样式 */ .wrapper1 &#123;flex-wrap: nowrap;&#125; .wrapper2 &#123;flex-wrap: wrap;&#125; .wrapper3 &#123;flex-wrap: wrap-reverse;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h3&gt;1、flex-wrap:nowrap（默认值）&lt;/h3&gt; &lt;div class=&quot;wrapper1&quot;&gt; &lt;div class=&quot;red&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;green&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;blue&quot;&gt;3&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;2、flex-wrap:wrap&lt;/h3&gt; &lt;div class=&quot;wrapper2&quot;&gt; &lt;div class=&quot;red&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;green&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;blue&quot;&gt;3&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;3、flex-wrap:wrap-reverse&lt;/h3&gt; &lt;div class=&quot;wrapper3&quot;&gt; &lt;div class=&quot;red&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;green&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;blue&quot;&gt;3&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 复合属性：flex-flow 使用flex-flow属性来同时设置flex-direction、flex-wrap这两个属性。 在实际开发中，我们更倾向于使用flex-flow这种简写形式。 参数direction是flex-direction的取值，参数wrap是flex-wrap的取值。因此，flex-flow属性的默认值为“row nowrap”。 flex-flow: direction wrap; 排列顺序：order 使用order属性来定义弹性盒子内部“子元素”的排列顺序。 order属性取值是一个正整数，即1、2、3等。**** order:整数#box1 &#123; background:red; flex: 1; order:order:整数#box1 &#123; background:red; flex: 1; order:2; &#125; 水平对齐：justify-content 使用justify-content属性来定义弹性盒子内部子元素在“横轴”上的对齐方式。 justify-content属性有很多，常见的如下表所示。 属性值 说明 flex-start 所有子元素在左边（默认值） center 所有子元素在中间 flex-end 所有子元素在右边 space-between 所有子元素平均分布 space-around 所有子元素平均分布，但两边留有一定间距 &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*定义整体样式*/ .flex &#123; display: flex; flex-flow: row nowrap; background-color:lightskyblue; margin-bottom:5px; &#125; .item &#123; width: 80px; padding:10px; text-align: center; background-color:hotpink; box-sizing: border-box; &#125; /*定义justify-content*/ .start&#123;justify-content: flex-start;&#125; .center &#123;justify-content: center;&#125; .end &#123;justify-content: flex-end;&#125; .between &#123;justify-content: space-between;&#125; .around &#123;justify-content: space-around;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h3&gt;1、flex-start:&lt;/h3&gt; &lt;div class=&quot;flex start&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;2、center:&lt;/h3&gt; &lt;div class=&quot;flex center&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;3、flex-end:&lt;/h3&gt; &lt;div class=&quot;flex end&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;4、space-between:&lt;/h3&gt; &lt;div class=&quot;flex between&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;5、space-around:&lt;/h3&gt; &lt;div class=&quot;flex around&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*定义整体样式*/ .flex &#123; display: flex; flex-flow: row nowrap; background-color:lightskyblue; margin-bottom:5px; &#125; .item &#123; width: 80px; padding:10px; text-align: center; background-color:hotpink; box-sizing: border-box; &#125; /*定义justify-content*/ .start&#123;justify-content: flex-start;&#125; .center &#123;justify-content: center;&#125; .end &#123;justify-content: flex-end;&#125; .between &#123;justify-content: space-between;&#125; .around &#123;justify-content: space-around;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;h3&gt;1、flex-start:&lt;/h3&gt; &lt;div class=&quot;flex start&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;2、center:&lt;/h3&gt; &lt;div class=&quot;flex center&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;3、flex-end:&lt;/h3&gt; &lt;div class=&quot;flex end&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;4、space-between:&lt;/h3&gt; &lt;div class=&quot;flex between&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;/div&gt; &lt;h3&gt;5、space-around:&lt;/h3&gt; &lt;div class=&quot;flex around&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 垂直对齐：align-items 使用align-items属性来定义弹性盒子内部子元素在“纵轴”上的对齐方式。 align-items: 取值; align-items属性有很多，常见的如下表所示。 属性值 说明 flex-start 所有子元素在上边（默认值） center 所有子元素在中部 flex-end 所有子元素在下边 baseline 所有子元素在父元素的基线上 strecth 拉伸子元素以适应父元素高度 其他样式outline属性 使用outline属性来定义表单中文本框的轮廓线样式。 第1个值指的是轮廓线宽度（outline-width），第2个值指的是轮廓线样式（outline-sytle），第3个值指的是轮廓线颜色（outline-color）。 outline属性相当有用，特别是在美化搜索框样式的时候经常用到。 outline: width style color;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; input[type=&quot;text&quot;]:focus &#123; outline:1px solid red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;input id=&quot;txt&quot; type=&quot;text&quot;&gt;&lt;/body&gt;&lt;/outline: width style color;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; input[type=&quot;text&quot;]:focus &#123; outline:1px solid red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;input id=&quot;txt&quot; type=&quot;text&quot;&gt;&lt;/body&gt;&lt;/html> initial取值 使用“initial”这个值来直接将某个CSS属性重置为它的默认值，并不需要事先这个CSS属性的默认值是多少，因为浏览器会自动设置的。 property是一个CSS属性名，“property:initial;”表示设置property这个属性的取值为默认值。此外，initial取值可以用于任何HTML元素上的任何CSS属性。 property: initial&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div&#123;color:red;&#125; #select&#123;color:initial;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div id=&quot;select&quot;&gt;绿叶学习网&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div&#123;color:red;&#125; #select&#123;color:initial;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div id=&quot;select&quot;&gt;绿叶学习网&lt;/div&gt;&lt;/body&gt;&lt;/property: initial&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div&#123;color:red;&#125; #select&#123;color:initial;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div id=&quot;select&quot;&gt;绿叶学习网&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div&#123;color:red;&#125; #select&#123;color:initial;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div id=&quot;select&quot;&gt;绿叶学习网&lt;/div&gt;&lt;/body&gt;&lt;/html> calc()函数 使用calc()函数通过“计算”的方式来定义某一个属性的取值。’ 在实际开发中，calc()函数非常好用，特别是在自适应布局中涉及不同单位之间的运算时用得非常多。 属性: 属性: calc(表达式) 我们可以使用calc()函数以计算的方式给元素的width、margin、padding、font-size等来定义属性值。对于calc()函数，有以下5条运算规则。 （1）只能使用加（+）、减（-）、乘（*）和除（/）这4种运算。 （2）可以使用px、em、rem、百分比等单位。 （3）可以混合使用各种单位进行运算。 （4）表达式中有加号（+）和减号（-）时，其前后必须有空格。 （5）表达式中有乘号（*）和除号（/）时，其前后可以没有空格，但建议保留。 &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123;margin: 0; padding: 0;&#125; .col-3 &#123; float: left; width: calc(100% / 3 - 5px); margin-right: calc(5px * 3 /2); margin-bottom: calc(5px * 3 /2); height: 60px; line-height: 60px; text-align: center; font-size: 24px; background: #EEEEEE; color: #333333; &#125; .col-3:nth-child(3)&#123;margin-right: 0;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;col-3&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;col-3&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;col-3&quot;&gt;3&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; *&#123;margin: 0; padding: 0;&#125; .col-3 &#123; float: left; width: calc(100% / 3 - 5px); margin-right: calc(5px * 3 /2); margin-bottom: calc(5px * 3 /2); height: 60px; line-height: 60px; text-align: center; font-size: 24px; background: #EEEEEE; color: #333333; &#125; .col-3:nth-child(3)&#123;margin-right: 0;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;col-3&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;col-3&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;col-3&quot;&gt;3&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> overflow-x和overflow-y overflow-x属性用来定义内容超出元素“宽度”时应该如何处理，而overflow-y属性用来定义内容超出元素“高度”时应该如何处理。 overflow-x: 取值;overflow-x: 取值;overflow-y: 取值; overflow-x和overflow-y这两个属性都有4种取值，如下表所示。 属性值 说明 visible 内容超出时，不剪切内容，也不添加滚动条 hidden 内容超出时，剪切内容，但只显示y轴滚动条而不显示x轴滚动条 scroll 内容超出时，显示所有滚动条 auto 跟scroll效果一样 属性值 说明 visible 内容超出时，不剪切内容，也不添加滚动条 hidden 内容超出时，剪切内容，但只显示x轴滚动条而不显示y轴滚动条 scroll 内容超出时，显示所有滚动条 auto 跟scroll效果一样 #view &#123; display:inline-block; width:160px; height:160px; background-color:#F1F1F1; border:1px solid gray; #view &#123; display:inline-block; width:160px; height:160px; background-color:#F1F1F1; border:1px solid gray; overflow-x:visible; &#125; pointer-events属性 使用pointer-events属性来定义元素是否禁用鼠标单击事件。pointer-events属性是一个与JavaScript有关的属性。 pointer-events: 取值; pointer-events属性取值只有2个，如下表所示。 属性值 说明 auto 不禁用鼠标单击事件（默认值） none 禁用鼠标单击事件 .disable &#123; pointer-events: none; color:.disable &#123; pointer-events: none; color:#666666; &#125;","categories":[{"name":"前端笔记","slug":"前端笔记","permalink":"https://csong.vercel.app/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CSS3","slug":"CSS3","permalink":"https://csong.vercel.app/tags/CSS3/"}]},{"title":"HTML5学习笔记","slug":"HTML5学习笔记","date":"2021-04-17T11:27:01.000Z","updated":"2021-05-29T02:18:07.672Z","comments":true,"path":"2021/04/17/html5-xue-xi-bi-ji/","link":"","permalink":"https://csong.vercel.app/2021/04/17/html5-xue-xi-bi-ji/","excerpt":"","text":"IE9+以上浏览器兼容 新增的语义化标签- 这种语义化标准主要是针对搜索引擎的- 这些新标签页面中可以使用多次- 在IE9中，需要把这些元素转换为块级元素 display: block- 这种语义化标准主要是针对搜索引擎的- 这些新标签页面中可以使用多次- 在IE9中，需要把这些元素转换为块级元素 display: block- 移动端更喜欢使用这些标签 &lt;header&gt; :头部标签&lt;nav&gt;:导航标签&lt;article&gt;内容标签&lt;section&gt;:定义文档某个区域&lt;aside&gt; :侧边栏标签&lt;&lt;header&gt; :头部标签&lt;nav&gt;:导航标签&lt;article&gt;内容标签&lt;section&gt;:定义文档某个区域&lt;aside&gt; :侧边栏标签&lt;footer> :尾部标签 新增的多媒体标签1. 音频当前&lt;当前&lt;audio>元素支持三种视频格式MP3、Wav、Ogg，尽量使用mp3格式。 &lt;audio src=&quot;文件地址&quot; controls=&quot; controls&quot;&gt;&lt;/ audio&gt;&lt;!--开发优化--&gt;&lt;audio controls&gt; &lt;source src=&quot;horse.mp3&quot; type=&quot;audio/mpeg&quot;&gt; &lt;source src=&quot;horse.ogg&quot; type=&quot;audio/ogg&quot;&gt; Your browser does not support this audio format.&lt;/&lt;audio src=&quot;文件地址&quot; controls=&quot; controls&quot;&gt;&lt;/ audio&gt;&lt;!--开发优化--&gt;&lt;audio controls&gt; &lt;source src=&quot;horse.mp3&quot; type=&quot;audio/mpeg&quot;&gt; &lt;source src=&quot;horse.ogg&quot; type=&quot;audio/ogg&quot;&gt; Your browser does not support this audio format.&lt;/audio> 2. 视频当前&lt;video&gt;元素支持三种视频格式MP4、WebM、Ogg，尽量使用mp4格式。1. controls 属性供添加播放、暂停和音量控件。2. &lt;video&gt; 与 &lt;/video&gt; 之间插入的内容是供不支持 当前&lt;video&gt;元素支持三种视频格式MP4、WebM、Ogg，尽量使用mp4格式。1. controls 属性供添加播放、暂停和音量控件。2. &lt;video&gt; 与 &lt;/video&gt; 之间插入的内容是供不支持 video 元素的浏览器显示的。 &lt;video src=&quot;文件地址&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt;&lt;!--开发优化--&gt;&lt;video controls=&quot;controls&quot; width=&quot;300&quot;&gt; &lt;source src=&quot;move.ogg&quot; type=&quot;video/ogg&quot; &gt; &lt;souree src=&quot;move.mp4&quot; type=&quot;video/mp4&quot; &gt; 您的浏览器暂不支持&lt;&lt;video src=&quot;文件地址&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt;&lt;!--开发优化--&gt;&lt;video controls=&quot;controls&quot; width=&quot;300&quot;&gt; &lt;source src=&quot;move.ogg&quot; type=&quot;video/ogg&quot; &gt; &lt;souree src=&quot;move.mp4&quot; type=&quot;video/mp4&quot; &gt; 您的浏览器暂不支持&lt;video>标签播放视频 新增的input类型我们验证的时候必须添加我们验证的时候必须添加form表单域 新增的表单属性我们验证的时候必须添加我们验证的时候必须添加form表单域 input::placeholder&#123; input::placeholder&#123; color: pink;&#125;","categories":[{"name":"前端笔记","slug":"前端笔记","permalink":"https://csong.vercel.app/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"HTML5","slug":"HTML5","permalink":"https://csong.vercel.app/tags/HTML5/"}]},{"title":"已选择的路","slug":"已选择的路","date":"2021-04-12T13:20:43.000Z","updated":"2021-05-29T12:23:52.437Z","comments":true,"path":"2021/04/12/yi-xuan-ze-de-lu/","link":"","permalink":"https://csong.vercel.app/2021/04/12/yi-xuan-ze-de-lu/","excerpt":"今天我收到了一条来自Akilar大佬的评论，在回复评论时，我想到了很多事情，很多想写的事情，而且今天是个雨天，比较适合思考，也正好记录一下最近的情况。 好吧，在下午准备写这篇文章，但有课所以放到了现在，但晚上又有一些作业要完成，一些东西要学，所以又没有了写的兴趣，但感觉是培养出来的，那还是继续吧。 引发这篇文章的评论如下： Akilar： 我和你这个年纪的时候，差不多都有这种想法过。顺其自然就好。没必要太过担心别人的想法。花时间画张表格，把自己拥有的和自己期望拥有的写出来。然后划掉自己可以失去的。保留自己不能失去的。顾好纸上最后的东西就行。 csong： 没想到会收到来自互联网陌生人的关心，我现在已经大二下学期了，上一学期经历了地狱一般的学习强度，折磨得死去活来，另外这过去的一年中我也遭遇了多方面的困难与折磨，最终在不断的反思尝试中做出了取舍，这将是我比较冒险的一个决定，但我愿意承受后果，因为我坚信自己能做到，不管三年五年十年还是多长时间，结果至少比未改变的要好。所以现在我已经不再迷茫了，因为我找到了自己真正喜欢的东西，并且每天都为之奋斗，虽然每一天每一天都很忙碌，但我并不感到讨厌，反而感到充实与自信，再一次感谢你的关心。现在终于明白，自己的许多纠结都没有必要，因为对于我这种性格的人来说，终将走向自己热爱的东西。 想写的事情主要是自己这一年中的大致经历和转变，即大二上学期到现在大二下学期期中。","text":"今天我收到了一条来自Akilar大佬的评论，在回复评论时，我想到了很多事情，很多想写的事情，而且今天是个雨天，比较适合思考，也正好记录一下最近的情况。 好吧，在下午准备写这篇文章，但有课所以放到了现在，但晚上又有一些作业要完成，一些东西要学，所以又没有了写的兴趣，但感觉是培养出来的，那还是继续吧。 引发这篇文章的评论如下： Akilar： 我和你这个年纪的时候，差不多都有这种想法过。顺其自然就好。没必要太过担心别人的想法。花时间画张表格，把自己拥有的和自己期望拥有的写出来。然后划掉自己可以失去的。保留自己不能失去的。顾好纸上最后的东西就行。 csong： 没想到会收到来自互联网陌生人的关心，我现在已经大二下学期了，上一学期经历了地狱一般的学习强度，折磨得死去活来，另外这过去的一年中我也遭遇了多方面的困难与折磨，最终在不断的反思尝试中做出了取舍，这将是我比较冒险的一个决定，但我愿意承受后果，因为我坚信自己能做到，不管三年五年十年还是多长时间，结果至少比未改变的要好。所以现在我已经不再迷茫了，因为我找到了自己真正喜欢的东西，并且每天都为之奋斗，虽然每一天每一天都很忙碌，但我并不感到讨厌，反而感到充实与自信，再一次感谢你的关心。现在终于明白，自己的许多纠结都没有必要，因为对于我这种性格的人来说，终将走向自己热爱的东西。 想写的事情主要是自己这一年中的大致经历和转变，即大二上学期到现在大二下学期期中。 大一下学期末选大二上学期课的时候，我没有明白这个选课是选的选修课，以为和大一上学期一样是必修课，所以我就全部选上了，然后还选了两门公选课，最终在大二上学期算了一下是要学十六课，当时我就觉得这个学期肯定是要忙了，所以我就退出了参加的大创社团，空手道社团。事实证明我还是比较有先见之名的，果然很忙，每天七点十几分起床然后晚上有时候要忙到一点钟，每天都这样。当时的日子让我感觉就是在坐牢，每一天每一天都在为上课写作业奔忙，而且还有体育课的体测，每天吃完晚饭在上课前都要去练1000米和引体向上，然后就是在户外的健身设备上锻炼，常常累得腿脚发软然后忙着去上课，可能是5g可能是设计艺术欣赏，这一学期看成绩单时才发现设计艺术欣赏竟然不算入学分了，因为大一修过这门课，当时自己的愿望是做一名设计师，但自己却被调剂到石油工程专业了，所以打算是多了解一下设计，因此大二的设计艺术欣赏就等于刷分了，可怜我我在如此煎熬的一个学期竟然浪费了那么多时间，这样其他学科也就更紧张了。大二上学期的期中考试前自己一直忙着复习几门功课，然而每天课外时间最多只有两三节课，也就是说，在考前的一周我每天都是在上课和完成作业中度过，然而我还必须挤出一切时间抓紧复习几门功课，而且是不简单的功课。记得期中考前每天晚上写完作业熬夜复习，最终感冒了，一般我很少感冒，因为体质还是比较强的，但还是感冒了，主要是压力太大，睡眠不足，抵抗力下降，然后晚上稍微冻冻就这样了。结果，在考试期间自己还是感冒着晕乎乎的，成绩也不算太差，但也就是一般，七八十分。 然后是大二上学期的下半部分了，那就是更痛苦的一段时光了，这一个学期的课大概有五分之三的在下学期，而且是更难的学科，什么线性代数，复变函数，工程力学，数学实验等等，这一学期光是数学类的科目我就有五门，而我比较不擅长太抽象的东西，因为我没办法去把握关键的地方，理解不了，像是线性代数，虽然学得不算太难，考试也不算太难，但是太抽象了，我完全找不到现实中的事物去对应。而很多同学觉得更难的复变函数，由于是高等数学的进阶版，很多问题思想一致，而且有很多图像来表示，因此我觉得并不是把握不了，最后期末考试的时候，我基本上全部题目都写完了，提前大半小时交卷。还有就是概率论与数理统计，说实话，我感觉自己掌握得确实不错，平时会把公式都记住，作业也认真写，不会的也没有跳过，而是认真思考解决，最后考了九十多分，不知道是因为自己比较擅长，还是因为女老师是我的老乡比较亲切呢。像是大学化学之类的，我还记得今年过年前学校里的大寒潮，风雪交加，那是我在这座城市里第一次感受到比家里还要冷，满天的大雪以及根本挡不住的能吹飞学校里的石墩子的大风，我就在这样的考前日子，尽管在周末，每天早早地起床，冒着严寒大雪独自上自习，呆上一天，然后晚上自习到没有一个人后独自迎着风雪和夜色返回寝室。我现在能够不带感情地说出那段最艰辛的时光，因为我不喜欢留恋过去，将这些事忘得一干二净我会活得更轻松自在，没有烦恼。除了这些还有无穷无尽的困难与烦恼，可以说我切实地体会到度日如年的感觉，而且我没有甚至没有陪伴自己的伙伴，甚至没有可以分享的伙伴，因为我在高中时曾经分享给一位室友，但他转眼就告诉了别人，然后我就得面对别人的嘲笑目光，我并不怪他，因为他并不知道那些事情我没有说给别人听，不知道那对我来说是多么重要的事，我只能怪自己。自此，我不再分享自己的经历自己的想法给任何人，包括父母老师及其他亲人朋友，但我还是选择了将这些写了下来，放到网上去，因为这些还远远不及我的思考想法的冰山一角，而且是并不那么隐私的事，尽管如此，我还是希望在读我这篇文章以及其他文章的朋友能够埋藏心里。 到此为止是对上一学期学习部分的简单介绍，其实那段时间真正让我痛苦的远不止学习上的艰辛和忙碌，主要是未来的方向。 其实我从小到大都基本没有思考过，因为自己只需要把书读好，其他一切基本上不用操心。说句实话，初中的学习也不简单，只是比我的大学忙碌要稍逊一筹，但比高中的要忙一点。那是个私立的初中，为了提高学生的升学率和分数，以各种形式提高学习的比重，可以说是个小型监狱，我愿意这样去称呼，但就在那里我的填鸭式学习成果达到高峰，成为全校第一，从最初的200开外到每一次考试的进步，我现在去想那也许并不是一种荣耀，我只是被刀压着脖子走上台阶的，来自父母，老师，同学的锋利的刃，我根本没有任何未来的打算和目标。有时候，成绩优秀也是一种罪过，这不是我的作秀和炫耀，是我真正体会到的事，为了达到，你放弃一切无目的地争先，而到达之后，你会疲于奔命小心谨慎地维持自己的名次，而就算能够持续地名列前茅，你也只是做只井底之蛙，没有认识到世界的广阔和高远，白白地浪费时间。这里我并没有否定成绩好，而是对为了成绩而学习的批判，以及缺乏长久人生目标的警告。现在的我也这样，面对我没有丝毫兴趣的石油工程，我现在基本上可以做到保研，如果我真心喜爱的话，我一定会全力投入而不是应付了事。但我不能让自己去认真学，这可能在你看来是很奇怪的事，能够学得更好，走得更远不是件非常好的事吗？ 真的是件好事吗？ 这是我从大学一直到上个月无尽烦恼与困惑的源头。高中毕业时，我在选学校选专业的时候才开始思考未来自己要做什么，最终我确立了当设计师的愿望，然而我被调剂到石油工程专业，我的性格以及自己常年的习惯让我无法敷衍地对待任何一门学科，我曾为每一门学科的学习而发愁，大一的时候沉迷找各种的所谓的“学习窍门”，什么工作法，记忆术，思维方式，时间管理，现在的我真的可以放心地去嘲笑过去的那个自己了，因为我明白了怎么学习，或者说是怎么应对应试学习，考的不是那些高大上的东西，而是每一天早出晚归学习，无数次的失败反思中积累的切实有用的战斗经验（呵呵），至少让我能相对轻松地通过每一门课程。那继续我的设计师之梦，既然不是自己想要的专业，为什么不转专业呢？简单地说我不敢，不敢让父母知道，不敢让同学知道，不敢面对在石油工程上付出的心血付诸东流，换来一学期要上两门专业来挽回差距，不敢和任何老师交流。这就是我的懦弱，看似强大的冷漠的我的懦弱。但我仍抱有希望，想着自己学学吧，毕业之后再靠自己的努力当上设计师，甚至我还列出一个非常“合理”的计划，当时做出计划的我“大彻大悟”，感到目标如此的清晰，未来如此光明，但第二天我就忘了这件事，不是真的遗忘，而是选择放弃，因为那个计划有着我无法逾越的鸿沟，是过于华丽的人生，我没有信心去实现，而且我也逐渐开始思考自己是否真的非常想当设计师。 由此，我又再一次陷入了迷茫。原本我只要顺水推舟，选择我学的这门专业继续下去，我会学得很轻松，活得很自在，没有那么多的事情要去考虑，不需要在努力学习的时候质问自己是否真的要走这条路，前往一个自己明明知道会是个自己没有任何兴趣和动力的人生。 我不要。 当我犹豫时，我就应该明白自己早就做出了选择，遵从内心的选择。虽然我在别人，任何人看来会是一个听话的小孩，但我明白我自己，我懂我自己，我不会像其他人一样从我的表现去判定我自己，判断我是个没有主见，可以随意摆布的人。说句实话，这些都是给别人看的，为的是封住别人的口，让他们管好自己的事情，少来插手我的事。作为交换，我得给他们想要的东西，一个乖巧的不用操心的人，一个好成绩。却从来没有想到我的这副虚伪的面具下的真实想法，真正想要的东西，真正的性格。我愿意这样去评价自己：一个伪善的人，一个极度傲慢的人，一个极度自卑的人，一个无比自私的人，一个嫉妒别人的人。但我也是一个无比坚强的人，超级无比极其固执的人，超级有主见的人。我想，这样的性格来自我的野蛮生长，从小父母在外工作，没有任何人去管教自己，一切事情自己做主，一切事情自己解决，我决定下来的事情就要去做，去做好，我不允许自己懈怠偷懒，不愿意看到一个自甘堕落的人，不断严格要求自己，但人的能力总是有限的，在无法完成时，我就会无限放大对自己的批判，而成功时，我却没有任何对自己的鼓励，我认为鼓励是没有用的，只会浪费时间。这是我过去的想法，我也因此陷入无限的自卑之中，而现在我切身体会到鼓励对一个人的重要性以及一个人总是对自己反思批判反而会适得其反的事实。 那么，正如我在评论中说到的，我找到了真正喜欢热爱的事情，不是设计师，而是一个我可以连续一个月每天从早到晚忙碌不停，周六周日如此，清明节三天假期亦是如此，然而基本没有感到迷茫和困扰以及任何怨言的事。我从来没有感到如此地充实而有动力，而且对未来充满希望和期待，这将是我不会后悔的事业。 其实，我还有很多思考和想法，但时间有限，我还想向着目标抓紧努力。最后，我想放一首诗，外国现代诗，我最喜欢的诗之一，其中的意境和心理活动我都无比感同身受，但我没有对另一条路的丝毫留恋，尽管我曾倾注无尽的血和泪。找到注定踏上的一条路时，再面对一条不想走下去的路，离开时我无所顾忌。 《未选择的路》 黄色的树林里分出两条路，可惜我不能同时去涉足，我在那路口久久伫立，我向着一条路极目望去，直到它消失在丛林深处。 但我却选择了另外一条路，它荒草萋萋，十分幽寂，显得更诱人，更美丽；虽然在这条小路上，很少留下旅人的足迹。 那天清晨落叶满地，两条路都未经脚印污染。啊，留下一条路等改日再见！但我知道路径延绵无尽头，恐怕我难以再回返。 也许多少年后在某个地方，我将轻声叹息将往事回顾：一片树林里分出两条路——而我选择了人际更少的一条，从此决定了我一生的道路。","categories":[{"name":"思考记录","slug":"思考记录","permalink":"https://csong.vercel.app/categories/%E6%80%9D%E8%80%83%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"大学","slug":"大学","permalink":"https://csong.vercel.app/tags/%E5%A4%A7%E5%AD%A6/"},{"name":"人生","slug":"人生","permalink":"https://csong.vercel.app/tags/%E4%BA%BA%E7%94%9F/"}]},{"title":"7月14日的想法","slug":"7月14日的想法","date":"2021-04-03T03:23:43.000Z","updated":"2021-05-29T12:18:39.738Z","comments":true,"path":"2021/04/03/7-yue-14-ri-de-xiang-fa/","link":"","permalink":"https://csong.vercel.app/2021/04/03/7-yue-14-ri-de-xiang-fa/","excerpt":"这篇文章写于去年七月份，从原博客迁移而来。 今天看到了7月14日的一个思考记录，是手写的，但我觉得挺值得以后回忆一下的，因为里面有几个对我来说难得领悟的的观点。如下： 今天又想起来记想法了，因为内心充满烦恼，感到难受。主要是总存在的来自外界的质问和不理解和觉得自己有点无能的挫败感。","text":"这篇文章写于去年七月份，从原博客迁移而来。 今天看到了7月14日的一个思考记录，是手写的，但我觉得挺值得以后回忆一下的，因为里面有几个对我来说难得领悟的的观点。如下： 今天又想起来记想法了，因为内心充满烦恼，感到难受。主要是总存在的来自外界的质问和不理解和觉得自己有点无能的挫败感。 真的烦人，最讨厌的就是来自别人的质问，实在不懂哪有那么多的问题，说话前过过脑子好不好，总是认为我什么都不懂？为什么成年是18岁？因为心智成熟，能独立生活做事。我已经20岁了，难道这些日常该做的事我都不知道吗？谈话都是质问。为什么没有？怎么这样？是不是有毛病？真的无语，不想再去说什么了。但我的不愿意说话并不是我什么都不懂的体现。就像是沉睡沉默的狮子，自己的锋芒被隐藏，但绝不代表你的一次次试探干扰都是那么随意自在，终归会有危险的那刻。我愿意这样去比喻。我真是不明白，不明白我什么时候对你提出这个那个要求，而你总是这个做一下，那个怎么不知道搞一下。我承认，我很自私，因为我只想把自己照顾好就够了，我并不渴望来自别人的关心关爱，我只求不要干扰我，用一些无足轻重的屁大点的，没有什么意义的事去叽叽歪歪，有什么大不了的，有什么大的影响。不得了了，真的是。 正是这样极端的追求个人生活的想法让我逐渐想要真正的摆脱他们，证明给他们看，在重要的方面，我已经不在是过去的自己，我可以变得更强，比他们更强。摆脱那些无意义的质问，摆脱这样不自在的生活，摆脱两边夹的尴尬难受，拜托对别人的真正依赖。当我把一起问题去归因是时，我发现一个共同的问题：钱。 我以前是这样认为的，钱并不能代表什么，这在很多作品中都表达了出来，我也认为如此。但毕竟当时我的环境并不对钱提出多大的要求，真正进入这个熔炉的部分还是少之又少。现在，我似乎终于能感受钱这个物品的含义。终结生活绝大多数的问题与困难，树立自己的价值和位置，就是这么纯粹。我很庆幸钱能解决这么多的问题，这样目标与方向就变得明确清晰起来。挣钱，这个困扰大多数大多数人的事情也成为我人生中的重要部分。先定个小目标，我是这样想的。在追jojo第五部，我终于获得了自己一直在追寻的东西，那个道理。有时候，太执着于结果，我们往往会去找各种各样的捷径，而正是自己的这一行为却成为获得结果的最大障碍。最终往往会秘事自我，连最简单明确的道路也把握不住。这真是足够让我抱头痛哭的事实了。我在追求某样东西时，总是会去找各种各样的捷径，头脑发热，失去理性。时间证明一切，积累证明一切。这又是我切身体会到的东西。说句实在话，我感到自己变得越来越无能，越来越懦弱，总会在一切小小开始就失去自信，毫无自豪尊严可言。恶心恶心恶心。这难道就是人越长越大，逐渐失去热情信心，而把心中所有美好都强加给自己下一代的过程吗？我自己就在这个过程中吗？我已经能体会到这一点了。我想年轻的成功来自初生时的不畏，中年后的成功来自清楚认识残酷现实的不屈与拼搏。没有能逃过这个道理的，做任何事都一样。满怀热情与自信不畏，成功的stand才会伴随左右，我现在竟觉得这样的stand正在抛弃我这个无聊不堪的本体。所以，自己该做什么？ 在遥远的以前，我一直逼迫自己去拼，后来认为顺其自然，方法大于天，沉醉于找方法，现在才明白人定胜天，自信的热情的重要意义。我有点过于轻视自己了，有一点吧，这也能解释自己为什么会一直拖延但在临期前仍能逼迫自己完成了。我又明白了一个道理，我能做到。所以所以所以，总觉得歧途深渊又在拖我下去。也许，下次每当面对任务时，我都应该像对待2分钟那样不畏地积极地去处理，这是积极的生活态度，不是吗？开拓新天地，就是需要这样的觉悟。对了，要有觉悟，面对这狂风骤雨的觉悟，明知自己会千疮百孔但仍愿去为希望而斗争的觉悟，这样的觉悟不需要自己去顾及很多，掩护很多。也许正是这样的胆量才是正确的。 后面的一点点内容就不记上去了，因为是不太正确的或是现在看起来比较蠢的做法。就是这样，现在看来确实有很多值得回忆的，即使当时的痛苦烦恼现在已经不太能体会了。","categories":[{"name":"思考记录","slug":"思考记录","permalink":"https://csong.vercel.app/categories/%E6%80%9D%E8%80%83%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"家庭","slug":"家庭","permalink":"https://csong.vercel.app/tags/%E5%AE%B6%E5%BA%AD/"}]},{"title":"CSS入门学习笔记","slug":"CSS入门学习","date":"2021-04-03T03:23:43.000Z","updated":"2021-04-18T15:01:23.561Z","comments":true,"path":"2021/04/03/css-ru-men-xue-xi/","link":"","permalink":"https://csong.vercel.app/2021/04/03/css-ru-men-xue-xi/","excerpt":"","text":"CSS选择器（1）元素选择器 &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;/&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div&#123;color:red;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;p&gt;绿叶学习网&lt;/p&gt; &lt;span&gt;绿叶学习网&lt;/span&gt; &lt;div&gt;绿叶学习网&lt;/div&gt;&lt;/&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;/&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; div&#123;color:red;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;p&gt;绿叶学习网&lt;/p&gt; &lt;span&gt;绿叶学习网&lt;/span&gt; &lt;div&gt;绿叶学习网&lt;/div&gt;&lt;/body> （2）id选择器 &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #lvye&#123;color:red;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div id=&quot;lvye&quot;&gt;绿叶学习网&lt;/div&gt; &lt;div&gt;绿叶学习网&lt;/div&gt;&lt;/&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #lvye&#123;color:red;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div id=&quot;lvye&quot;&gt;绿叶学习网&lt;/div&gt; &lt;div&gt;绿叶学习网&lt;/div&gt;&lt;/body> （3）class选择器 &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .lv&#123;color:red;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div class=&quot;lv&quot;&gt;绿叶学习网&lt;/div&gt; &lt;div class=&quot;lv&quot;&gt;绿叶学习网&lt;/div&gt;&lt;/&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .lv&#123;color:red;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div class=&quot;lv&quot;&gt;绿叶学习网&lt;/div&gt; &lt;div class=&quot;lv&quot;&gt;绿叶学习网&lt;/div&gt;&lt;/body> （4）后代选择器 &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #father1 div &#123;color:red;&#125; #father2 span&#123;color:blue;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;father1&quot;&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;father2&quot;&gt; &lt;p&gt;绿叶学习网&lt;/p&gt; &lt;p&gt;绿叶学习网&lt;/p&gt; &lt;span&gt;绿叶学习网&lt;/span&gt; &lt;/div&gt;&lt;/&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #father1 div &#123;color:red;&#125; #father2 span&#123;color:blue;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;father1&quot;&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;father2&quot;&gt; &lt;p&gt;绿叶学习网&lt;/p&gt; &lt;p&gt;绿叶学习网&lt;/p&gt; &lt;span&gt;绿叶学习网&lt;/span&gt; &lt;/div&gt;&lt;/body> （5）群组选择器 &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #lvye,.lv,span&#123;color:red;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;lvye&quot;&gt;绿叶学习网&lt;/div&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;p&gt;绿叶学习网&lt;/p&gt; &lt;p class=&quot;lv&quot;&gt;绿叶学习网&lt;/p&gt; &lt;span&gt;绿叶学习网&lt;/span&gt;&lt;/&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #lvye,.lv,span&#123;color:red;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;lvye&quot;&gt;绿叶学习网&lt;/div&gt; &lt;div&gt;绿叶学习网&lt;/div&gt; &lt;p&gt;绿叶学习网&lt;/p&gt; &lt;p class=&quot;lv&quot;&gt;绿叶学习网&lt;/p&gt; &lt;span&gt;绿叶学习网&lt;/span&gt;&lt;/body> 字体类型 如果我们不定义font-family，浏览器默认字体类型一般是“宋体”。 在实际开发中，比较美观的中文字体有微软雅黑、苹方，英文字体有Times New Roman 、Arial和Verdana，注意带引号的规则。 颜色 关键字，指的就是颜色的英文名称，如red、blue、green等 #000000是黑色，#FFFFFF是白色 分段书写提高可读性 p&#123; font-family:微软雅黑; /*字体类型为微软雅黑*/ font-size:14px; /*字体大小为14px*/ font-weight:bold; /*字体粗细为bold*/ color:red; p&#123; font-family:微软雅黑; /*字体类型为微软雅黑*/ font-size:14px; /*字体大小为14px*/ font-weight:bold; /*字体粗细为bold*/ color:red; /*字体颜色为red*/&#125; 文本首行缩进 中文段落首行一般需要缩进两个字的空间。如果想要实现这个效果，text-indent值应该是font-size值的2倍 文本修饰 我们都知道超链接（a元素）默认样式有下划线，如“&lt;a href=&quot;http://www.lvyestudy.com&quot;&gt;绿叶学习网&lt;/a&gt;”这一句代码，浏览器效果如下图所示。 那么该如何去掉a元素中的下划线呢？这个时候，text-decoration:none; 就派上用场了。 &lt;style type=&quot;text/css&quot;&gt; a&#123;&lt;style type=&quot;text/css&quot;&gt; a&#123;text-decoration:none;&#125; 样式边框 div元素可以定义边框，img元素可以定义边框，table元素可以定义边框，span元素同样也可以定义边框。 border: border: 1px solid red; 上面代码其实等价于： border-width: 1px;border-style: solid;border-width: 1px;border-style: solid;border-color: red; 列表 由于列表项符号比较丑，因此在实际开发中，大多数情况下我们都需要使用list-style-type:none;去掉。 ul{}中的样式只能作用于列表，而不能作用于超链接，要用a{}，反之亦然。 图片 在实际开发中，如果你需要多大的图片，就用Photoshop制作多大的图片。不建议使用一张大图片，然后再借助width和height来改变大小。因为一张大图片体积更大，会使页面加载速度变慢。 “vertical-align属性定义周围的行内元素或文本相对于该元素的垂直方式” 背景 color属性用于定义“文本颜色”，而background-color属性用于定义“背景颜色”。 &lt;style type=&quot;text/css&quot;&gt; p &#123; color:white; &lt;style type=&quot;text/css&quot;&gt; p &#123; color:white; background-color: hotpink; &#125; 背景图片跟图片是不一样的，背景图片是使用CSS来实现，而图片是使用HTML来实现。 没有给div元素定义width和height，此时div元素的宽度和高度都为0，那背景图片不会显示。 不加引号引用更简洁。 /*方式2：路径没加引号*/background-image: url(/*方式2：路径没加引号*/background-image: url(img/haizei.png); :hover伪类应用广泛。 盒子模型 所有的元素都可以看成一个盒子。 只有块元素才可以设置width和height，行内元素是无法设置width和height的。（我们这里不考虑inline-block元素）。 对于border属性，更多使用的是简写形式： border: border: 1px solid red; padding属性在实际开发中，往往使用简写形式（与margin相同）： padding:20px表示4个方向的内边距都是20px。 padding:20px 40px表示padding-top和padding-bottom为20px，padding-right和padding-left为40px。 padding: 像素值1 像素值2 像素值3 像素值padding: 像素值1 像素值2 像素值3 像素值4; 分别对应padding-top，padding-right，padding-bottom，padding-left（顺时针记忆） 浮动 如果你想要实现两列并排或者多列并排效果时，首先考虑的是使用浮动来实现。 浮动可以形成并列的效果，但如果影响纵向的排列结构则使用clear:both来消除这样的影响。 一般都是在浮动元素后面再增加一个空元素，然后为这个空元素定义clear:both来清除浮动，而纵向的位置由margin确定。 &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*定义父元素样式*/ #father &#123; width:300px; background-color:#0C6A9D; border:1px solid silver; &#125; /*定义子元素样式*/ #father div &#123; padding:10px; margin:15px; &#125; #son1 &#123; background-color:hotpink; float:left; /*左浮动*/ &#125; #son2 &#123; background-color:#FCD568; float:right; /*右浮动*/ &#125; .clear&#123;clear:both;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;father&quot;&gt; &lt;div id=&quot;son1&quot;&gt;box1&lt;/div&gt; &lt;div id=&quot;son2&quot;&gt;box2&lt;/div&gt; &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; /*定义父元素样式*/ #father &#123; width:300px; background-color:#0C6A9D; border:1px solid silver; &#125; /*定义子元素样式*/ #father div &#123; padding:10px; margin:15px; &#125; #son1 &#123; background-color:hotpink; float:left; /*左浮动*/ &#125; #son2 &#123; background-color:#FCD568; float:right; /*右浮动*/ &#125; .clear&#123;clear:both;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;father&quot;&gt; &lt;div id=&quot;son1&quot;&gt;box1&lt;/div&gt; &lt;div id=&quot;son2&quot;&gt;box2&lt;/div&gt; &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body> 不注明块元素的宽和高是无法添加背景颜色的。按照一定的顺序如宽高颜色位置等。 一般构思时是先将要展现的整体看作一个元素，不为其设置margin，如果对外框有要求时再设置，如： &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #wrapper &#123; width:800px; height:600px; &#125; #header,#footer &#123; height:100px; background-color:lightskyblue; &#125; .main-left,.main-right &#123; height:380px; margin-top:10px; margin-bottom:10px; background-color:hotpink; &#125; .main-left &#123; float:left; width:595px; &#125; .main-right &#123; float:right; width:195px; &#125; .clear&#123;clear:both;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;wrapper&quot;&gt; &lt;div id=&quot;header&quot;&gt;&lt;/div&gt; &lt;div id=&quot;main&quot;&gt; &lt;div class=&quot;main-left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;main-right&quot;&gt;&lt;/div&gt; &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;footer&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #wrapper &#123; width:800px; height:600px; &#125; #header,#footer &#123; height:100px; background-color:lightskyblue; &#125; .main-left,.main-right &#123; height:380px; margin-top:10px; margin-bottom:10px; background-color:hotpink; &#125; .main-left &#123; float:left; width:595px; &#125; .main-right &#123; float:right; width:195px; &#125; .clear&#123;clear:both;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;wrapper&quot;&gt; &lt;div id=&quot;header&quot;&gt;&lt;/div&gt; &lt;div id=&quot;main&quot;&gt; &lt;div class=&quot;main-left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;main-right&quot;&gt;&lt;/div&gt; &lt;div class=&quot;clear&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;footer&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html> 定位 position:fixed;使得元素成为固定定位元素，接着使用top、bottom、left和right这4个属性来设置元素相对浏览器的位置，这4个值的参考对象是浏览器的4条边，不必全用到。 position:relative;来实现相对定位，相对定位元素的位置是相对于原始位置而言。 position:absolute;来实现绝对定位，使用top、bottom、left和right这4个属性来设置元素相对浏览器的位置。 一般只使用其中两个。 在实际开发中，优先使用浮动布局。如果实现不了，再考虑定位布局。因为定位布局大多数情况会使得元素完全脱离原来的位置，使得布局不可控。","categories":[{"name":"前端笔记","slug":"前端笔记","permalink":"https://csong.vercel.app/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://csong.vercel.app/tags/CSS/"}]},{"title":"HTML入门学习笔记","slug":"HTML入门学习笔记","date":"2021-04-03T03:23:43.000Z","updated":"2021-04-18T15:02:02.090Z","comments":true,"path":"2021/04/03/html-ru-men-xue-xi-bi-ji/","link":"","permalink":"https://csong.vercel.app/2021/04/03/html-ru-men-xue-xi-bi-ji/","excerpt":"","text":"对功能模块代码进行注释尤为重要 文字标签 标签 语义 说明 strong strong（强调） 粗体 em emphasized（强调） 斜体 sup superscripted（上标） 上标 sub subscripted（下标） 下标 自闭合标签 标签 说明 定义网页的信息（供搜索引擎查看） 引入“外部CSS文件” 换行标签 水平线标签 图片标签 表单标签 有序列表标签&lt;ol type=&quot;属性值&quot;&gt; &lt;li&gt;列表项&lt;/li&gt; &lt;li&gt;列表项&lt;/li&gt; &lt;li&gt;列表项&lt;/&lt;ol type=&quot;属性值&quot;&gt; &lt;li&gt;列表项&lt;/li&gt; &lt;li&gt;列表项&lt;/li&gt; &lt;li&gt;列表项&lt;/li> 定义列表标签&lt;dl&gt; &lt;dt&gt;HTML&lt;/dt&gt; &lt;dd&gt;制作网页的标准语言，控制网页的结构&lt;/dd&gt; &lt;dt&gt;CSS&lt;/dt&gt; &lt;dd&gt;层叠样式表，控制网页的样式&lt;/dd&gt; &lt;dt&gt;JavaScript&lt;/dt&gt; &lt;dd&gt;脚本语言，控制网页的行为&lt;/dd&gt;&lt;/&lt;dl&gt; &lt;dt&gt;HTML&lt;/dt&gt; &lt;dd&gt;制作网页的标准语言，控制网页的结构&lt;/dd&gt; &lt;dt&gt;CSS&lt;/dt&gt; &lt;dd&gt;层叠样式表，控制网页的样式&lt;/dd&gt; &lt;dt&gt;JavaScript&lt;/dt&gt; &lt;dd&gt;脚本语言，控制网页的行为&lt;/dd&gt;&lt;/dl> 表格标签 完整语义化及合并行列的用法 &lt;!DOCTYPE html&gt; &lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;编程题&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; table,tr,td&#123;border:1px solid silver;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;table&gt; &lt;caption&gt;学生成绩表&lt;/caption&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;性别&lt;/th&gt; &lt;th&gt;成绩&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;张三&lt;/td&gt; &lt;td&gt;男&lt;/td&gt; &lt;td&gt;250&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;李四&lt;/td&gt; &lt;td&gt;男&lt;/td&gt; &lt;td&gt;520&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;td&gt;平均分&lt;/td&gt; &lt;td colspan=&quot;2&quot;&gt;385&lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt; &lt;/table&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt; &lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;编程题&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; table,tr,td&#123;border:1px solid silver;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;table&gt; &lt;caption&gt;学生成绩表&lt;/caption&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;性别&lt;/th&gt; &lt;th&gt;成绩&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;张三&lt;/td&gt; &lt;td&gt;男&lt;/td&gt; &lt;td&gt;250&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;李四&lt;/td&gt; &lt;td&gt;男&lt;/td&gt; &lt;td&gt;520&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;td&gt;平均分&lt;/td&gt; &lt;td colspan=&quot;2&quot;&gt;385&lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html> 效果图 图片标签&lt;body&gt; &lt;img src=&quot;img/1.jpg&quot; alt=&quot;&quot;/&gt;&lt;br/&gt; &lt;img src=&quot;img/2.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt; &lt;img src=&quot;img/3.gif&quot; alt=&quot;&quot;/&gt;&lt;/&lt;body&gt; &lt;img src=&quot;img/1.jpg&quot; alt=&quot;&quot;/&gt;&lt;br/&gt; &lt;img src=&quot;img/2.png&quot; alt=&quot;&quot;/&gt;&lt;br/&gt; &lt;img src=&quot;img/3.gif&quot; alt=&quot;&quot;/&gt;&lt;/body> a标签(超链接)&lt;body&gt; &lt;a href=&quot;http://www.lvyestudy.com&quot; target=&quot;_blank&quot;&gt;绿叶学习网&lt;/a&gt;&lt;/&lt;body&gt; &lt;a href=&quot;http://www.lvyestudy.com&quot; target=&quot;_blank&quot;&gt;绿叶学习网&lt;/a&gt;&lt;/body> 表单单选框，多选框的Name属性不要忘。暂时可以用该代码来调整位置。 &nbsp;","categories":[{"name":"前端笔记","slug":"前端笔记","permalink":"https://csong.vercel.app/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"html","slug":"html","permalink":"https://csong.vercel.app/tags/html/"}]},{"title":"一次学习中的崩溃经历","slug":"一次学习中的崩溃经历","date":"2021-04-03T03:23:43.000Z","updated":"2021-05-29T12:23:44.363Z","comments":true,"path":"2021/04/03/yi-ci-xue-xi-zhong-de-beng-kui-jing-li/","link":"","permalink":"https://csong.vercel.app/2021/04/03/yi-ci-xue-xi-zhong-de-beng-kui-jing-li/","excerpt":"这是大一上学期临近期末考试，自己每天早出晚归独自学习的一次崩溃经历。 今天我很难受，有一点抑郁，就是很茫然，不知道要做什么，确实我有很多任务要去完成，但就是不想做，没有任何想去做的欲望和动力。呼吸好像也很沉重迟缓，头脑有似曾相识的放空感。我也不知道该说什么了，懒得去写了。 我到底想要什么呢？想做什么呢？不知道。是打篮球？做程序题？画画？看电影？打游戏？找APP？好像都没有兴趣了。我到底该做些什么呢？","text":"这是大一上学期临近期末考试，自己每天早出晚归独自学习的一次崩溃经历。 今天我很难受，有一点抑郁，就是很茫然，不知道要做什么，确实我有很多任务要去完成，但就是不想做，没有任何想去做的欲望和动力。呼吸好像也很沉重迟缓，头脑有似曾相识的放空感。我也不知道该说什么了，懒得去写了。 我到底想要什么呢？想做什么呢？不知道。是打篮球？做程序题？画画？看电影？打游戏？找APP？好像都没有兴趣了。我到底该做些什么呢？ 期末考试要到了，可以说明天考英语口语，我有些担心，但事实上这并没有那么重要，而且精心准备或许还是被束缚在条条框框里。那个高数期末考试也要来了，这本书看起来很简单，就是说极限和微积分的，考的题目大都一样。但为什么我就是不能写出来或是很快写出来呢？内容并没有那么多啊，为什么？再说说程序设计，它也就是那样，看懂，记住，做经典题型也就没有什么东西了，但什么但，我不知道。但我做得很慢，而且很明显，我有一些不懂，没记住。 这都是让我烦心的事，我却没有任何动力去一个一个地解决。为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么为什么？我在凑字数吗？可能吧。 所以，我现在该做什么呢？ 刚才看了闻香识女人的劝说片段，感觉好了很多，很理解中校的心情，失去珍贵的一切，而又孤独一人，确实没有什么值得再留恋的。跳探戈和开法拉利很帅。这是他那一瞬间活下去的唯一理由，我又想到了在暑假时对人生意义的思考了，人生短短，人生苦长，人生又有什么意义呢？支持我们无意义人生存在的是什么呢？可能就是自己喜欢的人或东西上了吧。烦心了就跳探戈。跳探戈时很自豪很快乐，心中没有无尽的苦恼，而且身边又有佳人为伴。 所以快乐，喜悦，兴奋是那份支持的感觉吧。现在想到复习高数和程序设计就有很大的厌烦和不情愿，这可能就是我之前做了那么多的学习方案却没有任何作用的原因了吧。 对学习的热爱可以基本满足学好的要素。热爱学习，自然愿意投入大量时间。热爱学习，自然愿意迎接挑战。热爱学习，自然不会被其他的事物给分散注意力。热爱学习，自然能形成正反馈。热爱学习，自然能有一种一切尽在掌握之中的感觉。总之，我离学习好和爱学习只差一步了——找到我爱学习的理由，以及如何真正地爱上学习。 好的。","categories":[{"name":"思考记录","slug":"思考记录","permalink":"https://csong.vercel.app/categories/%E6%80%9D%E8%80%83%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"大学","slug":"大学","permalink":"https://csong.vercel.app/tags/%E5%A4%A7%E5%AD%A6/"},{"name":"困扰","slug":"困扰","permalink":"https://csong.vercel.app/tags/%E5%9B%B0%E6%89%B0/"}]},{"title":"大二开学考前复习及经验回顾一","slug":"大二开学考前复习及经验回顾一","date":"2021-04-03T03:23:43.000Z","updated":"2021-05-29T12:23:08.179Z","comments":true,"path":"2021/04/03/da-er-kai-xue-kao-qian-fu-xi-ji-jing-yan-hui-gu-yi/","link":"","permalink":"https://csong.vercel.app/2021/04/03/da-er-kai-xue-kao-qian-fu-xi-ji-jing-yan-hui-gu-yi/","excerpt":"这篇文章写于去年八月份，从原博客迁移而来。 23号大学开学，我也就莫名其妙地成为一名大二学生了，现在有一件要命的事摆在眼前，开学期末考试。 上个学期在家里浑浑噩噩的，也没有学到什么东西，这个挺长的暑假又在碌碌无为中度过。结果就是我要在这几天内复习完数理化三门的全部知识，然后拿起久违的笔去考试了。果然感到一丝痛苦和绝望呢。 但假期无事可做，开学前几天高强度完成作业和复习好像是常干的事了，我也没有太多的悔意，毕竟假期实在不愿意学习，这可能有一丝孤单的因素在里面，如果能有人陪伴我该多好。","text":"这篇文章写于去年八月份，从原博客迁移而来。 23号大学开学，我也就莫名其妙地成为一名大二学生了，现在有一件要命的事摆在眼前，开学期末考试。 上个学期在家里浑浑噩噩的，也没有学到什么东西，这个挺长的暑假又在碌碌无为中度过。结果就是我要在这几天内复习完数理化三门的全部知识，然后拿起久违的笔去考试了。果然感到一丝痛苦和绝望呢。 但假期无事可做，开学前几天高强度完成作业和复习好像是常干的事了，我也没有太多的悔意，毕竟假期实在不愿意学习，这可能有一丝孤单的因素在里面，如果能有人陪伴我该多好。 明天开始就是正式的复习时期了，估计我真的会很忙。记得上个这样的经历是在高三了，那段时间是每天学习16小时，睡6小时，吃饭加其他时间2小时，因为那么多的作业要补啊。现在想来都是痛苦的回忆。更不要说21号我还有科二考试，这几天还要多加练习。 时间就更少了。 贴个计划表吧。18号浏览画思维导图，找重点19，20，21号整理重点并找典型题目22，25 高数做典型题和真题（23号为周日会有家庭聚会，24号要坐6个小时高铁去学校）26，27大物做典型题和真题28，29大化做典型题和真题 虽然，在有限的时间里我没有理由去拖延了，也就会强迫自己坐在那里乖乖学习，但自己只要一个人去学习就经常会有强烈的逆反心理，总会把不好的情绪放大，这可能会影响自己的复习效率，带来更大的痛苦，所以我在想要不要来个云同桌。所谓云同桌就是像B站的学习直播，自己边放直播边学习营造氛围，带来比较好的仪式感，代入更好的状态。但每当有这样类似的想法产生时，内心就会有一个声音说道：怎么屁事这么多？好好坐着学习不行吗？搞这么多花样？我又会犹豫不决。这是常有的事了，这源自我一直以来的不断批评自己的思维。我比较明确自己的这个缺陷是在高中的一次经历。记得当时就是老师把我们的作业打乱发给我们让我们互相批。我是只把错误的部分打上红叉然后在旁边写上正确答案。而我旁边的一位学霸则是把对的全打上红勾，在错误部分旁写上正确答案。（我在高中成绩算中等偏上，大概全校15-20名的样子，这位同学就一般是全校全校第5左右）他看到我的批改方式说了一句：你怎么就打叉，同学看到了要难过的。当时我思考了一下发现确实在我的记忆里只有叉没有对勾。不管是考试卷，模拟题还是平时的作业，我只会把自己的错误标出来，仅此而已。我确实尝试过把对的地方打上勾，但试了几次就没有继续了。因为我在打勾时内心总会反复对我说：你怎么那么做作，对了就对了呗，还要那么刻意地打勾，打勾就是浪费时间。这就是我的真实想法。 这次经历让我深刻感觉到自己有否定自己的习惯。但当时学习挺忙的也就没有去深究这个问题，后来也就淡忘了。 这个问题在我大一上学期期末考前复习阶段又重新拾起。大一上学期自己成绩挺一般的，高数期中考试50多分，辅导员找我谈话。在谈话的结尾他说给自己定个目标吧，我想了想，70多吧。他说不行，要80多，总成绩，然后记在表格上就让我走了。总成绩80多，这次50多占比不算太大，算了算期末考试要80多才能达到目标。辅导员说说而已，自己没事找什么无趣呢。他说考90多那你也去考呗。我应该没有义务去按照他说的去做的。但我还是觉得考80多努努力还是可以的，虽然数学是我七八年学习生涯里最拉胯的学科，经常徘徊在及格线边缘，但自己也在高三市联考考过数学全校第一。另一方面还是因为自己脸皮薄，害怕丢面子。我可以自信地说百分之七十做的蠢事都来自我的好面子。所以我决定要考80多。 在制定计划时我深刻思考了上面的那个缺陷。否定自己是我一直存在的严重错误，这在高中就开始变得明显起来。记得初中是全校第一的，当时自己好像做事都挺有信心。虽然不能仅凭成绩去下结论，但我想试一试，去发现我的大考必砸，小考必不顺是不是自我否定造成的。 我尝试的方法很简单，就是每当有想法出现时就以我最NB，天底下只有我最牛，没有是我做不到的等等的话去抢夺它的话语权。这看起来确实有点蠢，有点幼稚，就像是每天早上在镜子前鼓励自己一句，但我也不知道该怎么办才好。 所以就经常对自己说这些话。逐渐发现自己更加能进入状态，上课能一直跟住老师节奏，写作业更加得心应手，遇到的问题也没有什么太难的。虽然没有那么夸张，但改善得很明显。这其中更是因为那段时间只要没有课我都会去自习室默默地学习，风雨无阻，学习逐渐变成惯性。还有就是发现我一直没有信心还因为我确实比较懒，很多要记的公式定理基本上没记住几个，看到其他人张口就来，我很心虚，我觉得这也是我在学习上自卑的一个原因。所以我就老老实实地去背公式了，把所有公式列在一张纸上，每当做对应学科作业前就全部默写一遍，默写七八遍就差不多记住了。做题上课也就变得很有信心，不怕老师点名背公式了。 C语言在上学期也一直困扰我，期中还考了0分，虽然是机器的问题但自己确实很多不会。后来练得还好，但考试前又犯了焦虑症。我经常考试失败很大程度上是因为考试时遇到一题不太会，我就会无限地放大，不断怀疑自己，不断跳题，最后也做不了几题。所以我决定找其他东西转移一下自己的注意力，保持平常愉悦的心情。我选的是看一些有趣的图片，表情包，视频之类的。记得当时看完后心情变得平和许多，敲代码手指也不太僵，最后是10道对了差不多7道，70多分，很满意了。 现在0:31了，明天要早起复习，剩下的有空写在下一篇文章吧。","categories":[{"name":"思考记录","slug":"思考记录","permalink":"https://csong.vercel.app/categories/%E6%80%9D%E8%80%83%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"大学","slug":"大学","permalink":"https://csong.vercel.app/tags/%E5%A4%A7%E5%AD%A6/"},{"name":"考试","slug":"考试","permalink":"https://csong.vercel.app/tags/%E8%80%83%E8%AF%95/"}]},{"title":"也入一场辩论赛","slug":"也入一场辩论赛","date":"2021-04-03T03:23:43.000Z","updated":"2021-05-29T12:23:38.039Z","comments":true,"path":"2021/04/03/ye-ru-yi-chang-bian-lun-sai/","link":"","permalink":"https://csong.vercel.app/2021/04/03/ye-ru-yi-chang-bian-lun-sai/","excerpt":"这是大一上学期自己身为组织委员动员同学参加辩论赛的时候写的，然而我并没有参加。 亲爱的同学们，新生辩论赛报名今晚6:00就截止了，报名的几位同学让我们欣喜而感动，同时也为跃跃欲试的同学而紧张。 一开始看到这个辩论赛，想想也就是个普通的活动，平时时间那么紧，哪里还能参加呢？但想想在上次思修课辩论赛中，自己的表现并不如意，我是不是还在起点低头徘徊呢？","text":"这是大一上学期自己身为组织委员动员同学参加辩论赛的时候写的，然而我并没有参加。 亲爱的同学们，新生辩论赛报名今晚6:00就截止了，报名的几位同学让我们欣喜而感动，同时也为跃跃欲试的同学而紧张。 一开始看到这个辩论赛，想想也就是个普通的活动，平时时间那么紧，哪里还能参加呢？但想想在上次思修课辩论赛中，自己的表现并不如意，我是不是还在起点低头徘徊呢？ 我追求思维提升，在知识的丛林中建起一座瞭望塔，透过迷雾，看清真正方向。我追求生活体验，让人生的旧房里闯入一只花猫，打翻油漆桶，让墙壁上梅花朵朵。我追求谈笑大方，让自己的眼眸中常常闪烁别人的脸庞，女生前的自己不必万分紧张。 这就是我的追求吧，大学时光也多也少，值得回味与感激的时光屈指可数。也许我们没有辩论经验，但赛前会有专业培训；也许比赛期间我们忙得焦头烂额，但回报远大于三五天的倾尽全力；也许我们在场上紧张战栗，但身后有最可靠亲近的同学们，目光里是无尽的期许和肯定。这一切的珍贵，怎么能成为以后的某个背过身去，叹息自己的好不争气，好没勇气。 我的亲爱的同学们，你们完全有能力，可让那些可以成就自己想要成为的样子的机遇再回来，实在难。但现在简简单单的报名又有多难呢？","categories":[{"name":"思考记录","slug":"思考记录","permalink":"https://csong.vercel.app/categories/%E6%80%9D%E8%80%83%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"大学","slug":"大学","permalink":"https://csong.vercel.app/tags/%E5%A4%A7%E5%AD%A6/"}]},{"title":"大二开学考前复习及经验回顾二","slug":"大二开学考前复习及经验回顾二","date":"2021-04-03T03:23:43.000Z","updated":"2021-05-29T12:22:49.835Z","comments":true,"path":"2021/04/03/da-er-kai-xue-kao-qian-fu-xi-ji-jing-yan-hui-gu-er/","link":"","permalink":"https://csong.vercel.app/2021/04/03/da-er-kai-xue-kao-qian-fu-xi-ji-jing-yan-hui-gu-er/","excerpt":"这篇文章写于去年八月份，从原博客迁移而来。 现在在补牙，等的人有点多就不要浪费时间了，继续上一篇。 说说我的另一个经历吧。 大一我的体育课选的是篮球。但其实我基本上没有打过篮球，而且高中的时候有一次被同学鼓动去打篮球。当时我拿到球直接就投了，什么也没想，因为我连基本的规则都不知道。球没进，我感到实在太丢脸了，自己也不好意思去请教具体的规则，于是灰溜溜地下场了。","text":"这篇文章写于去年八月份，从原博客迁移而来。 现在在补牙，等的人有点多就不要浪费时间了，继续上一篇。 说说我的另一个经历吧。 大一我的体育课选的是篮球。但其实我基本上没有打过篮球，而且高中的时候有一次被同学鼓动去打篮球。当时我拿到球直接就投了，什么也没想，因为我连基本的规则都不知道。球没进，我感到实在太丢脸了，自己也不好意思去请教具体的规则，于是灰溜溜地下场了。 大一选篮球也是因为想要克服自己的这个经历，变得更强大，而且篮球选的人挺多，认识的人也多一点。 但上了才发现，老师对基础部分基本上一笔带过，规则基本上没讲什么。主要的练习就是投篮和运球了。我能够清晰感受到自己的的菜，其他大部分同学都是经常打篮球的，运球投篮基本上没有任何问题，我连运好球都困难。老师说我是独臂大侠，因为我只会右手，只用右手。 这种窘境也并不难熬，每周一节体育课，简简单单就过去了。但期末考试就比较难受了。 篮球的期末考试考的是上篮，根据循环四次上篮的时间来决定分数，另外的技巧分一般时间越短越高。所以考前的差不多一个月就是练习上篮了。我忘了满分是多少秒了，但记得很清楚有很多满分的，同寝室的两位同学就是满分。但自己测了测时间，基本上没有及格过，说实话很让人失落，但我也能够理解，自己本来就没打过篮球，大一也把大部分时间花在其他学科上了，这是自己造的孽啊，我真的后悔过选篮球。 但结果是怎么样呢？我考了70多分，应该人均80多分吧，但我已经非常满意了，毕竟考前还没有及格过呢，而且每人测两次取最好成绩，第一次70多，第二次就不及格了。 说实话这有有运气的成分在里面，但也好像是因为考前做的事吧。考前一个星期我非常担忧考试，想着要多找时间去练习，但好像只练过一两次，因为大部分时间场地都有人打篮球，而且我也没有篮球，租球的机子又坏了。这真的是天不遂人愿，然后就混了最后一个星期。在正式的考试前老师让我们练习了半节课，就在这半节课上我真真切切地告诉自己：不行就不行吧，我也没有什么办法，大不了放手拼一把，我也懒得去在乎那么多了，都给我去死吧。然后考试时就什么也没想，把基本动作做好，补篮补了一两次，往返就拼了命地跑。结果下来看看自己的分数，70多，虽然陪我看的同学说应该考高一点的，但我已经很庆幸自己能及格了，当时开心了一整天。 现在回想起来，那段时间也是自己长时间鼓励暗示自己，规律坚持学习的时期。我觉得这并不是巧合，而且我能真切地感受到当自己不断鼓励自己，那些话在我动摇的时候就逐渐地自动冒出来了。我逐渐相信自己真的是厉害的人，在面对很多应该做不到的事情时都会想：凭什么我做不到，只要是人做到的事，我为什么做不到。 这句话真的似曾相识，我想起来了。在初中的时候，我一直抱着这样的信念，不断想：天底下没有我做不出来的题，只不过是我没有学过罢了，我现在不会只是因为我没有真的想去做，只要我想，没有任何能难得倒我的。我当时是对这句话没有半点怀疑的，而且觉得自己的成绩也能说明这个问题。 但在过了这么多时间后，自己的自信逐渐就磨没了，基本上一考必败的数学也让我觉得自己真的天生不会数学吧，还想过要不要放弃数学了。这个话我还真的对班主任说过，他只是说我不要想太多了。 但我有想自己小学的时候数学也考过99.5分啊，尽管那唯一的一次我因为忘了拿成绩单的日期而睡过头了，是同学回来告诉我的。高中数学我也考过全校第一，有几次也是考前几，尽管是百分之几的概率，但我真的不行吗？ 这个问题在高中时期一直萦绕在我的脑海里，而且也延伸到自己的大一时光里。 现在我可能总结出来数学失败的原因了，尽管不一定对，但我开始选择相信自己，相信自己的能力了。 这个失败的闭环大概是：我刚开始懒得学懒得背，学得不好题目不会做，怀疑自己不行，上课逐渐听不懂，更加怀疑自己，考试时怀疑自己导致失败，考试后不断失落更加怀疑自己，然后就是罪恶的循环了。真是个可怕的事情。这个总结好像又能对应自己高中的另外一次经历了。 记得应该是高二刚开学吧，当时我还算勤奋，想要来个好的开头，于是预习了不少内容，教辅书也看了不少，笔记也记了不少，然后那段时间基本上门门90多，基本上就是前几了。结果后来不知道是哪一个偷懒，我坠入了这个循环，在后来的高中时期成绩也没有再好过。 其实我应该很早就意识到这个问题了，但我为什么没有一开始就多努力努力，坚持坚持呢？ 因为那个时候我还没有深刻认识到自己容易否定自己的缺陷。我在准备好好努力的时候，那个想法又冒了出来：你还准备好好学？你不知道自己有多懒吗？你最好不要逼自己免得又要放弃。然后我就真的没有逼自己一把，逐渐坠入循环。 但自己到底应该怎么办呢？我现在甚至还在怀疑自己到底应不应该一开始就坚持努力，因为我真的有点怕去努力，因为我还记得坚持的时候的痛苦滋味。你们可能会说坚持一下又有多痛苦，又不是什么大不了的事。但我就是不自觉地感到难过和深渊般无底的痛苦。这种难过的情绪来自哪里呢？ 也许就是害怕孤独感吧，或许还有一丝的好面子。 记忆里那些痛苦的场景大部分就是我独自在清晨和半夜学习的场景，没有任何人在我身边，没有人会在我感到一丝痛苦无助的时候陪在我身边，而我就会不自觉地把这种痛苦放大。还有一部分的痛苦场景是和大家一起学习时。我的周围大多是学霸，在他们奋笔疾书时我磕磕巴巴，这个时候我就会感到很难受，我就会不自觉地去想同学会不会感觉到我什么都不会，我就是个菜鸡，没有用的东西。这种想法在我和别人离得太近学习时就必定会冒出来，我也就会一直关注同学的举动和状态，自己也就无法专心，又一次坠入怀疑的循环，一直痛苦下去。 这可能就是我害怕努力学习的原因吧。害怕孤独，害怕顶着无限的压力。 唉，去回想这些痛苦的记忆让我更加失落了，这是我做噩梦都会真实出现的场景和情绪。 我到底该怎么样去对抗呢？我能战胜这种痛苦吗？我该怎么办呢？ 好痛苦好痛苦。","categories":[{"name":"思考记录","slug":"思考记录","permalink":"https://csong.vercel.app/categories/%E6%80%9D%E8%80%83%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"大学","slug":"大学","permalink":"https://csong.vercel.app/tags/%E5%A4%A7%E5%AD%A6/"},{"name":"考试","slug":"考试","permalink":"https://csong.vercel.app/tags/%E8%80%83%E8%AF%95/"}]},{"title":"我的梦和中国梦","slug":"我的梦和中国梦","date":"2021-04-03T03:23:43.000Z","updated":"2021-05-29T12:23:28.613Z","comments":true,"path":"2021/04/03/wo-de-meng-he-zhong-guo-meng/","link":"","permalink":"https://csong.vercel.app/2021/04/03/wo-de-meng-he-zhong-guo-meng/","excerpt":"这是大一上学期政治课上的自己的简短演讲，当时想了很长时间呢。 我的梦是什么？一直在梦，一直在想，什么样的算作我的梦。苦苦的思索也许连真正前的那块帷幕也碰不到。想象着，能够找到那种那片土地，一片长满青草的小山坡，向上能看到蓝白斑驳的天空，向下能看到最平静缓和的生活姿态。静静地躺着，习习的风连我和草一起拂动，温暖的明晰的阳光撒在身上。过着没有人会把我惊起的生活。","text":"这是大一上学期政治课上的自己的简短演讲，当时想了很长时间呢。 我的梦是什么？一直在梦，一直在想，什么样的算作我的梦。苦苦的思索也许连真正前的那块帷幕也碰不到。想象着，能够找到那种那片土地，一片长满青草的小山坡，向上能看到蓝白斑驳的天空，向下能看到最平静缓和的生活姿态。静静地躺着，习习的风连我和草一起拂动，温暖的明晰的阳光撒在身上。过着没有人会把我惊起的生活。 这是我的模糊的梦吧，但希望它成为明朗的中国梦，一个用绿树鲜花簇拥着的，一个用青山绿水环抱着的，一个用清风明月笼罩着的中国之梦。","categories":[{"name":"思考记录","slug":"思考记录","permalink":"https://csong.vercel.app/categories/%E6%80%9D%E8%80%83%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"大学","slug":"大学","permalink":"https://csong.vercel.app/tags/%E5%A4%A7%E5%AD%A6/"}]},{"title":"给可爱的小朋友的一封信","slug":"给可爱的小朋友的一封信","date":"2021-04-03T03:23:43.000Z","updated":"2021-05-29T12:23:21.234Z","comments":true,"path":"2021/04/03/gei-ke-ai-de-xiao-peng-you-de-yi-feng-xin/","link":"","permalink":"https://csong.vercel.app/2021/04/03/gei-ke-ai-de-xiao-peng-you-de-yi-feng-xin/","excerpt":"这篇文章是大学学校给“特殊”小朋友的征文活动写的，没有敷衍混学时，写的是自己的真实想法。 因为我想要给特殊儿童关爱和祝福，所以我选择了参与这个活动。虽然一开始是想要做个手工当你们的玩具，但想了想你们可能最需要的不是玩具，所以我就写了这封信，写下自己想要对你们说的话。 首先呢，关于特殊儿童这个词，我一开始不是很明白，我想是不是有什么特长而特殊呢，但仔细一想既然需要关爱和祝福，可能就不是这样了。其实对于我来说，这个世界上的每一个人真的没有什么特殊的，只是不同罢了。他选择了一个别人都不建议的行业是特殊吗？只不过就是根据他自己的想法做自己想做的事。我时常在自己的心里告诉自己，在某些事上，我也会成为别人眼中的特殊，遭到特殊的对待，所以我更应该从对方的角度看问题，尊重别人的想法。总而言之，没有什么特殊的。","text":"这篇文章是大学学校给“特殊”小朋友的征文活动写的，没有敷衍混学时，写的是自己的真实想法。 因为我想要给特殊儿童关爱和祝福，所以我选择了参与这个活动。虽然一开始是想要做个手工当你们的玩具，但想了想你们可能最需要的不是玩具，所以我就写了这封信，写下自己想要对你们说的话。 首先呢，关于特殊儿童这个词，我一开始不是很明白，我想是不是有什么特长而特殊呢，但仔细一想既然需要关爱和祝福，可能就不是这样了。其实对于我来说，这个世界上的每一个人真的没有什么特殊的，只是不同罢了。他选择了一个别人都不建议的行业是特殊吗？只不过就是根据他自己的想法做自己想做的事。我时常在自己的心里告诉自己，在某些事上，我也会成为别人眼中的特殊，遭到特殊的对待，所以我更应该从对方的角度看问题，尊重别人的想法。总而言之，没有什么特殊的。 然后是关于我自己的经历了。小时候，我的家庭就不和睦，没有父母在身边，一个人在外住校学习，自己也不喜欢和别人说太多话，只想做好自己的事。基本上没有人会关心和理解我的感受，但其实我并不在乎，我只觉得更加自由自在，能专心做一件事就已经足够了。但偶尔我也会感到难过无比，特别是家长会的时候，我只能做自己的家长。我还记得自己打电话告诉妈妈家长会的事，我明明知道她远在千里之外辛苦工作根本没有可能参加，但我就是想要打那个电话，心里想着我能不能也能骄傲地看着自己家长会上的父母，让他们知道我付出了多少的努力，在多少的痛苦孤独的时光中不断进步，成绩名列前茅。但现实就是现实，她只是说知道了，然后就不知道说什么了，我也明白她的为难，只能在哭出声前挂了电话，回到寝室一个人愤怒地锤铁柜子，哭得稀里哗啦。 但现在我不会再这样了，为什么呢？因为我已经长大了，成为一个男子汉，我不能再在没有实际作用的事上去浪费时间，我必须不断努力，向着自己的目标前进，在别人都在熟睡的时间去学习新技能，为了将来能多赚一点钱。我时常问自己，如果我找到了自己喜欢的人，在她也喜欢我的情况下，如果我没有能力让她让孩子过上幸福的生活，我还算是什么男人呢？我现在的小小肩膀能够承担得起家庭的重担吗？ 我说这些事并不为了回顾自己的过去，我只想告诉你们，不管是男孩还是女孩，不管你有多么特殊，在我眼里都只是不同，我会为你的痛苦经历而感到伤心，但如果你只是沉浸在悲伤之中，我只会认为你是是个懦弱的人，没有尊严的人。 在你们这样宝贵的年纪里，有无限的可能性。总有人说自己已经努力了，但结果就是这样，我也无可奈何，这都是命，我的努力又能改变什么呢？我的亲身经历让我明白，这些人并没有真正地努力，因为每个人的条件不同，引起质变的努力也不同，如果你真的有勇气，相信自己，愿意做任何的尝试，放弃许多东西，你就一定可以。如果你虽然努力坚持，但在内心深处仍然悄悄地告诉自己不可能的话，虽然你会进步许多，但仍不会达到最初的目标。 我不懂得如何安慰和关心别人，因为我也从不安慰和关心自己，认真做事，严格要求，不断思考，是我唯一会做的事。 祝你开心。","categories":[{"name":"思考记录","slug":"思考记录","permalink":"https://csong.vercel.app/categories/%E6%80%9D%E8%80%83%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"大学","slug":"大学","permalink":"https://csong.vercel.app/tags/%E5%A4%A7%E5%AD%A6/"},{"name":"人生","slug":"人生","permalink":"https://csong.vercel.app/tags/%E4%BA%BA%E7%94%9F/"}]},{"title":"JS入门学习笔记","slug":"js入门学习笔记","date":"2021-04-03T03:23:43.000Z","updated":"2021-04-18T15:02:21.580Z","comments":true,"path":"2021/04/03/js-ru-men-xue-xi-bi-ji/","link":"","permalink":"https://csong.vercel.app/2021/04/03/js-ru-men-xue-xi-bi-ji/","excerpt":"","text":"引入方式 对于CSS来说，外部CSS文件只能在head中引入。不过对于JavaScript来说，外部JavaScript文件不仅可以在head中引入，还可以在body中引入。 外部引用此外还需要注意一点，引入外部CSS文件使用的是“link标签”，而引入外部JavaScript文件使用的是“script标签”。 &lt;!--引入外部CSS--&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;index.css&quot;/&gt;&lt;!--引入外部JavaScript--&gt;&lt;script src=&quot;js/index.js&quot;&gt;&lt;/&lt;!--引入外部CSS--&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;index.css&quot;/&gt;&lt;!--引入外部JavaScript--&gt;&lt;script src=&quot;js/index.js&quot;&gt;&lt;/script> 内部引用把HTML代码和JavaScript代码放在同一个文件中。其中JavaScript代码写在标签对内。 &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;!--1、在head中引入--&gt; &lt;script&gt; …… &lt;/script&gt;&lt;/&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;!--1、在head中引入--&gt; &lt;script&gt; …… &lt;/script&gt;&lt;/head> 内部JavaScript文件不仅可以在head中引入，也可以在body中引入。一般情况下，我们都是在head中引入。 元素属性JavaScript在元素的“事件属性”中直接编写JavaScript或调用函数。 &lt;!DOCTYPE html&gt; &lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;button&quot; value=&quot;按钮&quot; onclick=&quot;alert(&#x27;绿叶学习，给你初恋般的感觉&#x27;)&quot;/&gt;&lt;/body&gt;&lt;/&lt;!DOCTYPE html&gt; &lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;button&quot; value=&quot;按钮&quot; onclick=&quot;alert(&#x27;绿叶学习，给你初恋般的感觉&#x27;)&quot;/&gt;&lt;/body&gt;&lt;/html> 1.基本语法 （1）document.write()：在页面输出一个内容。（2）alert()：弹出一个对话框。 alert(alert(\"I love JavaScript!\"); 格式：注意有分号以及双引号，在JavaScript中，每一条语句都是英文分号（;）作为结束符。 1.1 变量 1.1.1命名 变量由字母、下划线、$或数字组成，并且第一个字母必须是“字母、下划线或$”。 变量不能是系统关键字和保留字。 变量的命名一定要区分大小写 1.1.2关键字及保留字 break else new typeof case false null var catch for switch void continue function this while default if throw with delete in true do instanceof try abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public alert eval location open array focus math outerHeight blur funtion name parent boolean history navigator parseFloat date image number regExp document isNaN object status escape length onLoad string 1.1.3使用 所有JavaScript变量都是由var声明 一个var也可以同时声明多个变量名，其中变量名之间必须用英文逗号（,）隔开。 var a=10,b=20,c=var a=10,b=20,c=30; 常量名全部大写 1.2 数据类型 1.2.1基本数据类型 数字 JavaScript中的数字是不区分“整型（int）”和“浮点型（float）”的。 在JavaScript中，所有变量都是用var声明。 字符串 字符串都是用英文单引号或英文双引号（注意都是英文）括起来的。 单引号括起来的字符串中可以包含双引号，双引号括起来的字符串中可以包含单引号。单引号括起来的字符串中，不能含有单引号，只能含有双引号。同样的道理，双引号括起来的字符串中，也不能含有双引号，只能含有单引号。 document.write()这个方法本身就是用来输出一个字符串的。 布尔值 未定义值 一个变量虽然已经用var来声明了，但是并没有对这个变量进行赋值，未定义值用undefined表示。 空值 空值用null表示。如果一个变量的值等于null，如“var n = null”，则表示系统没有给这个变量n分配内存空间。 1.3 运算符 注意%求余 字符串 + 数字 = 字符串 document.write(&quot;a+b=&quot; + n1 + document.write(&quot;a+b=&quot; + n1 + \"\"); 1.3.1自增运算符 i++(i–同理) i=1;j=i++;//等价于：i=1;j=i;i=i+i=1;j=i++;//等价于：i=1;j=i;i=i+1; ++i(–i同理) i=1;j=++i;//上面这段代码等价于：i=1;i=i+i=1;j=++i;//上面这段代码等价于：i=1;i=i+1; j=i; 1.3.2比较运算符!= 不等于 1.3.3逻辑运算符 &amp;&amp; “与”运算 || “或”运算 ! “非”运算 1.3.4条件运算符var a = 条件 ? 表达式1 : 表达式var a = 条件 ? 表达式1 : 表达式2; 当条件为true时，我们选择的是“表达式1”,当条件为false时，我们选择的是“表达式2”。 1.4 类型转换 1.4.1显式类型转换将字符串转换为数字： Number() 将任何“数字型字符串”（只有数字的字符串）转换为数字。 NaN指的是“Not a Number（非数字） var a = Number(&quot;2018&quot;) + var a = Number(&quot;2018&quot;) + 1000; parseInt()和parseFloat() parseInt()会从左到右进行判断，如果第1个字符是数字，则继续判断，直到出现非数字为止（小数点也是非数字）；如果第1个字符是非数字，则直接返回NaN。 第1个字符是加号（+）或减号（-），也就是非数字，parseInt()同样也是可以转换的。 同样的，parseFloat()也有这个特点，但能识别小数点。 将数字转换为字符串 与空字符串相加 **toString() a.toString()表示将a转换为字符串 在实际开发中，将数字转换为字符串，直接跟一个字符串相加 1.5 转义字符 转义字符 说明 \\&#39; 英文单引号 \\&quot; 英文双引号 \\n 换行符 如果是在document.write()中换行，则应该用： document.write(&quot;绿叶，&lt;br/&gt;初恋般的感觉~&quot;)document.write(&quot;绿叶，&lt;br/&gt;初恋般的感觉~&quot;); 如果是在alert()中换行，则应该用：\\n alert(&quot;绿叶，\\n初恋般的感觉&quot;)alert(&quot;绿叶，\\n初恋般的感觉&quot;); \\n是转义字符，一般用于对话框文本的换行。这里如果用就无法实现了。 1.6 注释 HTML CSS /*这是CSS注释*/ JS //这是JavaScript注释（单行）/* 这是JavaScript注释（多行） 这是JavaScript注释（多行） 这是JavaScript注释（多行）//这是JavaScript注释（单行）/* 这是JavaScript注释（多行） 这是JavaScript注释（多行） 这是JavaScript注释（多行） */ 1.7 流程控制 1.7.1选择结构 if 单向选择：if… ifif(条件)&#123; ……&#125; 双向选择：if…else… if(条件)&#123; ……&#125;if(条件)&#123; ……&#125;else&#123; ……&#125; 可以使用三目运算符来代替。 多向选择：if…else if…else… if(条件1)&#123; //当条件1为true时执行的代码&#125;else if(条件2)&#123; //当条件2为true时执行的代码&#125;else&#123; //当条件1和条件if(条件1)&#123; //当条件1为true时执行的代码&#125;else if(条件2)&#123; //当条件2为true时执行的代码&#125;else&#123; //当条件1和条件2都为false时执行的代码&#125; if语句的嵌套 switch switch语句会根据“判断值”来判断，然后来选择使用哪一个case。如果每一个case的取值都不符合，那就执行default的语句。 switch(判断值)&#123; case 取值1: 语块1;break; case 取值2: 语块2;break; …… case 取值n: 语块n;break; default: 语句块n+switch(判断值)&#123; case 取值1: 语块1;break; case 取值2: 语块2;break; …… case 取值n: 语块n;break; default: 语句块n+1;&#125; 1.7.2循环结构 while sum += n;等价于sum=sum+n;，而n+=2;等价于n=n+2;。在实际开发中，一般使用简写形式多。 while(条件)&#123; while(条件)&#123; //当条件为true时，循环执行&#125; do…while 首先是无条件执行循环体一次，然后再判断是否符合条件。如果符合条件，则重复执行循环体；如果不符合条件，则退出循环。 句结尾处括号后有一个分号（;） 在实际开发中，一般都是用while语句 do&#123; ……&#125;whiledo&#123; ……&#125;while(条件); for for(初始化表达式; 条件表达式; 循环后操作)&#123; ……&#125;for(初始化表达式; 条件表达式; 循环后操作)&#123; ……&#125;//循环后操作，指的是执行循环体（也就是大括号中的程序）后的操作 在循环体中，我们使用“拼接字符串”（也就是用加号拼接）的方式来构造一个“HTML字符串”。 for (var i = 2; i &lt; 5; i++)&#123; var str = &quot;&lt;p style=&#x27;font-size:&quot; + i * 5 + &quot;px&#x27;&gt;总有刁民想害朕&lt;/p&gt;&quot;; document.write(for (var i = 2; i &lt; 5; i++)&#123; var str = &quot;&lt;p style=&#x27;font-size:&quot; + i * 5 + &quot;px&#x27;&gt;总有刁民想害朕&lt;/p&gt;&quot;; document.write(str);&#125; 1.8 函数 1.8.1定义函数function 函数名(参数1 , 参数2 ,..., 参数n)&#123; ……&#125;//有返回值的函数function 函数名(参数1 , 参数2 ,..., 参数n)&#123; …… return function 函数名(参数1 , 参数2 ,..., 参数n)&#123; ……&#125;//有返回值的函数function 函数名(参数1 , 参数2 ,..., 参数n)&#123; …… return 返回值;&#125; 全局变量 全局变量在任何地方都可以用。 局部变量 局部变量只能在函数中使用 1.8.2函数的调用 直接调用 在表达式中调用 在超链接中调用 &lt;a href=&quot;javascript:函数名&quot;&gt;&lt;/a&gt;//举例&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; function expressMes() &#123; alert(&quot;她：我爱helicopter。\\n我：oh~my，= =?!&quot;); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=&quot;javascript:expressMes()&quot;&gt;表白对话&lt;/a&gt;&lt;/&lt;a href=&quot;javascript:函数名&quot;&gt;&lt;/a&gt;//举例&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; function expressMes() &#123; alert(&quot;她：我爱helicopter。\\n我：oh~my，= =?!&quot;); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=&quot;javascript:expressMes()&quot;&gt;表白对话&lt;/a&gt;&lt;/body> 1.8.3嵌套函数1.8.4内置函数 函数 说明 parseInt() 提取字符串中的数字，只限提取整数 parseFloat() 提取字符串中的数字，可以提取小数 isFinite() 判断某一个数是否是一个有限数值 isNaN() 判断一个数是否是NaN值 escape() 对字符串进行编码 unescape() 对字符串进行解码 eval() 把一个字符串当做一个表达式一样去执行 1.8.5内置对象 length 获取字符串的长度 var str = &quot;I love lvye!&quot;;document.write(&quot;字符串长度是：&quot; + var str = &quot;I love lvye!&quot;;document.write(&quot;字符串长度是：&quot; + str.length); toLowerCase()、toUpperCase() 将大写字符串转化为小写字符串、将小写字符串转化为大写字符串。 字符串名.toLowerCase()字符串名.to字符串名.toLowerCase()字符串名.toUpperCase() charAt() 获取字符串中的某一个字符。 字符串第1个字符的下标是0，第2个字符的下标是1。 在字符串中，空格也是作为一个字符来处理。 两个字符之间比较的是ASCII码的大小。 字符串名.charAt(n)//例如document.write(&quot;第1个字符是：&quot; + str.charAt(0) + &quot;&lt;br/&gt;&quot;);document.write(&quot;第7个字符是：&quot; + str.char字符串名.charAt(n)//例如document.write(&quot;第1个字符是：&quot; + str.charAt(0) + &quot;&lt;br/&gt;&quot;);document.write(&quot;第7个字符是：&quot; + str.charAt(6)); substring() 截取字符串的某一部分。 start和end都是整数，一般都是从0开始，其中end大于start。 substring(start,end)截取范围为：[start,end)，也就是包含start，不包含end。其中，end可以省略。当end省略时，截取的范围为：start到结尾。 对于字符串操作来说，凡是涉及下标，都是从0开始。 字符串名.substring(start, 字符串名.substring(start, end) replace() 替换字符串 字符串替换只会替换第一个，正则表达式会替换全部。 字符串名.replace(原字符串, 替换字符串)字符串名.replace(正则表达式, 替换字符串)//例如var str = &quot;I love javascript!&quot;;var str_new = str.replace(&quot;javascript&quot;, &quot;lvye&quot;);var str = &quot;I am loser, you are loser, all are loser.&quot;;var str_new = str.replace(/loser/g, 字符串名.replace(原字符串, 替换字符串)字符串名.replace(正则表达式, 替换字符串)//例如var str = &quot;I love javascript!&quot;;var str_new = str.replace(&quot;javascript&quot;, &quot;lvye&quot;);var str = &quot;I am loser, you are loser, all are loser.&quot;;var str_new = str.replace(/loser/g, \"hero\"); split() 分割字符串 分割符可以是一个字符、多个字符或一个正则表达式。 split(“”)可以用来分割字符串每一个字符。 字符串名.split(&quot;分割符&quot;)//例如&lt;script&gt; var str = &quot;HTML,CSS,JavaScript&quot;; var arr = str.split(&quot;,&quot;); document.write(&quot;数组第1个元素是：&quot; + arr[0] + &quot;&lt;br/&gt;&quot;); document.write(&quot;数组第2个元素是：&quot; + arr[1] + &quot;&lt;br/&gt;&quot;); document.write(&quot;数组第3个元素是：&quot; + arr[2]);&lt;/字符串名.split(&quot;分割符&quot;)//例如&lt;script&gt; var str = &quot;HTML,CSS,JavaScript&quot;; var arr = str.split(&quot;,&quot;); document.write(&quot;数组第1个元素是：&quot; + arr[0] + &quot;&lt;br/&gt;&quot;); document.write(&quot;数组第2个元素是：&quot; + arr[1] + &quot;&lt;br/&gt;&quot;); document.write(&quot;数组第3个元素是：&quot; + arr[2]);&lt;/script> indexOf()、lastIndexOf() 找出“某个指定字符串”在字符串中首次出现的下标位、找出“某个指定字符串”在字符串中最后出现的下标位置。（也可以找某个具体字符） 如果字符串中不包含“指定字符串”，indexOf()或lastIndexOf()就会返回-1。 字符串名.indexOf(指定字符串)字符串名.lastIndexOf字符串名.indexOf(指定字符串)字符串名.lastIndexOf(指定字符串) 1.9 数组 1.9.1创建数组一般使用简写形式来创建数组。 var 数组名 = new Array(元素1, 元素2, ……, 元素n); //完整形式var 数组名 = [元素1, 元素2, ……, 元素n]; var 数组名 = new Array(元素1, 元素2, ……, 元素n); //完整形式var 数组名 = [元素1, 元素2, ……, 元素n]; //简写形式 1.9.2数组的获取想要获取数组某一项的值，我们都是使用“下标”的方式来获取。 数组的下标是从0开始的，而不是从1开始的。 1.9.2数组的赋值也可以用于增加数组的项数。 arr[i] = 值arr[i] = 值; 1.9.3获取数组长度一般情况下，都是用数组来存储“相同数据类型”的数据 数组名.数组名.length 应用：输出数组的每一个元素 //创建数组var arr = [1, 2, 3, 4, 5, 6];//输出数组所有元素for(var i=0;i&lt;arr.length;i++)&#123; document.write(arr[i] + //创建数组var arr = [1, 2, 3, 4, 5, 6];//输出数组所有元素for(var i=0;i&lt;arr.length;i++)&#123; document.write(arr[i] + \"\");&#125; 1.9.4获截数组部分slice(start,end)截取范围为：[start,end)，也就是“包含start但不包含end”。其中，end可以省略。当end省略时，获取的范围为：start到结尾。 数组名.slice(start, 数组名.slice(start, end); 1.9.5添加数组元素 在数组开头添加元素：unshift() 数组名.unshift(新元素1, 新元素2, ……, 新元素数组名.unshift(新元素1, 新元素2, ……, 新元素n) 在数组结尾添加元素：push() 当我们不知道数组有多少个元素的时候，我们就没法用下标这种方式来给数组添加新元素。此时，push()方法就相当有用了，因为它不需要知道你有多少个元素，它的目的就是在你数组的最后面添加新元素。 数组名.push(新元素1, 新元素2, ……, 新元素数组名.push(新元素1, 新元素2, ……, 新元素n) 1.9.5删除数组元素 删除数组中的第一个元素 数组名.数组名.shift() 删除数组的最后一个元素 数组名.pop数组名.pop() 1.9.6数组元素大小比较数组名.sort(函数名)//例如//定义一个升序函数function up(a, b) &#123; return a - b;&#125;//定义一个降序函数function down(a, b) &#123; return b - a;&#125;//定义数组var arr = [3, 9, 1, 12, 50, 21];arr.sort(up);document.write(&quot;升序：&quot; + arr.join(&quot;、&quot;) + &quot;&lt;br/&gt;&quot;);arr.sort(down);document.write(&quot;降序：&quot; + arr.join(数组名.sort(函数名)//例如//定义一个升序函数function up(a, b) &#123; return a - b;&#125;//定义一个降序函数function down(a, b) &#123; return b - a;&#125;//定义数组var arr = [3, 9, 1, 12, 50, 21];arr.sort(up);document.write(&quot;升序：&quot; + arr.join(&quot;、&quot;) + &quot;&lt;br/&gt;&quot;);arr.sort(down);document.write(&quot;降序：&quot; + arr.join(\"、\")); 1.9.7数组元素颠倒顺序数组名.reverse()数组名.reverse(); 1.9.8数组元素连接成字符串默认情况下，则采用英文逗号（,）作为连接符来连接。 数组名.join(&quot;连接符&quot;)数组名.join(&quot;连接符&quot;); 1.10 时间对象 1.10.1操作年月日 获取年月日 方法 说明 getFullYear() 获取年份，取值为4位数字 getMonth() 获取月份，取值为0（一月）到11（十二月）之间的整数 getDate() 获取日数，取值为1~31之间的整数 设置年月日 setFullYear() 设置年、月、日。 year表示年，是必选参数，用一个4位的整数表示，如2017、2020等。 时间对象.setFullYear(year,month,时间对象.setFullYear(year,month,day); setMonth() 设置月、日。 month表示月，是必选参数，用0~11之间的整数表示。其中0表示1月，1表示2月，以此类推。 时间对象.setMonth(month, 时间对象.setMonth(month, day); setDate() 设置日。 day表示日，是必选参数，用1~31之间的整数表示。 时间对象.setDate(day);//举例&lt;script&gt; var d = new Date(); d.setFullYear(1992, 09, 01); document.write(时间对象.setDate(day);//举例&lt;script&gt; var d = new Date(); d.setFullYear(1992, 09, 01); document.write(\"我设置的时间是：\" + d); 1.10.2操作时分秒 获取当前的时、分、秒 方法 说明 getHours() 获取小时数，取值为0~23之间的整数 getMinutes() 获取分钟数，取值为0~59之间的整数 getSeconds() 获取秒数，取值为0~59之间的整数 &lt;script&gt; var d = new Date(); var myHours = d.getHours(); var myMinutes = d.getMinutes(); var mySeconds = d.getSeconds(); document.write(&quot;当前时间是：&quot; + myHours + &quot;:&quot; + myMinutes + &quot;:&quot; + mySeconds);&lt;/&lt;script&gt; var d = new Date(); var myHours = d.getHours(); var myMinutes = d.getMinutes(); var mySeconds = d.getSeconds(); document.write(&quot;当前时间是：&quot; + myHours + &quot;:&quot; + myMinutes + &quot;:&quot; + mySeconds);&lt;/script> 设置时、分、秒 setHours() 设置时、分、秒、毫秒。 hour是必选参数，表示时，取值为0~23之间的整数。 时间对象.setHours(hour, min, sec, 时间对象.setHours(hour, min, sec, millisec); setMinutes() 设置分、秒、毫秒。 min是必选参数，表示分，取值为0~59之间的整数。 时间对象.setMinutes( min, sec, 时间对象.setMinutes( min, sec, millisec); setSeconds() 设置秒、毫秒。 sec是必选参数，表示秒，取值为0~59之间的整数。 millisec是可选参数，表示毫秒，取值为0~999之间的整数。 时间对象.setSeconds(sec, 时间对象.setSeconds(sec, millisec); 1.10.3获取星期几时间对象.getDay();//getDay()返回一个数字，其中0表示星期天，1表示星期一……时间对象.getDay();//getDay()返回一个数字，其中0表示星期天，1表示星期一……6表示星期六。 将数字转换为中文 var weekday = [&quot;星期日&quot;, &quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;];var d = new Date();document.write(&quot;今天是&quot; + var weekday = [&quot;星期日&quot;, &quot;星期一&quot;, &quot;星期二&quot;, &quot;星期三&quot;, &quot;星期四&quot;, &quot;星期五&quot;, &quot;星期六&quot;];var d = new Date();document.write(&quot;今天是&quot; + weekday[d.getDay()]); 1.11 数学对象 1.11.1Math对象属性常见的Math对象属性 属性 说明 对应的数学形式 PI 圆周率 π LN2 2的自然对数 ln(2) LN10 10的自然对数 ln(10) LOG2E 以2为底的e的对数 log2e LOG10E 以10为底的e的对数 log10e SQRT2 2的平方根 √2 SQRT1_2 2的平方根的倒数 1/√2 对于角度，在实际开发中推荐这种写法：“度数 * Math.PI/180”，因为这种写法可以让我们一眼就能看出角度是多少。 120*Math.PI/180 //120°150*Math.PI/180 //120*Math.PI/180 //120°150*Math.PI/180 //150° 1.11.2Math对象的方法 常用 方法 说明 max(a,b,…,n) 返回一组数中的最大值 min(a,b,…,n) 返回一组数中的最小值 sin(x) 正弦 cos(x) 余弦 tan(x) 正切 asin(x) 反正弦 acos(x) 反余弦 atan(x) 反正切 atan2(y, x) 反正切（注意y、x顺序） floor(x) 向下取整 ceil(x) 向上取整 random() 生成随机数 不常用 方法 说明 abs(x) 返回x的绝对值 sqrt(x) 返回x的平方根 log(x) 返回x的自然对数（底为e） pow(x,y) 返回x的y次幂 exp(x) 返回e的指数 1.11.2最大值与最小值Math.max(a, b, …, n);Math.min(a, Math.max(a, b, …, n);Math.min(a, b, …, n); 1.11.3取整运算 向上取整 Math.ceil(x) 向下取整 Math.floor(x) 1.11.4三角函数 atan2(y, x)跟atan(x)是不一样的，atan2(y, x)能够精确判断角度对应哪一个角，而atan(x)不能。因此在高级动画开发时，我们大多数用的是atan2(y, x)，基本用不到atan(x)。 反三角函数用得很少（除了atan2()），一般都是用三角函数，常用的有：sin()、cos()和atan2()。 1.11.5生成随机数使用random()方法来生成01之间的一个随机数。这里的01是只包含0不包含1的，也就是[0, 1)。 常用 Math.random()*m 生成0~m之间的随机数 Math.random()*m+n 生成n~m+n之间的随机数 Math.random()*m-n 生成-n~m-n之间的随机数 Math.random()*m-m 生成-m~0之间的随机数 Math.floor(Math.random()*(m+1)) 生成0到m之间的随机整数 Math.floor(Math.random()*m)+1 生成1到m之间的随机整数（包括1和m） Math.floor(Math.random()*(m-n+1))+n 生成n到m之间的随机整数（包括n和m） 2.核心技术2.1 DOM 2.1.1DOM节点类型 元素节点 属性节点 文本节点 举例： 注意： 节点跟元素是不一样的概念，节点是包括元素的。 一个元素就是一个节点，这个节点称之为“元素节点”。 属性节点和文本节点是独立的节点，并不属于元素节点。 只有元素节点才可以拥有子节点，属性节点和文本节点都无法拥有子节点。 2.1.2获取元素 严格区分大小写 getElementById() onload表示在整个页面加载完成后执行的代码块。 getElementById()获取的是一个DOM对象，我们在给变量命名的时候，习惯性地以英文“o”开头，以便跟其他变量区分开来，让我们一眼就看出来这是一个DOM对象。 document.getElementById(&quot;id名&quot;)//举例window.onload = function () &#123; var oDiv = document.getElementById(&quot;div1&quot;); oDiv.style.color = document.getElementById(&quot;id名&quot;)//举例window.onload = function () &#123; var oDiv = document.getElementById(&quot;div1&quot;); oDiv.style.color = \"red\";&#125; getElementsByTagName() getElementsByTagName()方法获取的是一个“类数组”（也叫伪数组），这不是真正意义上的数组。我们只能使用到数组的length属性以及下标的形式，但是对于push()等方法是没办法在这里用的。类数组只能用到两点：length属性；下标形式。 document. getElementsByTagName(&quot;标签名&quot;)//举例&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; window.onload = function () &#123; var oUl = document.getElementById(&quot;list&quot;); var oLi = oUl.getElementsByTagName(&quot;li&quot;); oLi[2].style.color = &quot;red&quot;; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;ul id=document. getElementsByTagName(&quot;标签名&quot;)//举例&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; window.onload = function () &#123; var oUl = document.getElementById(&quot;list&quot;); var oLi = oUl.getElementsByTagName(&quot;li&quot;); oLi[2].style.color = &quot;red&quot;; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;ul id=\"list\"> HTML CSS JavaScript jQuery Vue.js getElementsByClassName() getElementsByClassName()获取的也是一个类数组。 如果我们想得到某一个元素，也是使用数组下标的形式获取的 document. getElementsByClassName(document. getElementsByClassName(\"类名\") querySelector()和querySelectorAll() 可以使用CSS选择器的语法来获取所需要的元素。 对于id选择器来说，由于页面只有一个元素，建议大家用getElementById()，而不是用querySelector()或querySelectorAll()这两个。因为getElementById()方法效率更高，性能也更快。 document.querySelector(&quot;选择器&quot;);document.querySelectorAll(document.querySelector(&quot;选择器&quot;);document.querySelectorAll(\"选择器\"); getElementsByName() document.getElementsByName(document.getElementsByName(\"name名\") document.title和document.body window.onload = function () &#123; document.title = &quot;梦想是什么？&quot;; document.body.innerHTML = window.onload = function () &#123; document.title = &quot;梦想是什么？&quot;; document.body.innerHTML = \"梦想就是一种让你感到坚持就是幸福的东西。\";&#125; 2.1.3创建元素① 创建元素节点：createElement() ② 创建文本节点：createTextNode() ③ 把文本节点插入元素节点：appendChild() ④ 把组装好的元素插入到已有元素中：appendChild() 2.1.4插入元素 appendChild() 把一个新元素插入到父元素的内部子元素的 末尾 A表示父元素，B表示动态创建好的新元素。 A.appendA.appendChild(B); insertBefore() 将一个新元素插入到父元素中的某一个子元素“之前”。 A表示父元素，B表示新子元素。ref表示指定子元素，在这个元素之前插入新子元素。 A.insertBefore(B,A.insertBefore(B,ref); 2.1.5删除元素removeChild() 删除父元素下的某个子元素 A表示父元素，B表示父元素内部的某个子元素。 A.removeChild(B);//lastElementChild)表示删除最后一个子元素A.removeChild(B);//lastElementChild)表示删除最后一个子元素//firstElementChild)表示删除第一个子元素 2.1.6复制元素cloneNode()复制元素。 obj表示被复制的元素，而参数bool是一个布尔值 obj.cloneNode(obj.cloneNode(bool) 2.1.6替换元素replaceChild() A表示父元素，new表示新子元素，old表示旧子元素。 A.replaceChild(new,A.replaceChild(new,old); 2.2 DOM进阶 2.2.1 HTML属性操作 “对象属性”方式 获取HTML属性值 obj是元素名，它一个DOM对象。所谓的DOM对象，指的是getElementById()、getElementsByTagName()等方法获取到的元素节点。 attr是属性名，.id表示获取按钮的id属性值。.type表示获取type属性值。.className表示获取一个元素的class。 obj.obj.attr 设置HTML属性值 obj.attr = &quot;值&quot;obj.attr = &quot;值&quot;; “对象方法”方式 只有“对象方法方式”才可以操作自定义属性。 getAttribute() 获取元素的某个属性的值。 obj.getAttribute(obj.getAttribute(\"attr\") setAttribute() 设置元素的某个属性的值。 obj.setAttribute(&quot;attr&quot;,obj.setAttribute(&quot;attr&quot;,\"值\") removeAttribute() 删除元素的某个属性。 removeAttribute()更多情况下是结合class属性来“整体”控制元素的样式属性的 obj.removeAttribute(obj.removeAttribute(\"attr\") hasAttribute() 判断元素是否含有某个属性。 直接使用removeAttribute()删除元素的属性是不太正确的，比较严谨的做法是先用hasAttribute()判断这个属性是否存在，如果存在，才去删除。 obj.hasAttribute(obj.hasAttribute(\"attr\") 2.2.2 CSS属性操作 获取CSS属性值 getComputedStyle() obj表示DOM对象，attr表示CSS属性名。 获取CSS属性值一定要用getComputedStyle()，而不是obj.style.attr或obj.style.cssText，原因在于后者只可以获取元素style属性中设置的CSS属性，对于内部样式或者外部样式。 getComputedStyle(obj).attr//等价getComputedStyle(obj).attr//等价//getComputedStyle(obj)[\"attr\"] 设置CSS属性值 style对象 attr表示CSS属性名，采用的同样是“骆驼峰”型。 obj.style.attr = &quot;值&quot;obj.style.attr = &quot;值&quot;; cssText属性 同时设置多个CSS属性 obj表示DOM对象，cssText的值是一个字符串 这个字符串中的属性名不再使用骆驼峰型写法，而是使用平常的CSS写法 obj.style.cssText = &quot;值&quot;obj.style.cssText = &quot;值&quot;; 2.2.3 DOM遍历 查找父元素 obj.parentNode 查找子元素 childNodes、firstChild、lastChild childNodes获取的是所有的子节点，包括元素节点以及文本节点。 比较麻烦，一般不使用。 children、firstElementChild、lastElementChild 查找兄弟元素 previousSibling、nextSibling previousSibling查找前一个兄弟节点，nextSibling查找后一个兄弟节点。 比较麻烦同不建议使用。 previousElementSibling、nextElementSibling 2.2.4 innerHTML和innerText innerHTML innerHTML获取的是元素内部所有的内容 innerText innerText获取的仅仅是文本内容。 后面的字符串可以换行写，在字符串每一行后面加上个反斜杠（\\） oDiv.innerHTML = &#x27;&lt;span&gt;绿叶学习网&lt;/span&gt;\\ &lt;span style=&quot;color:hotpink;&quot;&gt;JavaScript&lt;/span&gt;\\ &lt;span style=&quot;color:deepskyblue;&quot;&gt;入门教程&lt;/oDiv.innerHTML = &#x27;&lt;span&gt;绿叶学习网&lt;/span&gt;\\ &lt;span style=&quot;color:hotpink;&quot;&gt;JavaScript&lt;/span&gt;\\ &lt;span style=&quot;color:deepskyblue;&quot;&gt;入门教程&lt;/span>&#x27;; 2.3 事件 2.3.1 事件调用方式 在实际开发中，更倾向于在script标签中调用事件。 在script标签中调用 obj.事件名 = function()obj.事件名 = function()&#123; ……&#125;; 在元素中调用 &lt;head&gt;&lt;meta charset=&quot;utf-8&quot; /&gt;&lt;title&gt;&lt;/title&gt;&lt;script&gt; function alertMes() &#123; alert(&quot;绿叶学习网&quot;); &#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;input type=&quot;button&quot; onclick=&quot;alertMes()&quot; value=&quot;弹出&quot; /&gt;&lt;/body&gt;//或者&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;button&quot; onclick=&quot;alert(&#x27;绿叶学习网&#x27;)&quot; value=&quot;弹出&quot; /&gt;&lt;/&lt;head&gt;&lt;meta charset=&quot;utf-8&quot; /&gt;&lt;title&gt;&lt;/title&gt;&lt;script&gt; function alertMes() &#123; alert(&quot;绿叶学习网&quot;); &#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;input type=&quot;button&quot; onclick=&quot;alertMes()&quot; value=&quot;弹出&quot; /&gt;&lt;/body&gt;//或者&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=&quot;button&quot; onclick=&quot;alert(&#x27;绿叶学习网&#x27;)&quot; value=&quot;弹出&quot; /&gt;&lt;/body> 2.3.2 鼠标事件 onmouseover和onmouseout分别用于控制鼠标“移入”和“移出”这两种状态。例如在下拉菜单导航中，鼠标移入会显示二级导航，鼠标移出则会收起二级导航。 事件 说明 onclick 鼠标单击事件 onmouseover 鼠标移入事件 onmouseout 鼠标移出事件 onmousedown 鼠标按下事件 onmouseup 鼠标松开事件 onmousemove 鼠标移动事件 2.3.3 键盘事件 onkeydown表示键盘按下一瞬间所触发的事件，而onkeyup表示键盘松开一瞬间所触发的事件。对于键盘来说，都是先有“按下”，才有“松开”，也就是onkeydown发生在onkeyup之前。 键盘按下：onkeydown 键盘松开：onkeyup 2.3.3 表单事件 onfocus和onblur onfocus表示获取焦点时触发的事件，而onblur表示失去焦点时触发的事件 具有“获取焦点”和“失去焦点”特点的元素只有2种。 表单元素（单选框、复选框、单行文本框、多行文本框、下拉列表） 超链接 focus()是一个方法，仅仅用于让元素获取焦点。而onfocus是一个属性，它用于事件操作 onselect 当我们选中“单行文本框”或“多行文本框”中的内容时，就会触发onselect事件。 select()跟onselect是不一样的。 onchange onchange事件常用于“具有多个选项的表单元素”。 单选框选择某一项时触发。 复选框选择某一项时触发。 下拉列表选择某一项时触发。 2.3.4 编辑事件 oncopy 使用oncopy事件来防止页面内容被复制。 document.body.oncopy = function () &#123; return document.body.oncopy = function () &#123; return false;&#125; onselectstart 使用onselectstart事件来防止页面内容被选取。 document.body.onselectstart=function()&#123; return document.body.onselectstart=function()&#123; return false;&#125; oncontextmenu 使用oncontextmenu事件来禁止鼠标右键。 document.oncontextmenu = function () &#123; return document.oncontextmenu = function () &#123; return false;&#125; 2.3.5页面事件 onload 一般来说，只有在想要“获取页面中某一个元素”的时候才会用到 浏览器从上到下解析到window.onload时，就会先不解析window.onload里面的代码，而是继续往下解析，直到把整个HTML文档解析完了之后才会回去执行window.onload里面的代码。 window.onload = function(window.onload = function()&#123; ……&#125; onbeforeunload 离开页面之前触发的一个事件。 window.onbeforeunload = function(window.onbeforeunload = function()&#123; ……&#125; 2.4 事件进阶 2.4.1 添加事件 事件处理器 事件处理器是没办法为一个元素添加多个相同事件的。 oBtn.onclick = function()&#123;……&#125;oBtn.onclick = function()&#123;……&#125;; 解除事件： obj.事件名 = null;//例子&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; window.onload = function () &#123; var oP = document.getElementById(&quot;content&quot;); var oBtn = document.getElementById(&quot;btn&quot;); //为P元素添加事件 oP.onclick = changeColor; //点击按钮后，为p元素解除事件 oBtn.addEventListener(&quot;click&quot;, function () &#123; oP.onclick = null; &#125;, false); function changeColor() &#123; this.style.color = obj.事件名 = null;//例子&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; window.onload = function () &#123; var oP = document.getElementById(&quot;content&quot;); var oBtn = document.getElementById(&quot;btn&quot;); //为P元素添加事件 oP.onclick = changeColor; //点击按钮后，为p元素解除事件 oBtn.addEventListener(&quot;click&quot;, function () &#123; oP.onclick = null; &#125;, false); function changeColor() &#123; this.style.color = \"hotpink\"; &#125; &#125; 事件监听器 绑定事件： //fn是一个函数名oBtn.addEventListener(&quot;click&quot;, alertMes, false);function alertMes() &#123; alert(&quot;JavaScript&quot;);&#125;//fn是一个匿名函数oBtn.addEventListener(&quot;click&quot;, function () &#123; alert(&quot;JavaScript&quot;);&#125;, //fn是一个函数名oBtn.addEventListener(&quot;click&quot;, alertMes, false);function alertMes() &#123; alert(&quot;JavaScript&quot;);&#125;//fn是一个匿名函数oBtn.addEventListener(&quot;click&quot;, function () &#123; alert(&quot;JavaScript&quot;);&#125;, false); 使用多次window.onload，但是会发现JavaScript只执行最后一次window.onload。可以使用addEventListener()来实现。 window.addEventListener(&quot;load&quot;,function()&#123;……&#125;,window.addEventListener(&quot;load&quot;,function()&#123;……&#125;,false); 解除事件： obj.removeEventListener(type , fn , false);obj.removeEventListener(type , fn , false);//于removeEventListener()方法来说，fn必须是一个函数名，而不能是一个函数。 2.4.2 event对象 属性 说明 type 事件类型 keyCode 键码值 shiftKey 是否按下shift键 ctrlKey 是否按下Ctrl键 altKey 是否按下Alt键 按键 键码 W（上） 87 S（下） 83 A（左） 65 D（右） 68 ↑ 38 ↓ 40 ← 37 → 39 e.keyCode返回的是一个数字，而e.shiftKey、e.ctrlKey、e.altKey返回的都是布尔值（true或false） 2.4.3 this 哪个DOM对象（元素节点）调用了this所在的函数，那么this指向的就是哪个DOM对象。 在事件函数中，想要使用当前元素节点，我们尽量使用this来代替oBtn、oLi[i]等等这种DOM对象的写法。 2.5 windows对象 一个窗口就是一个window对象，这个窗口里面的HTML文档就是一个document对象，document对象是window对象的子对象。 子对象 说明 document 文档对象，用于操作页面元素 location 地址对象，用于操作URL地址 navigator 浏览器对象，用于获取浏览器版本信息 history 历史对象，用于操作浏览历史 screen 屏幕对象，用于操作屏幕宽度高度 方法 说明 alert() 提示对话框 confirm() 判断对话框 prompt() 输入对话框 open() 打开窗口 close() 关闭窗口 setTimeout() 开启“一次性”定时器 clearTimeout() 关闭“一次性”定时器 setInterval() 开启“重复性”定时器 clearInterval() 关闭“重复性”定时器 2.5.1 窗口操作 打开窗口 window.window.open(url, target) url指的是新窗口的地址，如果url为空，则表示打开一个空白窗口。空白窗口很有用，我们可以使用document.write()往空白窗口输出文本，甚至输出一个HTML页面。 target表示打开方式，它的取值跟a标签中target属性的取值是一样的，常用取值有两个：_blank和_self。当target为“_blank（默认值）”，表示在新窗口打开；当target为“_self”时，表示在当前窗口打开。 如果你打开的是另外一个域名下面的页面，是不允许操作新窗口的内容的 //举例：往空白窗口输出一个页面&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; window.onload = function () &#123; var oBtn = document.getElementById(&quot;btn&quot;); var opener = null; oBtn.onclick = function () &#123; opener = window.open(); var strHtml = &#x27;&lt;!DOCTYPE html&gt;\\ &lt;html&gt;\\ &lt;head&gt;\\ &lt;title&gt;&lt;/title&gt;\\ &lt;/head&gt;\\ &lt;body&gt;\\ &lt;strong&gt;小心偷影子的人，他会带走你的心。&lt;/strong&gt;\\ &lt;/body&gt;\\ &lt;/html&gt;&#x27;; opener.document.write(strHtml); &#125;; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input id=&quot;btn&quot; type=&quot;button&quot; value=&quot;打开&quot; /&gt;&lt;///举例：往空白窗口输出一个页面&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; window.onload = function () &#123; var oBtn = document.getElementById(&quot;btn&quot;); var opener = null; oBtn.onclick = function () &#123; opener = window.open(); var strHtml = &#x27;&lt;!DOCTYPE html&gt;\\ &lt;html&gt;\\ &lt;head&gt;\\ &lt;title&gt;&lt;/title&gt;\\ &lt;/head&gt;\\ &lt;body&gt;\\ &lt;strong&gt;小心偷影子的人，他会带走你的心。&lt;/strong&gt;\\ &lt;/body&gt;\\ &lt;/html&gt;&#x27;; opener.document.write(strHtml); &#125;; &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input id=&quot;btn&quot; type=&quot;button&quot; value=&quot;打开&quot; /&gt;&lt;/body> 关闭窗口 window.window.close() window.close()方法是没有参数的。 2.5.2 对话框 alert() 在alert()中实现文本换行，用的是\\n。 alert(alert(\"提示文字\") confirm() onfirm()对话框不仅提示文字，还提供确认。 confirm(confirm(\"提示文字\") prompt() prompt()对话框不仅提示文字，还返回一个字符串。 prompt(prompt(\"提示文字\") 方法 说明 alert() 仅提示文字，没有返回值 confirm() 具有提示文字，返回“布尔值”（true或false） prompt() 具有提示文字，返回“字符串” 2.5.3 定时器 setTimeout()和clearTimeout() 使用setTimeout()方法来“一次性”地调用函数，并且可以使用clearTimeout()来取消执行setTimeout()。 setTimeout(code, time);//两种写法setTimeout(alertMes, 2000)setTimeout(setTimeout(code, time);//两种写法setTimeout(alertMes, 2000)setTimeout(\"alertMes()\", 2000) 参数code可以是一段代码，可以是一个函数，也可以是一个函数名。 参数time是时间，单位为毫秒，表示要过多长时间才执行code中的代码。 setInterval()和clearInterval() 使用setInterval()方法来“重复性”地调用函数，并且可以使用clearInterval()来取消执行setInterval()。 setInterval(code, time);//写法//方式1setInterval(function()&#123;…&#125;, 2000)//方式2setInterval(alertMes, 2000)//方式3setInterval(setInterval(code, time);//写法//方式1setInterval(function()&#123;…&#125;, 2000)//方式2setInterval(alertMes, 2000)//方式3setInterval(\"alertMes()\", 2000) PS.每次点击【开始】按钮的一开始就要清除一次定时器 2.5.4 location对象 属性 说明 href 当前页面地址 search 当前页面地址“？”后面的内容 hash 当前页面地址“#”后面的内容 window.location.href 获取或设置当前页面的地址。 window.location.search 获取和设置当前页面地址“?”后面的内容。 window.location.hash 获取和设置当前页面地址井号（#）后面的内容。 2.5.5 navigator对象window.navigator.userAgent IE含有“MSIE”；Chrome含有“Chrome”；而Firefox含有“Firefox”。 &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; if (window.navigator.userAgent.indexOf(&quot;MSIE&quot;) != -1) &#123; alert(&quot;这是IE&quot;); &#125;else if (window.navigator.userAgent.indexOf(&quot;Chrome&quot;) != -1) &#123; alert(&quot;这是Chrome&quot;); &#125;else if (window.navigator.userAgent.indexOf(&quot;Firefox&quot;) != -1) &#123; alert(&quot;这是Firefox&quot;); &#125; &lt;/script&gt;&lt;/&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; if (window.navigator.userAgent.indexOf(&quot;MSIE&quot;) != -1) &#123; alert(&quot;这是IE&quot;); &#125;else if (window.navigator.userAgent.indexOf(&quot;Chrome&quot;) != -1) &#123; alert(&quot;这是Chrome&quot;); &#125;else if (window.navigator.userAgent.indexOf(&quot;Firefox&quot;) != -1) &#123; alert(&quot;这是Firefox&quot;); &#125; &lt;/script&gt;&lt;/head> indexOf()用于找出“某个字符串”在字符串中首次出现的位置，如果找不到就返回-1 2.6 document对象 2.6.1 document对象属性 属性 说明 document.title 获取文档的title document.body 获取文档的body document.forms 获取所有form元素 document.images 获取所有img元素 document.links 获取所有a元素 document.cookie 文档的cookie document.URL 当前文档的URL document.referrer 返回使浏览者到达当前文档的URL document.URL 获取当前页面的地址。 document.URL只能获取不能设置；window.location.href既可以获取也可以设置。 document.referrer 获取用户在访问当前页面之前所在页面的地址 2.6.2 document对象方法 方法 说明 document.getElementById() 通过id获取元素 document.getElementsByTagName() 通过标签名获取元素 document.getElementsByClassName() 通过class获取元素 document.getElementsByName() 通过name获取元素 document.querySelector() 通过选择器获取元素，只获取第1个 document.querySelectorAll() 通过选择器获取元素，获取所有 document.createElement() 创建元素节点 document.createTextNode() 创建文本节点 document.write() 输出内容 document.writeln() 输出内容并换行 document.write() &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; document.write(&#x27;&lt;div style=&quot;color:hotpink;&quot;&gt;绿叶学习网&lt;/div&gt;&#x27;); &lt;/script&gt;&lt;/&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script&gt; document.write(&#x27;&lt;div style=&quot;color:hotpink;&quot;&gt;绿叶学习网&lt;/div&gt;&#x27;); &lt;/script&gt;&lt;/head> document.write()不仅可以输出文本，还可以输出标签。此外，document.write()都是往body标签内输出内容的。 writeln() writeln()方法会在输出内容后面多加上一个换行符\\n。","categories":[{"name":"前端笔记","slug":"前端笔记","permalink":"https://csong.vercel.app/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"JS","slug":"JS","permalink":"https://csong.vercel.app/tags/JS/"}]}],"categories":[{"name":"前端笔记","slug":"前端笔记","permalink":"https://csong.vercel.app/categories/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"},{"name":"思考记录","slug":"思考记录","permalink":"https://csong.vercel.app/categories/%E6%80%9D%E8%80%83%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"CSS3","slug":"CSS3","permalink":"https://csong.vercel.app/tags/CSS3/"},{"name":"HTML5","slug":"HTML5","permalink":"https://csong.vercel.app/tags/HTML5/"},{"name":"大学","slug":"大学","permalink":"https://csong.vercel.app/tags/%E5%A4%A7%E5%AD%A6/"},{"name":"人生","slug":"人生","permalink":"https://csong.vercel.app/tags/%E4%BA%BA%E7%94%9F/"},{"name":"家庭","slug":"家庭","permalink":"https://csong.vercel.app/tags/%E5%AE%B6%E5%BA%AD/"},{"name":"CSS","slug":"CSS","permalink":"https://csong.vercel.app/tags/CSS/"},{"name":"html","slug":"html","permalink":"https://csong.vercel.app/tags/html/"},{"name":"困扰","slug":"困扰","permalink":"https://csong.vercel.app/tags/%E5%9B%B0%E6%89%B0/"},{"name":"考试","slug":"考试","permalink":"https://csong.vercel.app/tags/%E8%80%83%E8%AF%95/"},{"name":"JS","slug":"JS","permalink":"https://csong.vercel.app/tags/JS/"}]}